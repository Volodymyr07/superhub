{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"DwollaVerificationStatus": {
				"enum": [
					"pending",
					"verified",
					"retry",
					"document",
					"suspended"
				],
				"type": "string"
			},
			"VerificationStatus": {
				"enum": [
					"pending",
					"partial-approval",
					"approved",
					"rejected"
				],
				"type": "string"
			},
			"VerificationVendor": {
				"enum": [
					"middesk",
					"sumsub",
					"persona"
				],
				"type": "string"
			},
			"Verification": {
				"properties": {
					"reference": {
						"type": "string"
					},
					"hash": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/VerificationStatus"
					},
					"vendor": {
						"$ref": "#/components/schemas/VerificationVendor"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"reference",
					"hash",
					"status",
					"vendor"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DwollaWithdrawerInfo": {
				"properties": {
					"customerId": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/DwollaVerificationStatus"
					},
					"acceptedTerms": {
						"type": "string",
						"format": "date-time"
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					}
				},
				"required": [
					"customerId",
					"status",
					"acceptedTerms"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Blockchain": {
				"enum": [
					"solana",
					"near",
					"eth",
					"polygon",
					"base",
					"user",
					"xion",
					"arbitrum"
				],
				"type": "string"
			},
			"IWallet": {
				"properties": {
					"wallet": {
						"type": "string"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					}
				},
				"required": [
					"wallet",
					"blockchain"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Currency": {
				"enum": [
					"USD",
					"EUR",
					"GBP",
					"BRL"
				],
				"type": "string"
			},
			"MerchantBrandSettings": {
				"properties": {
					"logo": {
						"type": "string"
					},
					"displayName": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"MerchantStyle": {
				"enum": [
					"rounded",
					"sharp",
					"pill"
				],
				"type": "string"
			},
			"MerchantTheme": {
				"properties": {
					"style": {
						"$ref": "#/components/schemas/MerchantStyle"
					},
					"font": {
						"type": "string"
					},
					"textColorAction": {
						"type": "string"
					},
					"textColorAccent": {
						"type": "string"
					},
					"textColor": {
						"type": "string"
					},
					"backgroundAccent2": {
						"type": "string"
					},
					"backgroundAccent": {
						"type": "string"
					},
					"background": {
						"type": "string"
					},
					"primary": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"Cents": {
				"properties": {
					"cents": {
						"type": "integer",
						"format": "int32",
						"minimum": 0
					}
				},
				"required": [
					"cents"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WithdrawFeeConfig": {
				"properties": {
					"fixed": {
						"$ref": "#/components/schemas/Cents"
					},
					"variableBps": {
						"type": "number",
						"format": "double"
					},
					"minimum": {
						"$ref": "#/components/schemas/Cents"
					},
					"maximum": {
						"$ref": "#/components/schemas/Cents"
					}
				},
				"required": [
					"fixed",
					"variableBps",
					"minimum"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_WithdrawSpeed.WithdrawFeeConfig_": {
				"properties": {
					"asap": {
						"$ref": "#/components/schemas/WithdrawFeeConfig"
					},
					"same_day": {
						"$ref": "#/components/schemas/WithdrawFeeConfig"
					},
					"standard": {
						"$ref": "#/components/schemas/WithdrawFeeConfig"
					},
					"card": {
						"$ref": "#/components/schemas/WithdrawFeeConfig"
					},
					"iban": {
						"$ref": "#/components/schemas/WithdrawFeeConfig"
					},
					"pix": {
						"$ref": "#/components/schemas/WithdrawFeeConfig"
					}
				},
				"required": [
					"asap",
					"same_day",
					"standard",
					"card",
					"iban",
					"pix"
				],
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"OneToOneMatchDepositBonus": {
				"properties": {
					"bonusMinimum": {
						"$ref": "#/components/schemas/Cents"
					},
					"oneToOneMax": {
						"$ref": "#/components/schemas/Cents"
					}
				},
				"required": [
					"oneToOneMax"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DepositYGetXDepositBonus": {
				"properties": {
					"bonusMinimum": {
						"$ref": "#/components/schemas/Cents"
					},
					"bonus": {
						"$ref": "#/components/schemas/Cents"
					}
				},
				"required": [
					"bonusMinimum",
					"bonus"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KycType": {
				"enum": [
					"person",
					"business",
					"both"
				],
				"type": "string"
			},
			"LiquidityNotification": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double"
					},
					"chain": {
						"type": "string",
						"enum": [
							"solana",
							"near",
							"evm"
						],
						"nullable": false
					},
					"key": {
						"type": "string",
						"enum": [
							"feePayer",
							"usdcPayer"
						]
					},
					"asset": {
						"type": "string",
						"enum": [
							"near",
							"usdc",
							"sol",
							"matic"
						]
					}
				},
				"required": [
					"amount",
					"chain",
					"key",
					"asset"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MerchantScope": {
				"enum": [
					"admin",
					"editor",
					"chargeback",
					"viewer"
				],
				"type": "string"
			},
			"IMerchantUser": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"scope": {
						"$ref": "#/components/schemas/MerchantScope"
					},
					"secret": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"scope"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_Verification.Exclude_keyofVerification.hash__": {
				"properties": {
					"reference": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/VerificationStatus"
					},
					"vendor": {
						"$ref": "#/components/schemas/VerificationVendor"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"reference",
					"status",
					"vendor"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Verification.hash_": {
				"$ref": "#/components/schemas/Pick_Verification.Exclude_keyofVerification.hash__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"UboEntry": {
				"$ref": "#/components/schemas/Omit_Verification.hash_"
			},
			"ProgramWhitelistStatus": {
				"enum": [
					"approved",
					"pending",
					"rejected"
				],
				"type": "string"
			},
			"ProgramWhitelistRequest": {
				"properties": {
					"programId": {
						"type": "string"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"status": {
						"$ref": "#/components/schemas/ProgramWhitelistStatus"
					}
				},
				"required": [
					"programId",
					"blockchain",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MerchantGoLiveChecklist": {
				"properties": {
					"programWhitelistRequests": {
						"items": {
							"$ref": "#/components/schemas/ProgramWhitelistRequest"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"WebhookVersion": {
				"enum": [
					"Legacy",
					"Version 1",
					"Version 2",
					"Version 3"
				],
				"type": "string"
			},
			"WebhookEventType": {
				"enum": [
					"Card Payment Authorized",
					"Card Payment Declined",
					"Credits Minted",
					"ACH Initiated",
					"ACH Success",
					"ACH Returned",
					"ACH Failed",
					"ACH Batched",
					"PIX Failed",
					"PIX Expiration",
					"Payment Authorized",
					"Payment Expiration",
					"Settled",
					"USDC Payment Received",
					"Subscription Created",
					"Subscription Canceled",
					"Subscription Expired",
					"Subscription Failure",
					"Subscription Concluded",
					"Card Payment Chargeback Opened",
					"Card Payment Chargeback Won",
					"Card Payment Chargeback Lost",
					"Card Payment Suspected Fraud",
					"Payment Pending Review",
					"KYC Created",
					"KYC Success",
					"KYC Failure",
					"Sub-merchant KYB Created",
					"Sub-merchant KYB Success",
					"Sub-merchant KYB Failure",
					"Withdraw Pending",
					"Withdraw Success",
					"Withdraw Failure",
					"Offramp Request"
				],
				"type": "string"
			},
			"WebhookSettings": {
				"properties": {
					"webhookUrls": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"version": {
						"$ref": "#/components/schemas/WebhookVersion"
					},
					"subscriptions": {
						"items": {
							"$ref": "#/components/schemas/WebhookEventType"
						},
						"type": "array"
					}
				},
				"required": [
					"webhookUrls",
					"version",
					"subscriptions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaymentProcessor": {
				"enum": [
					"altrupay",
					"approvely",
					"payarc",
					"mock",
					"shift4",
					"worldpay",
					"luqra",
					"fallback_payarc_approvely",
					"fallback_shift4_approvely",
					"fallback_shift4_payarc_approvely",
					"fallback_shift4_approvely_payarc",
					"phantasia_approvely"
				],
				"type": "string"
			},
			"ThreeDsChallengePreference": {
				"enum": [
					"NoPreference",
					"Frictionless",
					"Challenge"
				],
				"type": "string"
			},
			"Shift4MerchantArgs": {
				"properties": {
					"url": {
						"type": "string"
					},
					"merchantId": {
						"type": "string"
					},
					"secretKey": {
						"type": "string"
					}
				},
				"required": [
					"url",
					"merchantId",
					"secretKey"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AcquirerInfo": {
				"properties": {
					"merchantId": {
						"type": "string"
					},
					"bin": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"merchantId",
					"bin",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_CardType.AcquirerInfo_": {
				"properties": {
					"VISA": {
						"$ref": "#/components/schemas/AcquirerInfo"
					},
					"MSTR": {
						"$ref": "#/components/schemas/AcquirerInfo"
					},
					"AMEX": {
						"$ref": "#/components/schemas/AcquirerInfo"
					},
					"DISC": {
						"$ref": "#/components/schemas/AcquirerInfo"
					}
				},
				"required": [
					"VISA",
					"MSTR",
					"AMEX",
					"DISC"
				],
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"ThreeDSArgs": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Record_CardType.AcquirerInfo_"
					},
					{
						"properties": {
							"mcc": {
								"type": "string"
							}
						},
						"required": [
							"mcc"
						],
						"type": "object"
					}
				]
			},
			"CardSettings": {
				"properties": {
					"processor": {
						"$ref": "#/components/schemas/PaymentProcessor"
					},
					"paysFees": {
						"type": "boolean"
					},
					"paysGasFees": {
						"type": "boolean"
					},
					"customerEmailNotifications": {
						"type": "boolean"
					},
					"merchantEmailNotifications": {
						"type": "boolean"
					},
					"fixedFee": {
						"$ref": "#/components/schemas/Cents"
					},
					"variableFeeBps": {
						"type": "number",
						"format": "double"
					},
					"supportsGooglePay": {
						"type": "boolean"
					},
					"supportsApplePay": {
						"type": "boolean"
					},
					"saveCardDefault": {
						"type": "boolean"
					},
					"ignoreProcessorLimit": {
						"type": "boolean"
					},
					"nameMatchThreshold": {
						"type": "number",
						"format": "double"
					},
					"disable3DSOverride": {
						"type": "boolean"
					},
					"verificationSettings": {
						"properties": {
							"threshold3DS": {
								"$ref": "#/components/schemas/Cents"
							},
							"verificationLimit": {
								"$ref": "#/components/schemas/Cents"
							}
						},
						"type": "object"
					},
					"avsCheck": {
						"type": "boolean"
					},
					"threeDsChallengePreference": {
						"$ref": "#/components/schemas/ThreeDsChallengePreference"
					},
					"shift4MerchantArgs": {
						"$ref": "#/components/schemas/Shift4MerchantArgs"
					},
					"threeDSArgs": {
						"$ref": "#/components/schemas/ThreeDSArgs"
					},
					"statementDescriptor": {
						"type": "string"
					}
				},
				"required": [
					"paysFees",
					"paysGasFees",
					"customerEmailNotifications",
					"merchantEmailNotifications",
					"avsCheck",
					"threeDsChallengePreference"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AchProcessor": {
				"enum": [
					"mock",
					"aptpay"
				],
				"type": "string"
			},
			"ACHSettings": {
				"properties": {
					"processor": {
						"$ref": "#/components/schemas/AchProcessor"
					},
					"paysFees": {
						"type": "boolean"
					},
					"paysGasFees": {
						"type": "boolean"
					},
					"maxAmount": {
						"$ref": "#/components/schemas/Cents"
					},
					"nameMatchThreshold": {
						"type": "number",
						"format": "double"
					},
					"allowDelayedTransactions": {
						"type": "boolean"
					},
					"customerEmailNotifications": {
						"type": "boolean"
					},
					"merchantEmailNotifications": {
						"type": "boolean"
					},
					"minFee": {
						"$ref": "#/components/schemas/Cents"
					},
					"maxFee": {
						"$ref": "#/components/schemas/Cents"
					},
					"feeBps": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"paysFees",
					"paysGasFees",
					"allowDelayedTransactions",
					"customerEmailNotifications",
					"merchantEmailNotifications"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PixProcessor": {
				"enum": [
					"brla",
					"mock"
				],
				"type": "string"
			},
			"PixSettings": {
				"properties": {
					"processor": {
						"$ref": "#/components/schemas/PixProcessor"
					},
					"paysFees": {
						"type": "boolean"
					},
					"fixedFee": {
						"$ref": "#/components/schemas/Cents"
					},
					"feeBps": {
						"type": "number",
						"format": "double"
					},
					"customerEmailNotifications": {
						"type": "boolean"
					},
					"merchantEmailNotifications": {
						"type": "boolean"
					}
				},
				"required": [
					"paysFees",
					"customerEmailNotifications",
					"merchantEmailNotifications"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IbanProcessor": {
				"enum": [
					"merge",
					"mock"
				],
				"type": "string"
			},
			"IbanSettings": {
				"properties": {
					"processor": {
						"$ref": "#/components/schemas/IbanProcessor"
					},
					"paysFees": {
						"type": "boolean"
					},
					"paysGasFees": {
						"type": "boolean"
					},
					"fixedFee": {
						"$ref": "#/components/schemas/Cents"
					},
					"feeBps": {
						"type": "number",
						"format": "double"
					},
					"minFee": {
						"$ref": "#/components/schemas/Cents"
					},
					"customerEmailNotifications": {
						"type": "boolean"
					},
					"merchantEmailNotifications": {
						"type": "boolean"
					}
				},
				"required": [
					"paysFees",
					"paysGasFees",
					"customerEmailNotifications",
					"merchantEmailNotifications"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NSureSettings": {
				"properties": {
					"nSureInsurance": {
						"type": "boolean"
					},
					"nSureAchInsurance": {
						"type": "boolean"
					},
					"nSurePartnerId": {
						"type": "string"
					},
					"protectionMinimum": {
						"$ref": "#/components/schemas/Cents"
					},
					"protectionAchMinimum": {
						"$ref": "#/components/schemas/Cents"
					},
					"ignoreRejection": {
						"type": "boolean"
					},
					"ignoreAchRejection": {
						"type": "boolean"
					},
					"enableOverrideReview": {
						"type": "boolean"
					},
					"overrideReviewHours": {
						"type": "number",
						"format": "double"
					},
					"nSureFixedFee": {
						"$ref": "#/components/schemas/Cents"
					},
					"nSureVariableFeeBps": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"nSureInsurance",
					"nSureAchInsurance",
					"nSureFixedFee",
					"nSureVariableFeeBps"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PayoutProviderOption": {
				"enum": [
					"aptpay",
					"coinfx",
					"cybrid"
				],
				"type": "string"
			},
			"IbanPayoutProvider": {
				"enum": [
					"merge"
				],
				"type": "string"
			},
			"RtpPayoutProvider": {
				"enum": [
					"dwolla",
					"cybrid"
				],
				"type": "string"
			},
			"PixPayoutProvider": {
				"enum": [
					"brla"
				],
				"type": "string"
			},
			"StableCoin": {
				"enum": [
					"USDC",
					"SBC",
					"EUROe",
					"FXUSD"
				],
				"type": "string"
			},
			"Record_Currency.StableCoin_": {
				"properties": {
					"USD": {
						"$ref": "#/components/schemas/StableCoin"
					},
					"EUR": {
						"$ref": "#/components/schemas/StableCoin"
					},
					"GBP": {
						"$ref": "#/components/schemas/StableCoin"
					},
					"BRL": {
						"$ref": "#/components/schemas/StableCoin"
					}
				},
				"required": [
					"USD",
					"EUR",
					"GBP",
					"BRL"
				],
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"SettlementLocations": {
				"enum": [
					"circle",
					"brale",
					"paper"
				],
				"type": "string"
			},
			"IMerchant_string_": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"merchantId": {
						"type": "string"
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"brand": {
						"$ref": "#/components/schemas/MerchantBrandSettings"
					},
					"colors": {
						"$ref": "#/components/schemas/MerchantTheme"
					},
					"url": {
						"type": "string"
					},
					"withdrawFees": {
						"properties": {
							"business": {
								"$ref": "#/components/schemas/Record_WithdrawSpeed.WithdrawFeeConfig_"
							},
							"user": {
								"$ref": "#/components/schemas/Record_WithdrawSpeed.WithdrawFeeConfig_"
							},
							"swapBps": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"business",
							"user",
							"swapBps"
						],
						"type": "object"
					},
					"wallets": {
						"properties": {
							"evm": {
								"properties": {
									"usdcPayer": {
										"type": "string"
									},
									"feePayer": {
										"type": "string"
									}
								},
								"required": [
									"usdcPayer",
									"feePayer"
								],
								"type": "object"
							},
							"near": {
								"properties": {
									"feePayer": {
										"type": "string"
									}
								},
								"required": [
									"feePayer"
								],
								"type": "object"
							},
							"solana": {
								"properties": {
									"usdcPayer": {
										"type": "string"
									},
									"feePayer": {
										"type": "string"
									}
								},
								"required": [
									"usdcPayer",
									"feePayer"
								],
								"type": "object"
							}
						},
						"required": [
							"evm",
							"near",
							"solana"
						],
						"type": "object"
					},
					"depositBonus": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/OneToOneMatchDepositBonus"
							},
							{
								"$ref": "#/components/schemas/DepositYGetXDepositBonus"
							}
						]
					},
					"apiKey": {
						"type": "string"
					},
					"apiKeys": {
						"items": {
							"properties": {
								"privateUuid": {
									"type": "string"
								},
								"publicUuid": {
									"type": "string"
								}
							},
							"required": [
								"privateUuid",
								"publicUuid"
							],
							"type": "object"
						},
						"type": "array"
					},
					"kycType": {
						"$ref": "#/components/schemas/KycType"
					},
					"liquidityNotifications": {
						"items": {
							"$ref": "#/components/schemas/LiquidityNotification"
						},
						"type": "array"
					},
					"settlementAddresses": {
						"allOf": [
							{
								"properties": {
									"solana": {
										"type": "string"
									},
									"near": {
										"type": "string"
									},
									"eth": {
										"type": "string"
									},
									"polygon": {
										"type": "string"
									},
									"base": {
										"type": "string"
									},
									"user": {
										"type": "string"
									},
									"xion": {
										"type": "string"
									},
									"arbitrum": {
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"properties": {
									"mpcWalletProvider": {
										"type": "string",
										"enum": [
											"metakeep"
										],
										"nullable": false
									},
									"recipientAddresses": {
										"items": {
											"properties": {
												"createdAt": {
													"type": "string",
													"format": "date-time"
												},
												"recipient": {
													"type": "string"
												}
											},
											"required": [
												"createdAt",
												"recipient"
											],
											"type": "object"
										},
										"type": "array"
									},
									"verification": {
										"$ref": "#/components/schemas/Verification"
									}
								},
								"type": "object"
							}
						]
					},
					"settlementBankToken": {
						"type": "string"
					},
					"settlementAptPayId": {
						"type": "string"
					},
					"users": {
						"items": {
							"$ref": "#/components/schemas/IMerchantUser"
						},
						"type": "array"
					},
					"ubos": {
						"items": {
							"$ref": "#/components/schemas/UboEntry"
						},
						"type": "array"
					},
					"goLiveChecklist": {
						"$ref": "#/components/schemas/MerchantGoLiveChecklist"
					},
					"webhookSettings": {
						"$ref": "#/components/schemas/WebhookSettings"
					},
					"cardSettings": {
						"$ref": "#/components/schemas/CardSettings"
					},
					"achSettings": {
						"$ref": "#/components/schemas/ACHSettings"
					},
					"pixSettings": {
						"$ref": "#/components/schemas/PixSettings"
					},
					"ibanSettings": {
						"$ref": "#/components/schemas/IbanSettings"
					},
					"nSureSettings": {
						"$ref": "#/components/schemas/NSureSettings"
					},
					"blockConfig": {
						"properties": {
							"failedPaymentAttemptLimit": {
								"type": "number",
								"format": "double"
							}
						},
						"type": "object"
					},
					"hideBranding": {
						"type": "boolean"
					},
					"withdrawFeePayment": {
						"properties": {
							"paysGasFees": {
								"properties": {
									"xion": {
										"type": "boolean"
									},
									"user": {
										"type": "boolean"
									},
									"flow": {
										"type": "boolean"
									},
									"arbitrum": {
										"type": "boolean"
									},
									"base": {
										"type": "boolean"
									},
									"eth": {
										"type": "boolean"
									},
									"polygon": {
										"type": "boolean"
									},
									"near": {
										"type": "boolean"
									},
									"solana": {
										"type": "boolean"
									}
								},
								"type": "object"
							},
							"paysWithdrawFees": {
								"type": "boolean"
							}
						},
						"type": "object"
					},
					"pushToCardEnabled": {
						"type": "boolean"
					},
					"bankPayoutProvider": {
						"$ref": "#/components/schemas/PayoutProviderOption"
					},
					"ibanPayoutProvider": {
						"$ref": "#/components/schemas/IbanPayoutProvider"
					},
					"rtpPayoutProvider": {
						"$ref": "#/components/schemas/RtpPayoutProvider"
					},
					"pixPayoutProvider": {
						"$ref": "#/components/schemas/PixPayoutProvider"
					},
					"maxTransactionAmount": {
						"$ref": "#/components/schemas/Cents"
					},
					"refundBalanceLimit": {
						"$ref": "#/components/schemas/Cents"
					},
					"parent": {
						"type": "string"
					},
					"creditSeed": {
						"type": "string"
					},
					"tokenSettings": {
						"$ref": "#/components/schemas/Record_Currency.StableCoin_"
					},
					"withdrawSettlementLocation": {
						"$ref": "#/components/schemas/SettlementLocations"
					},
					"enforceJwt": {
						"type": "boolean"
					},
					"enforceCheckoutJwt": {
						"type": "boolean"
					},
					"metakeepAppId": {
						"type": "string"
					},
					"submerchantsSeeCustomers": {
						"type": "boolean"
					},
					"externalVerificationLinks": {
						"type": "boolean"
					},
					"experimentalSwap": {
						"type": "boolean"
					},
					"whitelistedAncestorUrls": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"_id",
					"merchantId",
					"verification",
					"withdrawFees",
					"wallets",
					"apiKey",
					"apiKeys",
					"kycType",
					"liquidityNotifications",
					"users",
					"ubos",
					"goLiveChecklist",
					"cardSettings",
					"achSettings",
					"pixSettings",
					"ibanSettings",
					"nSureSettings",
					"hideBranding",
					"pushToCardEnabled",
					"refundBalanceLimit",
					"creditSeed",
					"tokenSettings",
					"withdrawSettlementLocation",
					"enforceJwt",
					"submerchantsSeeCustomers"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IUser": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"wallets": {
						"items": {
							"$ref": "#/components/schemas/IWallet"
						},
						"type": "array"
					},
					"email": {
						"type": "string"
					},
					"isBlocked": {
						"type": "boolean"
					},
					"currency": {
						"$ref": "#/components/schemas/Currency"
					},
					"originalCurrency": {
						"$ref": "#/components/schemas/Currency"
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"user": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"dwolla": {
						"$ref": "#/components/schemas/DwollaWithdrawerInfo"
					},
					"watchlistExempt": {
						"type": "boolean"
					},
					"watchlistId": {
						"type": "string"
					}
				},
				"required": [
					"_id",
					"wallets",
					"email",
					"isBlocked",
					"currency",
					"originalCurrency",
					"verification",
					"user",
					"watchlistExempt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IWithdrawer": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"wallets": {
						"items": {
							"$ref": "#/components/schemas/IWallet"
						},
						"type": "array"
					},
					"email": {
						"type": "string"
					},
					"isBlocked": {
						"type": "boolean"
					},
					"currency": {
						"$ref": "#/components/schemas/Currency"
					},
					"originalCurrency": {
						"$ref": "#/components/schemas/Currency"
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					}
				},
				"required": [
					"_id",
					"wallets",
					"email",
					"isBlocked",
					"currency",
					"originalCurrency",
					"verification"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AdditionalVerification": {
				"properties": {
					"name": {
						"type": "string"
					},
					"link": {
						"type": "string"
					},
					"reference": {
						"type": "string"
					},
					"vendor": {
						"$ref": "#/components/schemas/VerificationVendor"
					}
				},
				"required": [
					"name",
					"link",
					"reference",
					"vendor"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WithdrawerVerificationRequiredResponse": {
				"properties": {
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"verificationLink": {
						"type": "string",
						"description": "Link which can be hosted in an iframe or redirect the user to complete verification."
					},
					"redirectLink": {
						"type": "string",
						"description": "Link where the user will be redirected to upon successful verification."
					},
					"additionalVerificationLinks": {
						"items": {
							"$ref": "#/components/schemas/AdditionalVerification"
						},
						"type": "array",
						"description": "Additional links which can be hosted in an iframe or redirect the user to complete verification."
					},
					"rejectionReasons": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "List of reasons as to why the verification was rejected."
					},
					"withdrawer": {
						"$ref": "#/components/schemas/IWithdrawer"
					}
				},
				"required": [
					"verification",
					"withdrawer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KycUserInformation": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"firstName": {
						"type": "string",
						"minLength": 1
					},
					"surName": {
						"type": "string",
						"minLength": 1
					},
					"physicalAddress": {
						"type": "string",
						"minLength": 1
					},
					"city": {
						"type": "string",
						"minLength": 1
					},
					"state": {
						"type": "string",
						"minLength": 2
					},
					"zip": {
						"type": "string"
					},
					"country": {
						"type": "string",
						"description": "ISO 3166-1 alpha-2 country codes",
						"pattern": "^[A-Z]{2}$"
					},
					"dob": {
						"type": "string",
						"description": "Date of birth in YYYYMMDD format",
						"pattern": "^\\d{4}[-/]?(\\d{2}[-/]?){2}$"
					},
					"ssn": {
						"type": "string",
						"description": "4 Digit SSN",
						"pattern": "^\\d{4}$"
					}
				},
				"required": [
					"email",
					"firstName",
					"surName",
					"physicalAddress",
					"city",
					"state",
					"zip",
					"country",
					"dob",
					"ssn"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KycUsRequestBody": {
				"properties": {
					"merchantId": {
						"type": "string",
						"description": "The merchant the withdrawer is interacting with"
					},
					"additionalWallets": {
						"items": {
							"properties": {
								"blockchain": {
									"$ref": "#/components/schemas/Blockchain"
								},
								"wallet": {
									"type": "string"
								}
							},
							"required": [
								"blockchain",
								"wallet"
							],
							"type": "object"
						},
						"type": "array",
						"description": "Additional wallets to add to the newly created users KYC record"
					},
					"info": {
						"$ref": "#/components/schemas/KycUserInformation"
					}
				},
				"required": [
					"info"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KycDocVRequestBody": {
				"properties": {
					"merchantId": {
						"type": "string",
						"description": "The merchant the withdrawer is interacting with"
					},
					"additionalWallets": {
						"items": {
							"properties": {
								"blockchain": {
									"$ref": "#/components/schemas/Blockchain"
								},
								"wallet": {
									"type": "string"
								}
							},
							"required": [
								"blockchain",
								"wallet"
							],
							"type": "object"
						},
						"type": "array",
						"description": "Additional wallets to add to the newly created users KYC record"
					},
					"email": {
						"type": "string"
					},
					"country": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KycRequestBody": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/KycUsRequestBody"
					},
					{
						"$ref": "#/components/schemas/KycDocVRequestBody"
					}
				]
			},
			"IUser_string_": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"wallets": {
						"items": {
							"$ref": "#/components/schemas/IWallet"
						},
						"type": "array"
					},
					"email": {
						"type": "string"
					},
					"isBlocked": {
						"type": "boolean"
					},
					"currency": {
						"$ref": "#/components/schemas/Currency"
					},
					"originalCurrency": {
						"$ref": "#/components/schemas/Currency"
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"user": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"dwolla": {
						"$ref": "#/components/schemas/DwollaWithdrawerInfo"
					},
					"watchlistExempt": {
						"type": "boolean"
					},
					"watchlistId": {
						"type": "string"
					}
				},
				"required": [
					"_id",
					"wallets",
					"email",
					"isBlocked",
					"currency",
					"originalCurrency",
					"verification",
					"user",
					"watchlistExempt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Required___id-string__": {
				"properties": {},
				"type": "object",
				"description": "Make all properties in T required"
			},
			"KycSumsubShareTokenBody": {
				"properties": {
					"merchantId": {
						"type": "string",
						"description": "The merchant the withdrawer is interacting with"
					},
					"additionalWallets": {
						"items": {
							"properties": {
								"blockchain": {
									"$ref": "#/components/schemas/Blockchain"
								},
								"wallet": {
									"type": "string"
								}
							},
							"required": [
								"blockchain",
								"wallet"
							],
							"type": "object"
						},
						"type": "array",
						"description": "Additional wallets to add to the newly created users KYC record"
					},
					"email": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"vendor": {
						"type": "string",
						"enum": [
							"sumsub"
						],
						"nullable": false
					},
					"shareToken": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"country",
					"vendor",
					"shareToken"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KycShareTokenBody": {
				"$ref": "#/components/schemas/KycSumsubShareTokenBody"
			},
			"IBusiness": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"wallets": {
						"items": {
							"$ref": "#/components/schemas/IWallet"
						},
						"type": "array"
					},
					"email": {
						"type": "string"
					},
					"isBlocked": {
						"type": "boolean"
					},
					"currency": {
						"$ref": "#/components/schemas/Currency"
					},
					"originalCurrency": {
						"$ref": "#/components/schemas/Currency"
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"business": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"ubos": {
						"items": {
							"$ref": "#/components/schemas/UboEntry"
						},
						"type": "array"
					}
				},
				"required": [
					"_id",
					"wallets",
					"email",
					"isBlocked",
					"currency",
					"originalCurrency",
					"verification",
					"business",
					"ubos"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KybDocVRequestBody": {
				"properties": {
					"merchantId": {
						"type": "string",
						"description": "The merchant the business is interacting with"
					},
					"additionalWallets": {
						"items": {
							"properties": {
								"blockchain": {
									"$ref": "#/components/schemas/Blockchain"
								},
								"wallet": {
									"type": "string"
								}
							},
							"required": [
								"blockchain",
								"wallet"
							],
							"type": "object"
						},
						"type": "array",
						"description": "Additional wallets to add to the newly created users KYC record"
					},
					"country": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"required": [
					"merchantId",
					"country",
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KybInformation": {
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the business"
					},
					"tin": {
						"type": "string",
						"description": "Tax ID Number of the business.\n\n- In the US this is the 9 digital TIN\n- In Canada this is the 9 digit business id\n- In the rest of the world it varys"
					},
					"website": {
						"type": "string",
						"description": "Main website to the landing page of the business"
					},
					"business": {
						"properties": {
							"country": {
								"type": "string",
								"description": "Main business country"
							},
							"zip": {
								"type": "string",
								"description": "Main business zip code"
							},
							"state": {
								"type": "string",
								"description": "Main business state/providence"
							},
							"city": {
								"type": "string",
								"description": "Main business city"
							},
							"address2": {
								"type": "string"
							},
							"address1": {
								"type": "string",
								"description": "Main business street address"
							}
						},
						"required": [
							"country",
							"zip",
							"state",
							"city",
							"address1"
						],
						"type": "object"
					},
					"person": {
						"properties": {
							"email": {
								"type": "string",
								"description": "Email of the main business contact"
							},
							"lastName": {
								"type": "string",
								"description": "Last name of the main business contact"
							},
							"firstName": {
								"type": "string",
								"description": "First name of the main business contact"
							}
						},
						"required": [
							"email",
							"lastName",
							"firstName"
						],
						"type": "object"
					},
					"merchantId": {
						"type": "string",
						"description": "The merchant the business is interacting with"
					}
				},
				"required": [
					"name",
					"tin",
					"website",
					"business",
					"person"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UboInfo": {
				"properties": {
					"ssn": {
						"type": "string"
					},
					"dob": {
						"type": "string"
					},
					"country": {
						"type": "string",
						"description": "ISO 3166-1 alpha-2 country codes",
						"pattern": "^[A-Z]{2}$"
					},
					"zip": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"physicalAddress": {
						"type": "string"
					},
					"surName": {
						"type": "string",
						"minLength": 1
					},
					"firstName": {
						"type": "string",
						"minLength": 1
					}
				},
				"required": [
					"ssn",
					"dob",
					"country",
					"zip",
					"state",
					"city",
					"physicalAddress",
					"surName",
					"firstName"
				],
				"type": "object"
			},
			"KybPassiveRequestBody": {
				"properties": {
					"merchantId": {
						"type": "string",
						"description": "The merchant the business is interacting with"
					},
					"additionalWallets": {
						"items": {
							"properties": {
								"blockchain": {
									"$ref": "#/components/schemas/Blockchain"
								},
								"wallet": {
									"type": "string"
								}
							},
							"required": [
								"blockchain",
								"wallet"
							],
							"type": "object"
						},
						"type": "array",
						"description": "Additional wallets to add to the newly created users KYC record"
					},
					"info": {
						"$ref": "#/components/schemas/KybInformation"
					},
					"ubos": {
						"items": {
							"$ref": "#/components/schemas/UboInfo"
						},
						"type": "array"
					}
				},
				"required": [
					"merchantId",
					"info"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KybRequestBody": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/KybDocVRequestBody"
					},
					{
						"$ref": "#/components/schemas/KybPassiveRequestBody"
					}
				]
			},
			"Pick_IBankAccount.Exclude_keyofIBankAccount.vendorData__": {
				"properties": {
					"reference": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"token": {
						"type": "string"
					},
					"routingNumber": {
						"type": "string"
					},
					"last4": {
						"type": "string"
					},
					"accountHash": {
						"type": "string"
					},
					"rtpEligible": {
						"type": "boolean"
					},
					"isDeleted": {
						"type": "boolean"
					}
				},
				"required": [
					"reference",
					"alias",
					"token",
					"routingNumber",
					"last4",
					"accountHash",
					"rtpEligible"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_IBankAccount.vendorData_": {
				"$ref": "#/components/schemas/Pick_IBankAccount.Exclude_keyofIBankAccount.vendorData__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CardType": {
				"enum": [
					"VISA",
					"MSTR",
					"AMEX",
					"DISC"
				],
				"type": "string"
			},
			"DisbursementStatus": {
				"enum": [
					"Immediate",
					"Business Day",
					"Ineligible",
					"Unknown"
				],
				"type": "string"
			},
			"Pick_ICardAccount.Exclude_keyofICardAccount.vendorData__": {
				"properties": {
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"type": {
						"$ref": "#/components/schemas/CardType"
					},
					"token": {
						"type": "string"
					},
					"last4": {
						"type": "string"
					},
					"disbursementStatus": {
						"$ref": "#/components/schemas/DisbursementStatus"
					},
					"nameOnCard": {
						"type": "string"
					}
				},
				"required": [
					"createdAt",
					"type",
					"token",
					"last4",
					"disbursementStatus"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_ICardAccount.vendorData_": {
				"$ref": "#/components/schemas/Pick_ICardAccount.Exclude_keyofICardAccount.vendorData__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"Pick_IIbanAccount.Exclude_keyofIIbanAccount.vendorData__": {
				"properties": {
					"reference": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"token": {
						"type": "string"
					},
					"last4": {
						"type": "string"
					},
					"accountHash": {
						"type": "string"
					},
					"sortCode": {
						"type": "string"
					}
				},
				"required": [
					"reference",
					"alias",
					"token",
					"last4",
					"accountHash",
					"sortCode"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_IIbanAccount.vendorData_": {
				"$ref": "#/components/schemas/Pick_IIbanAccount.Exclude_keyofIIbanAccount.vendorData__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"IPixAccount": {
				"properties": {
					"key": {
						"type": "string"
					},
					"accountHash": {
						"type": "string"
					},
					"token": {
						"type": "string"
					}
				},
				"required": [
					"key",
					"accountHash",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IWithdrawerWithAccounts": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"wallets": {
						"items": {
							"$ref": "#/components/schemas/IWallet"
						},
						"type": "array"
					},
					"email": {
						"type": "string"
					},
					"isBlocked": {
						"type": "boolean"
					},
					"currency": {
						"$ref": "#/components/schemas/Currency"
					},
					"originalCurrency": {
						"$ref": "#/components/schemas/Currency"
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"bankAccounts": {
						"items": {
							"$ref": "#/components/schemas/Omit_IBankAccount.vendorData_"
						},
						"type": "array"
					},
					"cards": {
						"items": {
							"$ref": "#/components/schemas/Omit_ICardAccount.vendorData_"
						},
						"type": "array"
					},
					"ibans": {
						"items": {
							"$ref": "#/components/schemas/Omit_IIbanAccount.vendorData_"
						},
						"type": "array"
					},
					"pixes": {
						"items": {
							"$ref": "#/components/schemas/IPixAccount"
						},
						"type": "array"
					}
				},
				"required": [
					"_id",
					"wallets",
					"email",
					"isBlocked",
					"currency",
					"originalCurrency",
					"verification",
					"bankAccounts",
					"cards",
					"ibans",
					"pixes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetWithdrawerResponse": {
				"properties": {
					"withdrawer": {
						"$ref": "#/components/schemas/IWithdrawerWithAccounts"
					}
				},
				"required": [
					"withdrawer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WithdrawDisabledTypes": {
				"properties": {
					"rtpDisabled": {
						"type": "boolean"
					},
					"cardDisabled": {
						"type": "boolean"
					}
				},
				"required": [
					"rtpDisabled",
					"cardDisabled"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IBusiness_string_": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"wallets": {
						"items": {
							"$ref": "#/components/schemas/IWallet"
						},
						"type": "array"
					},
					"email": {
						"type": "string"
					},
					"isBlocked": {
						"type": "boolean"
					},
					"currency": {
						"$ref": "#/components/schemas/Currency"
					},
					"originalCurrency": {
						"$ref": "#/components/schemas/Currency"
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"business": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"ubos": {
						"items": {
							"$ref": "#/components/schemas/UboEntry"
						},
						"type": "array"
					}
				},
				"required": [
					"_id",
					"wallets",
					"email",
					"isBlocked",
					"currency",
					"originalCurrency",
					"verification",
					"business",
					"ubos"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CurrencyCents": {
				"properties": {
					"cents": {
						"type": "integer",
						"format": "int32",
						"minimum": 0
					},
					"currency": {
						"$ref": "#/components/schemas/Currency"
					}
				},
				"required": [
					"cents",
					"currency"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WithdrawStatus": {
				"enum": [
					"completed",
					"created",
					"failed",
					"pending"
				],
				"type": "string"
			},
			"WithdrawSpeed": {
				"enum": [
					"asap",
					"same_day",
					"standard",
					"card",
					"iban",
					"pix"
				],
				"type": "string"
			},
			"IWithdraw": {
				"properties": {
					"withdrawer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IUser_string_"
							},
							{
								"$ref": "#/components/schemas/IBusiness_string_"
							}
						]
					},
					"transferId": {
						"type": "string"
					},
					"wallet": {
						"type": "string"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"transaction": {
						"type": "string"
					},
					"accountId": {
						"type": "string"
					},
					"amount": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"usdToForeignExchangeRate": {
						"type": "number",
						"format": "double",
						"description": "This is the conversion rate from USD to the foreign currency.\nFor example 0.90 = 0.90 USD/GBP\n\nSo if you want to convert GBP to USD you would multiply 15 GBP * 0.90 USD/GBP = 13.5 USD\nIf you want to convert USD to GBP you would multiply 13.5 USD * 1/0.90 GBP/USD = 15 GBP"
					},
					"userPaidFees": {
						"properties": {
							"swapFees": {
								"$ref": "#/components/schemas/CurrencyCents"
							},
							"gasFees": {
								"$ref": "#/components/schemas/CurrencyCents"
							},
							"fees": {
								"$ref": "#/components/schemas/CurrencyCents"
							}
						},
						"required": [
							"swapFees",
							"gasFees",
							"fees"
						],
						"type": "object"
					},
					"merchantPaidFees": {
						"properties": {
							"gasFees": {
								"$ref": "#/components/schemas/CurrencyCents"
							},
							"fees": {
								"$ref": "#/components/schemas/CurrencyCents"
							}
						},
						"required": [
							"gasFees",
							"fees"
						],
						"type": "object"
					},
					"status": {
						"$ref": "#/components/schemas/WithdrawStatus"
					},
					"expectedDeliveryDate": {
						"type": "string"
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"speed": {
						"$ref": "#/components/schemas/WithdrawSpeed"
					},
					"provider": {
						"type": "string"
					}
				},
				"required": [
					"withdrawer",
					"transferId",
					"wallet",
					"blockchain",
					"transaction",
					"accountId",
					"amount",
					"usdToForeignExchangeRate",
					"userPaidFees",
					"merchantPaidFees",
					"status",
					"expectedDeliveryDate",
					"merchant",
					"createdAt",
					"updatedAt",
					"speed",
					"provider"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LinkTokenCreateResponse": {
				"description": "LinkTokenCreateResponse defines the response schema for `/link/token/create`",
				"properties": {
					"link_token": {
						"type": "string",
						"description": "A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`."
					},
					"expiration": {
						"type": "string",
						"description": "The expiration date for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. By default, a `link_token` created to generate a `public_token` that will be exchanged for a new `access_token` expires after 4 hours, and a `link_token` created for an existing Item (such as when updating an existing `access_token` by launching Link in update mode) expires after 30 minutes. If using [Hosted Link](https://plaid.com/docs/link/hosted-link/), the `link_token` will expire at the same time as the Hosted Link URL, and you can customize the duration using the `hosted_link.url_lifetime_seconds` option in the request. If using Link Delivery (beta), the `link_token` will expire by default after 24 hours if sent via SMS and after 7 days if sent via email."
					},
					"request_id": {
						"type": "string",
						"description": "A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive."
					},
					"hosted_link_url": {
						"type": "string",
						"description": "A URL of a Plaid-hosted Link flow that will use the Link token returned by this request. Only present if the session is enabled for Hosted Link. To enable the session for Hosted Link, send a `hosted_link` object in the request."
					}
				},
				"required": [
					"link_token",
					"expiration",
					"request_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AddWithdrawMethodResponse": {
				"properties": {
					"withdrawer": {
						"$ref": "#/components/schemas/IWithdrawerWithAccounts",
						"description": "Updated Withdrawer with new account added"
					}
				},
				"required": [
					"withdrawer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IAccountAddress": {
				"description": "If address is not available on the user's KYC,the endpoint will return a 412\nerror and the request must be retried with the user's address information.",
				"properties": {
					"address1": {
						"type": "string",
						"minLength": 1
					},
					"city": {
						"type": "string",
						"minLength": 1
					},
					"state": {
						"type": "string",
						"minLength": 2
					},
					"zip": {
						"type": "string"
					}
				},
				"required": [
					"address1",
					"city",
					"state",
					"zip"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ExchangePublicTokenArgs": {
				"properties": {
					"public_token": {
						"type": "string"
					},
					"address": {
						"$ref": "#/components/schemas/IAccountAddress"
					}
				},
				"required": [
					"public_token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AddBankAccountArgs": {
				"properties": {
					"alias": {
						"type": "string"
					},
					"routingNumber": {
						"type": "string"
					},
					"accountNumber": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"checking",
							"savings"
						]
					},
					"address": {
						"$ref": "#/components/schemas/IAccountAddress"
					}
				},
				"required": [
					"alias",
					"routingNumber",
					"accountNumber",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IbanAccountData": {
				"properties": {
					"number": {
						"type": "string",
						"description": "The IBAN number or in the case of the UK the 8-digit account number"
					},
					"sortCode": {
						"type": "string",
						"description": "Only used for the UK, the 6-digit sort code"
					},
					"alias": {
						"type": "string"
					}
				},
				"required": [
					"number"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_CardAccountData.Exclude_keyofCardAccountData.cardToken__": {
				"properties": {
					"expYear": {
						"type": "string",
						"description": "The Cards Expiration Year ex: 2026 => 26",
						"minLength": 2,
						"maxLength": 2,
						"pattern": "^\\d+$"
					},
					"expMonth": {
						"type": "string",
						"description": "The Cards Expiration Month ex: January => 01 December => 12",
						"minLength": 2,
						"maxLength": 2,
						"pattern": "^\\d+$"
					}
				},
				"required": [
					"expYear",
					"expMonth"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"AddDebitCardArgs": {
				"properties": {
					"expYear": {
						"type": "string",
						"description": "The Cards Expiration Year ex: 2026 => 26",
						"minLength": 2,
						"maxLength": 2,
						"pattern": "^\\d+$"
					},
					"expMonth": {
						"type": "string",
						"description": "The Cards Expiration Month ex: January => 01 December => 12",
						"minLength": 2,
						"maxLength": 2,
						"pattern": "^\\d+$"
					},
					"cardToken": {
						"type": "string",
						"description": "This is the card token received from the `CoinflowCardOnlyInput`",
						"minLength": 1
					},
					"address": {
						"$ref": "#/components/schemas/IAccountAddress"
					}
				},
				"required": [
					"expYear",
					"expMonth",
					"cardToken"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GasFeeEstimate": {
				"description": "Represents an estimate of gas fees for a transaction.",
				"properties": {
					"gasFees": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"gasFeesWei": {
						"type": "string"
					}
				},
				"required": [
					"gasFees",
					"gasFeesWei"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WithdrawQuoteFeesAndLimit": {
				"description": "Represents the fees and limits associated with a withdrawal quote.",
				"properties": {
					"fee": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"limit": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"finalSettlement": {
						"$ref": "#/components/schemas/CurrencyCents"
					}
				},
				"required": [
					"fee",
					"limit",
					"finalSettlement"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WithdrawQuote": {
				"description": "Represents a withdrawal quote with detailed information on fees and limits for different withdrawal speeds.",
				"properties": {
					"asap": {
						"$ref": "#/components/schemas/WithdrawQuoteFeesAndLimit"
					},
					"same_day": {
						"$ref": "#/components/schemas/WithdrawQuoteFeesAndLimit"
					},
					"standard": {
						"$ref": "#/components/schemas/WithdrawQuoteFeesAndLimit"
					},
					"card": {
						"$ref": "#/components/schemas/WithdrawQuoteFeesAndLimit"
					},
					"iban": {
						"$ref": "#/components/schemas/WithdrawQuoteFeesAndLimit"
					},
					"pix": {
						"$ref": "#/components/schemas/WithdrawQuoteFeesAndLimit"
					},
					"quote": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"gasFees": {
						"$ref": "#/components/schemas/GasFeeEstimate"
					}
				},
				"required": [
					"asap",
					"same_day",
					"standard",
					"card",
					"iban",
					"pix",
					"quote"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WithdrawToken": {
				"properties": {
					"mint": {
						"type": "string",
						"description": "The mint is the address of the token on the blockchain.\nOn Solana this is the mint account ID\nOn EVM chains this is the token contract address."
					},
					"decimals": {
						"type": "number",
						"format": "double",
						"description": "The number of decimals that the token has.\n\nFor example USDC is always 6 decimals, so 1 USDC is 1000000 units.\nSOL - 9 decimals\nWETH - 18 decimals."
					},
					"balance": {
						"type": "number",
						"format": "double"
					},
					"icon": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"symbol": {
						"type": "string"
					},
					"default": {
						"type": "boolean"
					}
				},
				"required": [
					"mint",
					"decimals",
					"balance",
					"name",
					"symbol",
					"default"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetMessageResponse": {
				"properties": {
					"message": {
						"type": "string",
						"nullable": true,
						"description": "The message that needs to be typed signed by the user's EVM wallet."
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_WithdrawToken.mint-or-decimals_": {
				"properties": {
					"mint": {
						"type": "string",
						"description": "The mint is the address of the token on the blockchain.\nOn Solana this is the mint account ID\nOn EVM chains this is the token contract address."
					},
					"decimals": {
						"type": "number",
						"format": "double",
						"description": "The number of decimals that the token has.\n\nFor example USDC is always 6 decimals, so 1 USDC is 1000000 units.\nSOL - 9 decimals\nWETH - 18 decimals."
					}
				},
				"required": [
					"mint",
					"decimals"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Pick_GetWithdrawTransactionBody.token-or-amount_": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double"
					},
					"token": {
						"$ref": "#/components/schemas/Pick_WithdrawToken.mint-or-decimals_",
						"description": "The token to withdraw. If this is not provided, USDC will be defaulted to."
					}
				},
				"required": [
					"amount"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"GetWithdrawMessageBody": {
				"$ref": "#/components/schemas/Pick_GetWithdrawTransactionBody.token-or-amount_"
			},
			"EvmTransferAuthorizationData": {
				"properties": {
					"data": {
						"type": "string",
						"description": "The result of the signedTypedData call from the user's wallet."
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Required_GetWithdrawTransactionBody_": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double"
					},
					"merchantId": {
						"type": "string"
					},
					"speed": {
						"$ref": "#/components/schemas/WithdrawSpeed"
					},
					"account": {
						"type": "string"
					},
					"token": {
						"$ref": "#/components/schemas/Pick_WithdrawToken.mint-or-decimals_",
						"description": "The token to withdraw. If this is not provided, USDC will be defaulted to."
					},
					"evmTransferAuthorizationData": {
						"$ref": "#/components/schemas/EvmTransferAuthorizationData",
						"description": "This is only necessary for EVM transactions.\n\nTo get this value you can call the `/api/withdraws/message` endpoint,\nwhich will return the message that needs to be signed by the user via as\nan EIP-712 signature. Documentation for this can be found here:\nhttps://eips.ethereum.org/EIPS/eip-712\n\nExamples of how to sign:\n- https://docs.metamask.io/wallet/how-to/sign-data/#use-eth_signtypeddata_v4\n- https://viem.sh/docs/actions/wallet/signTypedData.html\n- https://wagmi.sh/core/actions/signTypedData"
					}
				},
				"required": [
					"amount",
					"merchantId",
					"speed",
					"account",
					"token",
					"evmTransferAuthorizationData"
				],
				"type": "object",
				"description": "Make all properties in T required"
			},
			"SendEvmWithdrawTransactionBody": {
				"$ref": "#/components/schemas/Required_GetWithdrawTransactionBody_"
			},
			"GetWithdrawTransactionResponse": {
				"properties": {
					"transactions": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The transactions to be signed by the user and sent to the blockchain.\n\nSolana - Transactions are base58 encoded. You can reconstruct them by calling `Transaction.from(base58.decode(transaction))`\nEvm - Transactions are JSON stringified. You can reconstruct them by calling `JSON.parse(transaction)`"
					}
				},
				"required": [
					"transactions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DwollaVerificationRequest": {
				"properties": {
					"message": {
						"type": "string"
					},
					"verificationLink": {
						"type": "string"
					}
				},
				"required": [
					"message",
					"verificationLink"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetWithdrawTransactionBody": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double"
					},
					"merchantId": {
						"type": "string"
					},
					"speed": {
						"$ref": "#/components/schemas/WithdrawSpeed"
					},
					"account": {
						"type": "string"
					},
					"token": {
						"$ref": "#/components/schemas/Pick_WithdrawToken.mint-or-decimals_",
						"description": "The token to withdraw. If this is not provided, USDC will be defaulted to."
					},
					"evmTransferAuthorizationData": {
						"$ref": "#/components/schemas/EvmTransferAuthorizationData",
						"description": "This is only necessary for EVM transactions.\n\nTo get this value you can call the `/api/withdraws/message` endpoint,\nwhich will return the message that needs to be signed by the user via as\nan EIP-712 signature. Documentation for this can be found here:\nhttps://eips.ethereum.org/EIPS/eip-712\n\nExamples of how to sign:\n- https://docs.metamask.io/wallet/how-to/sign-data/#use-eth_signtypeddata_v4\n- https://viem.sh/docs/actions/wallet/signTypedData.html\n- https://wagmi.sh/core/actions/signTypedData"
					}
				},
				"required": [
					"amount",
					"merchantId",
					"speed",
					"account"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SendSolanaTransactionResponse": {
				"properties": {
					"signature": {
						"type": "string",
						"description": "To confirm that this transaction was successful call `connection.confirmTransaction(signature)`\nwhich will query the chain to see if the transaction was confirmed."
					}
				},
				"required": [
					"signature"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SendSolanaTransactionRequest": {
				"properties": {
					"transaction": {
						"type": "string",
						"description": "Base 58 encoded Solana Transaction. Supports Transctions and VersionedTransactions.\nTransaction must be signed by all signers."
					}
				},
				"required": [
					"transaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SendTransactionBody": {
				"properties": {
					"merchantId": {
						"type": "string"
					},
					"signedTransaction": {
						"type": "string"
					}
				},
				"required": [
					"merchantId",
					"signedTransaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SubscriptionInterval": {
				"enum": [
					"Monthly",
					"Yearly"
				],
				"type": "string"
			},
			"SettlementType": {
				"enum": [
					"Credits",
					"USDC",
					"Bank"
				],
				"type": "string"
			},
			"SubscriptionPlan": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"interval": {
						"$ref": "#/components/schemas/SubscriptionInterval"
					},
					"duration": {
						"type": "number",
						"format": "double"
					},
					"amount": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"description": {
						"type": "string"
					},
					"transaction": {
						"type": "string"
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType"
					},
					"active": {
						"type": "boolean"
					}
				},
				"required": [
					"name",
					"code",
					"interval",
					"amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SubscriptionStatus": {
				"enum": [
					"Active",
					"Canceled",
					"Expired",
					"Concluded",
					"Failed",
					"Blocked"
				],
				"type": "string"
			},
			"SubscriptionDisplay": {
				"properties": {
					"id": {
						"type": "string"
					},
					"customerId": {
						"type": "string"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"merchantId": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"plan": {
						"type": "string"
					},
					"planCode": {
						"type": "string"
					},
					"nextPaymentAt": {
						"type": "string",
						"format": "date-time"
					},
					"status": {
						"$ref": "#/components/schemas/SubscriptionStatus"
					}
				},
				"required": [
					"id",
					"customerId",
					"blockchain",
					"merchantId",
					"email",
					"plan",
					"planCode",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TotalsResponse": {
				"properties": {
					"subtotal": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"creditCardFees": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"chargebackProtectionFees": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"gasFees": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"total": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"bonus": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"merchantPaidCreditCardFees": {
						"$ref": "#/components/schemas/CurrencyCents",
						"description": "If the merchant company is paying the credit card fees, this will be the amount they are responsible for paying."
					},
					"merchantPaidChargebackProtectionFees": {
						"$ref": "#/components/schemas/CurrencyCents",
						"description": "If the merchant company is paying the credit card fees, this will be the amount they are responsible for paying."
					},
					"merchantPaidGasFees": {
						"$ref": "#/components/schemas/CurrencyCents",
						"description": "If the merchant company is paying the gas fees, this will be the amount they are responsible for paying."
					}
				},
				"required": [
					"subtotal",
					"creditCardFees",
					"chargebackProtectionFees",
					"gasFees",
					"total"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SubscriptionPayment": {
				"properties": {
					"paymentId": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"totals": {
						"$ref": "#/components/schemas/TotalsResponse"
					},
					"paidAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"paymentId",
					"status",
					"totals",
					"paidAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetMessageToSignResponse": {
				"properties": {
					"message": {
						"type": "string"
					},
					"transaction": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetJwtResponse": {
				"properties": {
					"jwt": {
						"type": "string"
					}
				},
				"required": [
					"jwt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetJwtBody": {
				"properties": {
					"signedMessage": {
						"type": "string"
					}
				},
				"required": [
					"signedMessage"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetSessionKeyResponse": {
				"properties": {
					"key": {
						"type": "string"
					}
				},
				"required": [
					"key"
				],
				"type": "object",
				"additionalProperties": false
			},
			"QRCodeData": {
				"properties": {
					"image": {
						"type": "string"
					},
					"hash": {
						"type": "string"
					}
				},
				"required": [
					"image",
					"hash"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CardData": {
				"properties": {
					"cardToken": {
						"type": "string",
						"description": "This is the card token received from the `CoinflowCardNumberInput`",
						"minLength": 1
					},
					"expYear": {
						"type": "string",
						"description": "The Cards Expiration Year ex: 2026 => 26",
						"minLength": 2,
						"maxLength": 2,
						"pattern": "^\\d+$"
					},
					"expMonth": {
						"type": "string",
						"description": "The Cards Expiration Month ex: January => 01 December => 12",
						"minLength": 2,
						"maxLength": 2,
						"pattern": "^\\d+$"
					},
					"email": {
						"type": "string",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"businessName": {
						"type": "string"
					},
					"firstName": {
						"type": "string",
						"minLength": 2
					},
					"lastName": {
						"type": "string",
						"minLength": 2
					},
					"address1": {
						"type": "string",
						"minLength": 1
					},
					"city": {
						"type": "string",
						"minLength": 1
					},
					"zip": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"country": {
						"type": "string",
						"maxLength": 2,
						"minLength": 2
					}
				},
				"required": [
					"cardToken",
					"expYear",
					"expMonth",
					"email",
					"firstName",
					"lastName",
					"address1",
					"city",
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VersionInfo": {
				"properties": {
					"url": {
						"type": "string"
					},
					"transactionId": {
						"type": "string"
					},
					"directoryServer": {
						"type": "string"
					},
					"version": {
						"type": "string"
					}
				},
				"required": [
					"transactionId",
					"directoryServer",
					"version"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Device3DSInfo": {
				"properties": {
					"colorDepth": {
						"type": "number",
						"format": "double"
					},
					"screenHeight": {
						"type": "number",
						"format": "double"
					},
					"screenWidth": {
						"type": "number",
						"format": "double"
					},
					"timeZone": {
						"type": "number",
						"format": "double"
					},
					"versionInfo": {
						"items": {
							"$ref": "#/components/schemas/VersionInfo"
						},
						"type": "array"
					}
				},
				"required": [
					"colorDepth",
					"screenHeight",
					"screenWidth",
					"timeZone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ConcludeChallenge": {
				"properties": {
					"transactionId": {
						"type": "string"
					}
				},
				"required": [
					"transactionId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Authentication3DS": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/Device3DSInfo"
					},
					{
						"$ref": "#/components/schemas/ConcludeChallenge"
					}
				]
			},
			"CustomerInfo": {
				"properties": {
					"name": {
						"type": "string"
					},
					"verificationId": {
						"type": "string"
					},
					"displayName": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"zip": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"ip": {
						"type": "string"
					},
					"lat": {
						"type": "string"
					},
					"lng": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AnyObject": {
				"allOf": [
					{
						"properties": {},
						"additionalProperties": {},
						"type": "object"
					},
					{
						"properties": {
							"example": {
								"type": "string"
							}
						},
						"type": "object"
					}
				]
			},
			"productType": {
				"enum": [
					"inGameProduct",
					"gameOfSkill",
					"dataStorage",
					"computingResources",
					"sportsTicket",
					"eSportsTicket",
					"musicTicket",
					"conferenceTicket",
					"virtualSportsTicket",
					"virtualESportsTicket",
					"virtualMusicTicket",
					"virtualConferenceTicket",
					"alcohol",
					"DLC",
					"subscription",
					"fundACause",
					"realEstate",
					"computingContract",
					"digitalArt",
					"topUp",
					"ownershipContract",
					"inGameCurrency"
				],
				"type": "string"
			},
			"Pick_CartItem.Exclude_keyofCartItem.itemClass__": {
				"properties": {
					"productName": {
						"type": "string",
						"description": "The name of the related product",
						"minLength": 1
					},
					"productType": {
						"$ref": "#/components/schemas/productType",
						"description": "The product type. Possible values include: inGameProduct, gameOfSkill, dataStorage, computingResources, sportsTicket, eSportsTicket, musicTicket, conferenceTicket, virtualSportsTicket, virtualESportsTicket, virtualMusicTicket, virtualConferenceTicket, alcohol, DLC, subscription, fundACause, realEstate, computingContract, digitalArt, topUp"
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"description": "The number of units sold"
					},
					"rawProductData": {
						"$ref": "#/components/schemas/AnyObject",
						"description": "Any additional data that the store can provide on the product, e.g. description, link to image, etc."
					}
				},
				"required": [
					"productName",
					"productType",
					"quantity"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_CartItem.itemClass_": {
				"$ref": "#/components/schemas/Pick_CartItem.Exclude_keyofCartItem.itemClass__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CartItemClassOmitted": {
				"items": {
					"$ref": "#/components/schemas/Omit_CartItem.itemClass_"
				},
				"type": "array"
			},
			"SubscriptionCardSetup": {
				"properties": {
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"chargebackProtectionData": {
						"$ref": "#/components/schemas/CartItemClassOmitted",
						"description": "If your company is using Coinflow Chargeback Protection, you will be required to pass a list of information regarding the\nitems being purchased so that the transaction can be guaranteed. Please see the documentation for more information."
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"planCode": {
						"type": "string",
						"description": "The id of plan to use for the subscription"
					},
					"authentication3DS": {
						"$ref": "#/components/schemas/Authentication3DS",
						"description": "3DS Card Authorization Data\n\nOn initial payment submission - Device3DSInfo needed:\n 3DS device information - required if 3DS is enabled\n\nAfter card challenge complete:\n 3DS challenge transaction id - required after prompted for challenge"
					},
					"threeDsChallengePreference": {
						"$ref": "#/components/schemas/ThreeDsChallengePreference",
						"description": "3DS Challenge Preference\n\nNoPreference - Take whatever the issuer decides (Default)\nFrictionless - Request the frictionless authentication flow.\nChallenge - Request the challenge authentication flow.\n\nCoinflow can’t guarantee your preference because the issuer (customer's bank)\nultimately determines the authentication flow"
					},
					"card": {
						"$ref": "#/components/schemas/CardData",
						"description": "Credit card information"
					}
				},
				"required": [
					"planCode",
					"card"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SubscriptionTokenSetup": {
				"properties": {
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"chargebackProtectionData": {
						"$ref": "#/components/schemas/CartItemClassOmitted",
						"description": "If your company is using Coinflow Chargeback Protection, you will be required to pass a list of information regarding the\nitems being purchased so that the transaction can be guaranteed. Please see the documentation for more information."
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"planCode": {
						"type": "string",
						"description": "The id of plan to use for the subscription"
					},
					"authentication3DS": {
						"$ref": "#/components/schemas/Authentication3DS",
						"description": "3DS Card Authorization Data\n\nOn initial payment submission - Device3DSInfo needed:\n 3DS device information - required if 3DS is enabled\n\nAfter card challenge complete:\n 3DS challenge transaction id - required after prompted for challenge"
					},
					"threeDsChallengePreference": {
						"$ref": "#/components/schemas/ThreeDsChallengePreference",
						"description": "3DS Challenge Preference\n\nNoPreference - Take whatever the issuer decides (Default)\nFrictionless - Request the frictionless authentication flow.\nChallenge - Request the challenge authentication flow.\n\nCoinflow can’t guarantee your preference because the issuer (customer's bank)\nultimately determines the authentication flow"
					},
					"token": {
						"type": "string",
						"description": "Token for the card to be used for the subscription"
					}
				},
				"required": [
					"planCode",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SubscriptionAchSetup": {
				"properties": {
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"chargebackProtectionData": {
						"$ref": "#/components/schemas/CartItemClassOmitted",
						"description": "If your company is using Coinflow Chargeback Protection, you will be required to pass a list of information regarding the\nitems being purchased so that the transaction can be guaranteed. Please see the documentation for more information."
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"planCode": {
						"type": "string",
						"description": "The id of plan to use for the subscription"
					},
					"token": {
						"type": "string",
						"description": "Token for the bank account to be used for the subscription"
					}
				},
				"required": [
					"planCode",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RefundTotals": {
				"properties": {
					"subtotal": {
						"$ref": "#/components/schemas/Cents"
					},
					"processorFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"total": {
						"$ref": "#/components/schemas/Cents"
					}
				},
				"required": [
					"subtotal",
					"processorFees",
					"total"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RefundStatus": {
				"enum": [
					"Pending",
					"Invoiced",
					"Settled"
				],
				"type": "string"
			},
			"RefundSource": {
				"enum": [
					"Credits",
					"Usdc",
					"Settlement",
					"None"
				],
				"type": "string"
			},
			"RefundMethod": {
				"enum": [
					"Card",
					"Ach",
					"Pix",
					"Iban"
				],
				"type": "string"
			},
			"RefundInfo": {
				"properties": {
					"id": {
						"type": "string"
					},
					"merchantId": {
						"type": "string"
					},
					"paymentId": {
						"type": "string"
					},
					"totals": {
						"$ref": "#/components/schemas/RefundTotals"
					},
					"signature": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/RefundStatus"
					},
					"outstanding": {
						"$ref": "#/components/schemas/Cents"
					},
					"source": {
						"$ref": "#/components/schemas/RefundSource"
					},
					"method": {
						"$ref": "#/components/schemas/RefundMethod"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id",
					"merchantId",
					"paymentId",
					"totals",
					"status",
					"outstanding",
					"source",
					"method",
					"createdAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RefundPending": {
				"properties": {
					"merchantId": {
						"type": "string"
					},
					"balance": {
						"$ref": "#/components/schemas/Cents"
					},
					"count": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"merchantId",
					"balance",
					"count"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RedeemResponse": {
				"properties": {
					"transaction": {
						"type": "string",
						"description": "Transaction for the users wallet to sign and send.\n\nSolana - base 58 encoded transaction, recover using: `Transaction.from(base58.decode(transaction))`\nNear - Base 64 encoded stringified transaction, recover using: `JSON.parse(Buffer.from(transaction, 'base64').toString());`\nEvm - Base 64 encoded stringified transaction, recover using: `JSON.parse(Buffer.from(transaction, 'base64').toString());`"
					}
				},
				"required": [
					"transaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiError": {
				"properties": {
					"name": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"stack": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenSubtotal": {
				"properties": {
					"address": {
						"type": "string",
						"description": "The tokens address\n\nSolana - Token Mint Address\nEvm - Token Contract Address"
					},
					"amount": {
						"anyOf": [
							{
								"type": "number",
								"format": "double"
							},
							{
								"type": "string"
							}
						],
						"description": "Number of tokens"
					},
					"decimals": {
						"type": "number",
						"format": "double",
						"description": "Number of decimals for the token"
					}
				},
				"required": [
					"address",
					"amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Subtotal": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/CurrencyCents"
					},
					{
						"$ref": "#/components/schemas/Cents"
					},
					{
						"$ref": "#/components/schemas/TokenSubtotal"
					}
				]
			},
			"SignedMessages": {
				"properties": {
					"permitCredits": {
						"type": "string",
						"description": "(Evm only) This is the signed permit messages that the user must sign granting the Merchant Contract access to their balances."
					}
				},
				"required": [
					"permitCredits"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RedeemBody": {
				"properties": {
					"merchantId": {
						"type": "string"
					},
					"subtotal": {
						"$ref": "#/components/schemas/Subtotal"
					},
					"transaction": {
						"type": "string",
						"description": "Transaction for which the purchase will be redeemed. This should be constructed by the merchant, and should\nbe setup the same way as if the user has USDC/Purchase Token in their wallet. The endpoint will modify this\ntransaction and then send it back to the user to sign and send.\n\nSolana - base 58 encoded transaction, create using: `base58.encode(transaction.serialize({ requireAllSignatures: false, verifySignatures: false }))`\nNear - Base 64 encoded stringified transaction, create using: `Buffer.from(JSON.stringify(transaction)).toString('base64')`\nEvm - Base 64 encoded stringified transaction, create using: `Buffer.from(JSON.stringify(transaction)).toString('base64')`"
					},
					"signedMessages": {
						"$ref": "#/components/schemas/SignedMessages",
						"description": "(Evm only) This is the signed permit messages that the user must sign granting the Coinflow Contract and the Merchants Contract access to\ntheir balances. This is required for the Coinflow Program to be able to transfer the users funds."
					},
					"chargebackProtectionData": {
						"$ref": "#/components/schemas/CartItemClassOmitted",
						"description": "If your company is using Coinflow Chargeback Protection, you will be required to pass information regarding the\nitems being purchased so that we can guarantee the transaction. Please see the documentation for more information."
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana Only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					},
					"nativeSolToConvert": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana Only) Only use this if your subtotal.token is `So11111111111111111111111111111111111111112` and your\ncontract requires native SOL. This will convert the amount of wSOL to native SOL for use in the transaction."
					}
				},
				"required": [
					"merchantId",
					"subtotal",
					"transaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AchDebitStatus": {
				"enum": [
					"initiated",
					"batched",
					"failed",
					"settled",
					"disputed",
					"disputeWon",
					"disputeLost"
				],
				"type": "string"
			},
			"Pick_IAchDebit.Exclude_keyofIAchDebit.id-or-__v-or-merchant__": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/AchDebitStatus",
						"description": "Status of the operation"
					},
					"timestamps": {
						"properties": {
							"disputeLost": {
								"type": "string",
								"format": "date-time"
							},
							"disputeWon": {
								"type": "string",
								"format": "date-time"
							},
							"disputed": {
								"type": "string",
								"format": "date-time"
							},
							"settled": {
								"type": "string",
								"format": "date-time"
							},
							"failed": {
								"type": "string",
								"format": "date-time"
							},
							"batched": {
								"type": "string",
								"format": "date-time"
							},
							"initiated": {
								"type": "string",
								"format": "date-time"
							}
						},
						"type": "object",
						"description": "For each of the above listed status' there will be a timestamp of when that status was reached"
					},
					"amount": {
						"$ref": "#/components/schemas/Cents",
						"description": "Amount that the operation is for"
					},
					"fees": {
						"$ref": "#/components/schemas/Cents",
						"description": "Fees that are charged for the operation"
					}
				},
				"required": [
					"status",
					"timestamps",
					"amount",
					"fees"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_IAchDebit.id-or-__v-or-merchant_": {
				"$ref": "#/components/schemas/Pick_IAchDebit.Exclude_keyofIAchDebit.id-or-__v-or-merchant__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"SanitizedOffChainPayment_IAchDebit_": {
				"$ref": "#/components/schemas/Omit_IAchDebit.id-or-__v-or-merchant_"
			},
			"IndividualAchArgs": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"subtotal": {
						"$ref": "#/components/schemas/Cents",
						"description": "Subtotal for the purchase"
					},
					"routingNumber": {
						"type": "string",
						"description": "Routing number of the bank account to debit\n\nFor testing use: 111000000",
						"minLength": 9,
						"maxLength": 9
					},
					"accountNumber": {
						"type": "string",
						"description": "Account number of the bak to debit\n\nFor testing use: 000123456789",
						"minLength": 8,
						"maxLength": 17
					},
					"accountType": {
						"type": "string",
						"enum": [
							"checking",
							"savings"
						],
						"description": "Type of the account"
					},
					"address": {
						"properties": {
							"postalCode": {
								"type": "string",
								"description": "5 digit zip/postal code",
								"minLength": 5,
								"maxLength": 5
							},
							"state": {
								"type": "string",
								"description": "2 letter State Abbreviation",
								"minLength": 2,
								"maxLength": 2
							},
							"city": {
								"type": "string",
								"description": "City of the address",
								"minLength": 1
							},
							"address2": {
								"type": "string",
								"description": "(Optional) Address Line 2, can be any valid format.\nEx: #2, Unit 2, Apt 2",
								"minLength": 1
							},
							"address1": {
								"type": "string",
								"description": "Address Line 1, includes number, street, and street suffix",
								"minLength": 1
							}
						},
						"required": [
							"postalCode",
							"state",
							"city",
							"address1"
						],
						"type": "object"
					},
					"firstName": {
						"type": "string",
						"description": "First name on the account",
						"minLength": 1
					},
					"lastName": {
						"type": "string",
						"description": "Last name on the account",
						"minLength": 1
					}
				},
				"required": [
					"email",
					"subtotal",
					"routingNumber",
					"accountNumber",
					"accountType",
					"address",
					"firstName",
					"lastName"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TypeOfBusiness": {
				"enum": [
					"Corporation",
					"LLC",
					"Sole Proprietorship",
					"Medical or legal corporation",
					"Association/Estate/Trust",
					"Partnership",
					"Tax Exempt Organization (501c)",
					"Charity",
					"International organization",
					"Government/Municipality",
					"Not for Profit",
					"Trust",
					"Professional Association"
				],
				"type": "string"
			},
			"BusinessAchArgs": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"subtotal": {
						"$ref": "#/components/schemas/Cents",
						"description": "Subtotal for the purchase"
					},
					"routingNumber": {
						"type": "string",
						"description": "Routing number of the bank account to debit\n\nFor testing use: 111000000",
						"minLength": 9,
						"maxLength": 9
					},
					"accountNumber": {
						"type": "string",
						"description": "Account number of the bak to debit\n\nFor testing use: 000123456789",
						"minLength": 8,
						"maxLength": 17
					},
					"accountType": {
						"type": "string",
						"enum": [
							"checking",
							"savings"
						],
						"description": "Type of the account"
					},
					"address": {
						"properties": {
							"postalCode": {
								"type": "string",
								"description": "5 digit zip/postal code",
								"minLength": 5,
								"maxLength": 5
							},
							"state": {
								"type": "string",
								"description": "2 letter State Abbreviation",
								"minLength": 2,
								"maxLength": 2
							},
							"city": {
								"type": "string",
								"description": "City of the address",
								"minLength": 1
							},
							"address2": {
								"type": "string",
								"description": "(Optional) Address Line 2, can be any valid format.\nEx: #2, Unit 2, Apt 2",
								"minLength": 1
							},
							"address1": {
								"type": "string",
								"description": "Address Line 1, includes number, street, and street suffix",
								"minLength": 1
							}
						},
						"required": [
							"postalCode",
							"state",
							"city",
							"address1"
						],
						"type": "object"
					},
					"businessName": {
						"type": "string",
						"description": "Business Entity Name",
						"minLength": 1
					},
					"url": {
						"type": "string",
						"description": "Company URL",
						"minLength": 1
					},
					"typeOfBusiness": {
						"$ref": "#/components/schemas/TypeOfBusiness",
						"description": "The type of business this is"
					},
					"dateOfIncorporation": {
						"type": "string",
						"description": "Date of Incorporation YYYY-MM-DD",
						"pattern": "^\\d\\d\\d\\d-\\d\\d-\\d\\d$"
					},
					"stateOfRegistration": {
						"type": "string",
						"description": "The state that the business registered in",
						"minLength": 2,
						"maxLength": 2
					}
				},
				"required": [
					"email",
					"subtotal",
					"routingNumber",
					"accountNumber",
					"accountType",
					"address",
					"businessName",
					"url",
					"typeOfBusiness",
					"dateOfIncorporation",
					"stateOfRegistration"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AchArgs": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/IndividualAchArgs"
					},
					{
						"$ref": "#/components/schemas/BusinessAchArgs"
					}
				]
			},
			"AchCreditStatus": {
				"enum": [
					"initiated",
					"batched",
					"settled",
					"failed"
				],
				"type": "string"
			},
			"Pick_IAchCredit.Exclude_keyofIAchCredit.id-or-__v-or-merchant__": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/AchCreditStatus",
						"description": "Status of the operation"
					},
					"timestamps": {
						"properties": {
							"settled": {
								"type": "string",
								"format": "date-time"
							},
							"failed": {
								"type": "string",
								"format": "date-time"
							},
							"batched": {
								"type": "string",
								"format": "date-time"
							},
							"initiated": {
								"type": "string",
								"format": "date-time"
							}
						},
						"type": "object",
						"description": "For each of the above listed status' there will be a timestamp of when that status was reached"
					},
					"amount": {
						"$ref": "#/components/schemas/Cents",
						"description": "Amount that the operation is for"
					},
					"fees": {
						"$ref": "#/components/schemas/Cents",
						"description": "Fees that are charged for the operation"
					}
				},
				"required": [
					"status",
					"timestamps",
					"amount",
					"fees"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_IAchCredit.id-or-__v-or-merchant_": {
				"$ref": "#/components/schemas/Pick_IAchCredit.Exclude_keyofIAchCredit.id-or-__v-or-merchant__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"SanitizedOffChainPayment_IAchCredit_": {
				"$ref": "#/components/schemas/Omit_IAchCredit.id-or-__v-or-merchant_"
			},
			"CardPayoutStatus": {
				"enum": [
					"pending",
					"successful",
					"failed"
				],
				"type": "string"
			},
			"Pick_ICardPayout.Exclude_keyofICardPayout.id-or-__v-or-merchant__": {
				"properties": {
					"status": {
						"$ref": "#/components/schemas/CardPayoutStatus",
						"description": "Status of the operation"
					},
					"timestamps": {
						"properties": {
							"successful": {
								"type": "string",
								"format": "date-time"
							},
							"pending": {
								"type": "string",
								"format": "date-time"
							},
							"failed": {
								"type": "string",
								"format": "date-time"
							}
						},
						"type": "object",
						"description": "For each of the above listed status' there will be a timestamp of when that status was reached"
					},
					"amount": {
						"$ref": "#/components/schemas/Cents",
						"description": "Amount that the operation is for"
					},
					"fees": {
						"$ref": "#/components/schemas/Cents",
						"description": "Fees that are charged for the operation"
					}
				},
				"required": [
					"status",
					"timestamps",
					"amount",
					"fees"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_ICardPayout.id-or-__v-or-merchant_": {
				"$ref": "#/components/schemas/Pick_ICardPayout.Exclude_keyofICardPayout.id-or-__v-or-merchant__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"SanitizedOffChainPayment_ICardPayout_": {
				"$ref": "#/components/schemas/Omit_ICardPayout.id-or-__v-or-merchant_"
			},
			"CardPayoutArgs": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"cardNumber": {
						"type": "string",
						"description": "The users debit card number where the funds will be sent",
						"maxLength": 19,
						"minLength": 15
					},
					"expirationDate": {
						"type": "string",
						"description": "Card expiration date\nFormat: MMYY",
						"maxLength": 4,
						"minLength": 4
					},
					"firstName": {
						"type": "string",
						"description": "The first name of the user on the card"
					},
					"lastName": {
						"type": "string",
						"description": "The last name of the user on the card"
					},
					"amount": {
						"$ref": "#/components/schemas/Cents",
						"description": "The amount to send to the card"
					}
				},
				"required": [
					"email",
					"cardNumber",
					"expirationDate",
					"firstName",
					"lastName",
					"amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OutputObject": {
				"properties": {
					"solana": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"near": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"eth": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"polygon": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"base": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"user": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"xion": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"arbitrum": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object"
			},
			"Pick_TokenMetadata.Exclude_keyofTokenMetadata.info__": {
				"properties": {
					"symbol": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"decimals": {
						"type": "number",
						"format": "double"
					},
					"address": {
						"type": "string"
					},
					"logoURI": {
						"type": "string"
					}
				},
				"required": [
					"symbol",
					"name",
					"decimals",
					"address",
					"logoURI"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_TokenMetadata.info_": {
				"$ref": "#/components/schemas/Pick_TokenMetadata.Exclude_keyofTokenMetadata.info__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"Pick_CreateOfframpRequest.withdrawTokenAddr-or-blockchain_": {
				"properties": {
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"withdrawTokenAddr": {
						"type": "string"
					}
				},
				"required": [
					"blockchain",
					"withdrawTokenAddr"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Pick_CreateOfframpRequest.withdrawTokenAddr-or-amount_": {
				"properties": {
					"amount": {
						"type": "number",
						"format": "double"
					},
					"withdrawTokenAddr": {
						"type": "string"
					}
				},
				"required": [
					"amount",
					"withdrawTokenAddr"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Pick_CreateOfframpRequest.withdrawTokenAddr-or-amount-or-blockchain-or-speed_": {
				"properties": {
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"amount": {
						"type": "number",
						"format": "double"
					},
					"speed": {
						"$ref": "#/components/schemas/WithdrawSpeed"
					},
					"withdrawTokenAddr": {
						"type": "string"
					}
				},
				"required": [
					"blockchain",
					"amount",
					"speed",
					"withdrawTokenAddr"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Pick_CreateOfframpRequest.Exclude_keyofCreateOfframpRequest.account-or-speed__": {
				"properties": {
					"reference": {
						"type": "string"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"amount": {
						"type": "number",
						"format": "double"
					},
					"withdrawTokenAddr": {
						"type": "string"
					},
					"sendingAddress": {
						"type": "string"
					}
				},
				"required": [
					"reference",
					"blockchain",
					"amount",
					"withdrawTokenAddr",
					"sendingAddress"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_CreateOfframpRequest.account-or-speed_": {
				"$ref": "#/components/schemas/Pick_CreateOfframpRequest.Exclude_keyofCreateOfframpRequest.account-or-speed__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"OfframpStatus": {
				"enum": [
					"initiated",
					"invalidated",
					"completed"
				],
				"type": "string"
			},
			"IOfframp": {
				"properties": {
					"withdrawer": {
						"type": "string"
					},
					"speed": {
						"$ref": "#/components/schemas/WithdrawSpeed"
					},
					"account": {
						"type": "string"
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"reference": {
						"type": "string"
					},
					"sendingAddress": {
						"type": "string"
					},
					"receivingAddress": {
						"type": "string"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"token": {
						"type": "string"
					},
					"amount": {
						"type": "number",
						"format": "double"
					},
					"status": {
						"$ref": "#/components/schemas/OfframpStatus"
					}
				},
				"required": [
					"withdrawer",
					"speed",
					"account",
					"merchant",
					"reference",
					"sendingAddress",
					"receivingAddress",
					"blockchain",
					"token",
					"amount",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateOfframpResponse": {
				"properties": {
					"receivingAddress": {
						"type": "string"
					}
				},
				"required": [
					"receivingAddress"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateOfframpRequest": {
				"properties": {
					"reference": {
						"type": "string"
					},
					"withdrawTokenAddr": {
						"type": "string"
					},
					"amount": {
						"type": "number",
						"format": "double"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"sendingAddress": {
						"type": "string"
					},
					"speed": {
						"$ref": "#/components/schemas/WithdrawSpeed"
					},
					"account": {
						"type": "string"
					}
				},
				"required": [
					"reference",
					"withdrawTokenAddr",
					"amount",
					"blockchain",
					"sendingAddress",
					"speed",
					"account"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserWithdrawTransactionParams": {
				"properties": {
					"wallet": {
						"type": "string"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"userId": {
						"type": "string",
						"description": "The Merchant generated userId for the user."
					},
					"amount": {
						"$ref": "#/components/schemas/Cents",
						"description": "Amount (In USD cents) to payout the user."
					},
					"speed": {
						"$ref": "#/components/schemas/WithdrawSpeed",
						"description": "Speed at which to send the withdrawal to the user."
					},
					"account": {
						"type": "string",
						"description": "The debit card, bank or Iban pci-compliant token"
					}
				},
				"required": [
					"wallet",
					"blockchain",
					"userId",
					"amount",
					"speed",
					"account"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_UserWithdrawTransactionParams.Exclude_keyofUserWithdrawTransactionParams.wallet-or-blockchain-or-evmTransferAuthorizationData__": {
				"properties": {
					"amount": {
						"$ref": "#/components/schemas/Cents",
						"description": "Amount (In USD cents) to payout the user."
					},
					"speed": {
						"$ref": "#/components/schemas/WithdrawSpeed",
						"description": "Speed at which to send the withdrawal to the user."
					},
					"account": {
						"type": "string",
						"description": "The debit card, bank or Iban pci-compliant token"
					},
					"userId": {
						"type": "string",
						"description": "The Merchant generated userId for the user."
					}
				},
				"required": [
					"amount",
					"speed",
					"account",
					"userId"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_UserWithdrawTransactionParams.wallet-or-blockchain-or-evmTransferAuthorizationData_": {
				"$ref": "#/components/schemas/Pick_UserWithdrawTransactionParams.Exclude_keyofUserWithdrawTransactionParams.wallet-or-blockchain-or-evmTransferAuthorizationData__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"PayoutDelegatedArgs": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Omit_UserWithdrawTransactionParams.wallet-or-blockchain-or-evmTransferAuthorizationData_"
					},
					{
						"properties": {
							"idempotencyKey": {
								"type": "string",
								"description": "Client generates an idempotency key, which is a unique key that the server uses to recognize subsequent retries of\nthe same request. How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string\nwith enough entropy to avoid collisions."
							}
						},
						"type": "object"
					}
				]
			},
			"SanitizedMerchant": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"merchantId": {
						"type": "string"
					},
					"brand": {
						"$ref": "#/components/schemas/MerchantBrandSettings"
					},
					"colors": {
						"$ref": "#/components/schemas/MerchantTheme"
					},
					"url": {
						"type": "string"
					},
					"withdrawFees": {
						"properties": {
							"business": {
								"$ref": "#/components/schemas/Record_WithdrawSpeed.WithdrawFeeConfig_"
							},
							"user": {
								"$ref": "#/components/schemas/Record_WithdrawSpeed.WithdrawFeeConfig_"
							},
							"swapBps": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"business",
							"user",
							"swapBps"
						],
						"type": "object"
					},
					"depositBonus": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/OneToOneMatchDepositBonus"
							},
							{
								"$ref": "#/components/schemas/DepositYGetXDepositBonus"
							}
						]
					},
					"kycType": {
						"$ref": "#/components/schemas/KycType"
					},
					"liquidityNotifications": {
						"items": {
							"$ref": "#/components/schemas/LiquidityNotification"
						},
						"type": "array"
					},
					"settlementAddresses": {
						"allOf": [
							{
								"properties": {
									"arbitrum": {
										"type": "string"
									},
									"xion": {
										"type": "string"
									},
									"user": {
										"type": "string"
									},
									"base": {
										"type": "string"
									},
									"polygon": {
										"type": "string"
									},
									"eth": {
										"type": "string"
									},
									"near": {
										"type": "string"
									},
									"solana": {
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"properties": {
									"mpcWalletProvider": {
										"type": "string",
										"enum": [
											"metakeep"
										],
										"nullable": false
									},
									"recipientAddresses": {
										"items": {
											"properties": {
												"createdAt": {
													"type": "string",
													"format": "date-time"
												},
												"recipient": {
													"type": "string"
												}
											},
											"required": [
												"createdAt",
												"recipient"
											],
											"type": "object"
										},
										"type": "array"
									},
									"verification": {
										"$ref": "#/components/schemas/Verification"
									}
								},
								"type": "object"
							}
						]
					},
					"settlementBankToken": {
						"type": "string"
					},
					"settlementAptPayId": {
						"type": "string"
					},
					"users": {
						"items": {
							"$ref": "#/components/schemas/IMerchantUser_string_"
						},
						"type": "array"
					},
					"ubos": {
						"items": {
							"$ref": "#/components/schemas/UboEntry"
						},
						"type": "array"
					},
					"goLiveChecklist": {
						"$ref": "#/components/schemas/MerchantGoLiveChecklist"
					},
					"webhookSettings": {
						"$ref": "#/components/schemas/WebhookSettings"
					},
					"cardSettings": {
						"$ref": "#/components/schemas/CardSettings"
					},
					"achSettings": {
						"$ref": "#/components/schemas/ACHSettings"
					},
					"pixSettings": {
						"$ref": "#/components/schemas/PixSettings"
					},
					"ibanSettings": {
						"$ref": "#/components/schemas/IbanSettings"
					},
					"nSureSettings": {
						"$ref": "#/components/schemas/NSureSettings"
					},
					"blockConfig": {
						"properties": {
							"failedPaymentAttemptLimit": {
								"type": "number",
								"format": "double"
							}
						},
						"type": "object"
					},
					"hideBranding": {
						"type": "boolean"
					},
					"withdrawFeePayment": {
						"properties": {
							"paysGasFees": {
								"properties": {
									"xion": {
										"type": "boolean"
									},
									"user": {
										"type": "boolean"
									},
									"flow": {
										"type": "boolean"
									},
									"arbitrum": {
										"type": "boolean"
									},
									"base": {
										"type": "boolean"
									},
									"eth": {
										"type": "boolean"
									},
									"polygon": {
										"type": "boolean"
									},
									"near": {
										"type": "boolean"
									},
									"solana": {
										"type": "boolean"
									}
								},
								"type": "object"
							},
							"paysWithdrawFees": {
								"type": "boolean"
							}
						},
						"type": "object"
					},
					"pushToCardEnabled": {
						"type": "boolean"
					},
					"bankPayoutProvider": {
						"$ref": "#/components/schemas/PayoutProviderOption"
					},
					"ibanPayoutProvider": {
						"$ref": "#/components/schemas/IbanPayoutProvider"
					},
					"rtpPayoutProvider": {
						"$ref": "#/components/schemas/RtpPayoutProvider"
					},
					"pixPayoutProvider": {
						"$ref": "#/components/schemas/PixPayoutProvider"
					},
					"maxTransactionAmount": {
						"$ref": "#/components/schemas/Cents"
					},
					"refundBalanceLimit": {
						"$ref": "#/components/schemas/Cents"
					},
					"creditSeed": {
						"type": "string"
					},
					"tokenSettings": {
						"$ref": "#/components/schemas/Record_Currency.StableCoin_"
					},
					"withdrawSettlementLocation": {
						"$ref": "#/components/schemas/SettlementLocations"
					},
					"enforceJwt": {
						"type": "boolean"
					},
					"enforceCheckoutJwt": {
						"type": "boolean"
					},
					"metakeepAppId": {
						"type": "string"
					},
					"submerchantsSeeCustomers": {
						"type": "boolean"
					},
					"externalVerificationLinks": {
						"type": "boolean"
					},
					"experimentalSwap": {
						"type": "boolean"
					},
					"whitelistedAncestorUrls": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"feePayerPublicKey": {
						"type": "string"
					},
					"solanaFeePayerPublicKey": {
						"type": "string"
					},
					"solanaUsdcPayerPublicKey": {
						"type": "string"
					},
					"nearFeePayerAccountId": {
						"type": "string"
					},
					"evmFeePayerAddress": {
						"type": "string"
					},
					"evmUsdcPayerAddress": {
						"type": "string"
					},
					"_sanitized": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"parent": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/SanitizedMerchant"
							}
						]
					}
				},
				"required": [
					"_id",
					"verification",
					"merchantId",
					"withdrawFees",
					"kycType",
					"liquidityNotifications",
					"users",
					"ubos",
					"goLiveChecklist",
					"cardSettings",
					"achSettings",
					"pixSettings",
					"ibanSettings",
					"nSureSettings",
					"hideBranding",
					"pushToCardEnabled",
					"refundBalanceLimit",
					"creditSeed",
					"tokenSettings",
					"withdrawSettlementLocation",
					"enforceJwt",
					"submerchantsSeeCustomers",
					"feePayerPublicKey",
					"solanaFeePayerPublicKey",
					"solanaUsdcPayerPublicKey",
					"nearFeePayerAccountId",
					"evmFeePayerAddress",
					"evmUsdcPayerAddress",
					"_sanitized"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IMerchantUser_string_": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"scope": {
						"$ref": "#/components/schemas/MerchantScope"
					},
					"secret": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"scope"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_IMerchant.Exclude_keyofIMerchant.SanitizedKeys__": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"merchantId": {
						"type": "string"
					},
					"brand": {
						"$ref": "#/components/schemas/MerchantBrandSettings"
					},
					"colors": {
						"$ref": "#/components/schemas/MerchantTheme"
					},
					"url": {
						"type": "string"
					},
					"withdrawFees": {
						"properties": {
							"business": {
								"$ref": "#/components/schemas/Record_WithdrawSpeed.WithdrawFeeConfig_"
							},
							"user": {
								"$ref": "#/components/schemas/Record_WithdrawSpeed.WithdrawFeeConfig_"
							},
							"swapBps": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"business",
							"user",
							"swapBps"
						],
						"type": "object"
					},
					"depositBonus": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/OneToOneMatchDepositBonus"
							},
							{
								"$ref": "#/components/schemas/DepositYGetXDepositBonus"
							}
						]
					},
					"kycType": {
						"$ref": "#/components/schemas/KycType"
					},
					"liquidityNotifications": {
						"items": {
							"$ref": "#/components/schemas/LiquidityNotification"
						},
						"type": "array"
					},
					"settlementAddresses": {
						"allOf": [
							{
								"properties": {
									"arbitrum": {
										"type": "string"
									},
									"xion": {
										"type": "string"
									},
									"user": {
										"type": "string"
									},
									"base": {
										"type": "string"
									},
									"polygon": {
										"type": "string"
									},
									"eth": {
										"type": "string"
									},
									"near": {
										"type": "string"
									},
									"solana": {
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"properties": {
									"mpcWalletProvider": {
										"type": "string",
										"enum": [
											"metakeep"
										],
										"nullable": false
									},
									"recipientAddresses": {
										"items": {
											"properties": {
												"createdAt": {
													"type": "string",
													"format": "date-time"
												},
												"recipient": {
													"type": "string"
												}
											},
											"required": [
												"createdAt",
												"recipient"
											],
											"type": "object"
										},
										"type": "array"
									},
									"verification": {
										"$ref": "#/components/schemas/Verification"
									}
								},
								"type": "object"
							}
						]
					},
					"settlementBankToken": {
						"type": "string"
					},
					"settlementAptPayId": {
						"type": "string"
					},
					"users": {
						"items": {
							"$ref": "#/components/schemas/IMerchantUser_string_"
						},
						"type": "array"
					},
					"ubos": {
						"items": {
							"$ref": "#/components/schemas/UboEntry"
						},
						"type": "array"
					},
					"goLiveChecklist": {
						"$ref": "#/components/schemas/MerchantGoLiveChecklist"
					},
					"webhookSettings": {
						"$ref": "#/components/schemas/WebhookSettings"
					},
					"cardSettings": {
						"$ref": "#/components/schemas/CardSettings"
					},
					"achSettings": {
						"$ref": "#/components/schemas/ACHSettings"
					},
					"pixSettings": {
						"$ref": "#/components/schemas/PixSettings"
					},
					"ibanSettings": {
						"$ref": "#/components/schemas/IbanSettings"
					},
					"nSureSettings": {
						"$ref": "#/components/schemas/NSureSettings"
					},
					"blockConfig": {
						"properties": {
							"failedPaymentAttemptLimit": {
								"type": "number",
								"format": "double"
							}
						},
						"type": "object"
					},
					"hideBranding": {
						"type": "boolean"
					},
					"withdrawFeePayment": {
						"properties": {
							"paysGasFees": {
								"properties": {
									"xion": {
										"type": "boolean"
									},
									"user": {
										"type": "boolean"
									},
									"flow": {
										"type": "boolean"
									},
									"arbitrum": {
										"type": "boolean"
									},
									"base": {
										"type": "boolean"
									},
									"eth": {
										"type": "boolean"
									},
									"polygon": {
										"type": "boolean"
									},
									"near": {
										"type": "boolean"
									},
									"solana": {
										"type": "boolean"
									}
								},
								"type": "object"
							},
							"paysWithdrawFees": {
								"type": "boolean"
							}
						},
						"type": "object"
					},
					"pushToCardEnabled": {
						"type": "boolean"
					},
					"bankPayoutProvider": {
						"$ref": "#/components/schemas/PayoutProviderOption"
					},
					"ibanPayoutProvider": {
						"$ref": "#/components/schemas/IbanPayoutProvider"
					},
					"rtpPayoutProvider": {
						"$ref": "#/components/schemas/RtpPayoutProvider"
					},
					"pixPayoutProvider": {
						"$ref": "#/components/schemas/PixPayoutProvider"
					},
					"maxTransactionAmount": {
						"$ref": "#/components/schemas/Cents"
					},
					"refundBalanceLimit": {
						"$ref": "#/components/schemas/Cents"
					},
					"creditSeed": {
						"type": "string"
					},
					"tokenSettings": {
						"$ref": "#/components/schemas/Record_Currency.StableCoin_"
					},
					"withdrawSettlementLocation": {
						"$ref": "#/components/schemas/SettlementLocations"
					},
					"enforceJwt": {
						"type": "boolean"
					},
					"enforceCheckoutJwt": {
						"type": "boolean"
					},
					"metakeepAppId": {
						"type": "string"
					},
					"submerchantsSeeCustomers": {
						"type": "boolean"
					},
					"externalVerificationLinks": {
						"type": "boolean"
					},
					"experimentalSwap": {
						"type": "boolean"
					},
					"whitelistedAncestorUrls": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"_id",
					"verification",
					"merchantId",
					"withdrawFees",
					"kycType",
					"liquidityNotifications",
					"users",
					"ubos",
					"goLiveChecklist",
					"cardSettings",
					"achSettings",
					"pixSettings",
					"ibanSettings",
					"nSureSettings",
					"hideBranding",
					"pushToCardEnabled",
					"refundBalanceLimit",
					"creditSeed",
					"tokenSettings",
					"withdrawSettlementLocation",
					"enforceJwt",
					"submerchantsSeeCustomers"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"EditableMerchant": {
				"properties": {
					"brand": {
						"$ref": "#/components/schemas/MerchantBrandSettings"
					},
					"enforceJwt": {
						"type": "boolean"
					},
					"achSettings": {
						"$ref": "#/components/schemas/ACHSettings"
					},
					"cardSettings": {
						"$ref": "#/components/schemas/CardSettings"
					},
					"webhookSettings": {
						"$ref": "#/components/schemas/WebhookSettings"
					},
					"liquidityNotifications": {
						"items": {
							"$ref": "#/components/schemas/LiquidityNotification"
						},
						"type": "array"
					},
					"depositBonus": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/OneToOneMatchDepositBonus"
							},
							{
								"$ref": "#/components/schemas/DepositYGetXDepositBonus"
							}
						]
					},
					"colors": {
						"$ref": "#/components/schemas/MerchantTheme"
					}
				},
				"type": "object"
			},
			"Pick_SubMerchantUsKybBody.Exclude_keyofSubMerchantUsKybBody.country-or-business__": {
				"properties": {
					"email": {
						"type": "string",
						"description": "The email for this merchants admin account"
					},
					"wallet": {
						"$ref": "#/components/schemas/IWallet",
						"description": "The submerchant's business wallet. Address & blockchain."
					},
					"merchantId": {
						"type": "string",
						"description": "User defined merchant ID, is used to make all other API calls"
					},
					"ubos": {
						"items": {
							"$ref": "#/components/schemas/UboInfo"
						},
						"type": "array",
						"description": "Ultimate Beneficiary owners, these are Officers, Directors, Investors and Beneficiaries who own more than 20% of the company."
					},
					"info": {
						"$ref": "#/components/schemas/KybInformation",
						"description": "Business Information will be checked with a KYB (Know Your Business) provider before access is granted"
					},
					"settings": {
						"$ref": "#/components/schemas/EditableMerchant",
						"description": "Settings to override copying the parent merchant settings"
					},
					"baseUrl": {
						"type": "string",
						"description": "The baseUrl for this merchants portal brand. Example https://rapid.approvely.com"
					}
				},
				"required": [
					"email",
					"merchantId",
					"ubos",
					"info"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_SubMerchantUsKybBody.country-or-business_": {
				"$ref": "#/components/schemas/Pick_SubMerchantUsKybBody.Exclude_keyofSubMerchantUsKybBody.country-or-business__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"VerificationRequiredResponse": {
				"properties": {
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"verificationLink": {
						"type": "string",
						"description": "Link which can be hosted in an iframe or redirect the user to complete verification."
					},
					"redirectLink": {
						"type": "string",
						"description": "Link where the user will be redirected to upon successful verification."
					},
					"additionalVerificationLinks": {
						"items": {
							"$ref": "#/components/schemas/AdditionalVerification"
						},
						"type": "array",
						"description": "Additional links which can be hosted in an iframe or redirect the user to complete verification."
					},
					"rejectionReasons": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "List of reasons as to why the verification was rejected."
					}
				},
				"required": [
					"verification"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SubMerchantUsKybBody": {
				"properties": {
					"merchantId": {
						"type": "string",
						"description": "User defined merchant ID, is used to make all other API calls"
					},
					"email": {
						"type": "string",
						"description": "The email for this merchants admin account"
					},
					"baseUrl": {
						"type": "string",
						"description": "The baseUrl for this merchants portal brand. Example https://rapid.approvely.com"
					},
					"wallet": {
						"$ref": "#/components/schemas/IWallet",
						"description": "The submerchant's business wallet. Address & blockchain."
					},
					"settings": {
						"$ref": "#/components/schemas/EditableMerchant",
						"description": "Settings to override copying the parent merchant settings"
					},
					"info": {
						"$ref": "#/components/schemas/KybInformation",
						"description": "Business Information will be checked with a KYB (Know Your Business) provider before access is granted"
					},
					"ubos": {
						"items": {
							"$ref": "#/components/schemas/UboInfo"
						},
						"type": "array",
						"description": "Ultimate Beneficiary owners, these are Officers, Directors, Investors and Beneficiaries who own more than 20% of the company."
					},
					"business": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					}
				},
				"required": [
					"merchantId",
					"email",
					"info",
					"ubos",
					"business"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SubMerchantDocVKybBody": {
				"properties": {
					"merchantId": {
						"type": "string",
						"description": "User defined merchant ID, is used to make all other API calls"
					},
					"email": {
						"type": "string",
						"description": "The email for this merchants admin account"
					},
					"baseUrl": {
						"type": "string",
						"description": "The baseUrl for this merchants portal brand. Example https://rapid.approvely.com"
					},
					"wallet": {
						"$ref": "#/components/schemas/IWallet",
						"description": "The submerchant's business wallet. Address & blockchain."
					},
					"settings": {
						"$ref": "#/components/schemas/EditableMerchant",
						"description": "Settings to override copying the parent merchant settings"
					},
					"country": {
						"type": "string",
						"description": "The country for this merchants admin account (ISO 3166-2)"
					},
					"business": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					}
				},
				"required": [
					"merchantId",
					"email",
					"country",
					"business"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SubMerchantUsKycBody": {
				"properties": {
					"merchantId": {
						"type": "string",
						"description": "User defined merchant ID, is used to make all other API calls"
					},
					"email": {
						"type": "string",
						"description": "The email for this merchants admin account"
					},
					"baseUrl": {
						"type": "string",
						"description": "The baseUrl for this merchants portal brand. Example https://rapid.approvely.com"
					},
					"wallet": {
						"$ref": "#/components/schemas/IWallet",
						"description": "The submerchant's business wallet. Address & blockchain."
					},
					"settings": {
						"$ref": "#/components/schemas/EditableMerchant",
						"description": "Settings to override copying the parent merchant settings"
					},
					"individual": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"info": {
						"$ref": "#/components/schemas/KycUserInformation"
					}
				},
				"required": [
					"merchantId",
					"email",
					"individual",
					"info"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SubMerchantDocVKycBody": {
				"properties": {
					"merchantId": {
						"type": "string",
						"description": "User defined merchant ID, is used to make all other API calls"
					},
					"email": {
						"type": "string",
						"description": "The email for this merchants admin account"
					},
					"baseUrl": {
						"type": "string",
						"description": "The baseUrl for this merchants portal brand. Example https://rapid.approvely.com"
					},
					"wallet": {
						"$ref": "#/components/schemas/IWallet",
						"description": "The submerchant's business wallet. Address & blockchain."
					},
					"settings": {
						"$ref": "#/components/schemas/EditableMerchant",
						"description": "Settings to override copying the parent merchant settings"
					},
					"country": {
						"type": "string",
						"description": "The country for this merchants admin account (ISO 3166-2)"
					},
					"individual": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					}
				},
				"required": [
					"merchantId",
					"email",
					"country",
					"individual"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SubMerchantRegisterBody": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/SubMerchantUsKybBody"
					},
					{
						"$ref": "#/components/schemas/SubMerchantDocVKybBody"
					},
					{
						"$ref": "#/components/schemas/SubMerchantUsKycBody"
					},
					{
						"$ref": "#/components/schemas/SubMerchantDocVKycBody"
					}
				]
			},
			"CustomerBlockedStatus": {
				"enum": [
					"NotBlocked",
					"Blocked",
					"OverrideBlocked"
				],
				"type": "string"
			},
			"FailedAttemptSetting": {
				"enum": [
					"Standard",
					"Exempt"
				],
				"type": "string"
			},
			"CustomerVerificationSetting": {
				"enum": [
					"Enforced",
					"Exempt"
				],
				"type": "string"
			},
			"ICustomer_string_": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"customerId": {
						"type": "string"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"email": {
						"type": "string"
					},
					"isBlocked": {
						"$ref": "#/components/schemas/CustomerBlockedStatus"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo"
					},
					"chargebackProtectionEnabled": {
						"type": "boolean"
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"failedAttemptSetting": {
						"$ref": "#/components/schemas/FailedAttemptSetting"
					},
					"verificationSetting": {
						"$ref": "#/components/schemas/CustomerVerificationSetting"
					},
					"exempt3DS": {
						"type": "boolean"
					}
				},
				"required": [
					"_id",
					"customerId",
					"blockchain",
					"email",
					"isBlocked",
					"createdAt",
					"chargebackProtectionEnabled",
					"failedAttemptSetting",
					"verificationSetting"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChargebackProtectionDecision": {
				"enum": [
					"approved",
					"rejected",
					"Not Reviewed",
					"Not Enabled",
					"Overridden",
					"Approved 3DS",
					"Pending Review"
				],
				"type": "string"
			},
			"WebhookInfo": {
				"$ref": "#/components/schemas/AnyObject"
			},
			"CardPaymentStatus": {
				"enum": [
					"AUTHORIZED",
					"DEPOSITED",
					"SETTLED",
					"REFUNDED",
					"FAILED",
					"CHARGEBACK",
					"CHARGEBACK_LOST",
					"CHARGEBACK_WON",
					"VOIDED"
				],
				"type": "string"
			},
			"MobileWallet": {
				"enum": [
					"applePay",
					"googlePay"
				],
				"type": "string"
			},
			"Verification3DS": {
				"enum": [
					"Required",
					"Exempt",
					"NotApplicable"
				],
				"type": "string"
			},
			"EnhancedTxInfo": {
				"properties": {
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"streetAddress": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"zip": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"bin": {
						"type": "string"
					},
					"ip": {
						"type": "string"
					},
					"userAgent": {
						"type": "string"
					},
					"expMonth": {
						"type": "string"
					},
					"expYear": {
						"type": "string"
					},
					"eci": {
						"type": "string"
					},
					"binLocation": {
						"properties": {
							"bankName": {
								"type": "string"
							},
							"country": {
								"type": "string"
							},
							"cardSegment": {
								"type": "string"
							},
							"cardName": {
								"type": "string"
							},
							"cardType": {
								"type": "string",
								"enum": [
									"debit",
									"credit"
								]
							}
						},
						"required": [
							"bankName",
							"country",
							"cardSegment",
							"cardName",
							"cardType"
						],
						"type": "object"
					},
					"ipLocation": {
						"properties": {
							"zip": {
								"type": "string"
							},
							"city": {
								"type": "string"
							},
							"isp": {
								"type": "string"
							},
							"region": {
								"type": "string"
							},
							"country": {
								"type": "string"
							},
							"lon": {
								"type": "string"
							},
							"lat": {
								"type": "string"
							}
						},
						"required": [
							"zip",
							"city",
							"isp",
							"region",
							"country",
							"lon",
							"lat"
						],
						"type": "object"
					}
				},
				"required": [
					"firstName",
					"lastName",
					"streetAddress",
					"city",
					"country",
					"email",
					"ip",
					"userAgent"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AchPaymentStatus": {
				"enum": [
					"PENDING",
					"BATCHED",
					"DEPOSITED",
					"SETTLED",
					"RETURNED",
					"FAILED",
					"CHARGEBACK",
					"REFUND_REVIEW",
					"REFUNDED"
				],
				"type": "string"
			},
			"PixPaymentStatus": {
				"enum": [
					"INITIATED",
					"DEPOSITED",
					"SETTLED",
					"FAILED",
					"EXPIRED",
					"REFUNDED"
				],
				"type": "string"
			},
			"IbanPaymentStatus": {
				"enum": [
					"INITIATED",
					"DEPOSITED",
					"SETTLED",
					"FAILED",
					"EXPIRED",
					"REFUNDED"
				],
				"type": "string"
			},
			"ISubscriptionPlan_string_": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"name": {
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"interval": {
						"$ref": "#/components/schemas/SubscriptionInterval"
					},
					"duration": {
						"type": "number",
						"format": "double"
					},
					"amount": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"description": {
						"type": "string"
					},
					"transaction": {
						"type": "string"
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType"
					},
					"active": {
						"type": "boolean"
					}
				},
				"required": [
					"_id",
					"merchant",
					"name",
					"code",
					"interval",
					"amount",
					"active"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_MarketplaceInfo.fixedFee-or-feePercentage_": {
				"properties": {
					"fixedFee": {
						"$ref": "#/components/schemas/Cents"
					},
					"feePercentage": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"ISubscription_string_": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/ICustomer_string_"
							}
						]
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"plan": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/ISubscriptionPlan_string_"
							}
						]
					},
					"cardProcessor": {
						"$ref": "#/components/schemas/PaymentProcessor"
					},
					"achProcessor": {
						"$ref": "#/components/schemas/AchProcessor"
					},
					"reference": {
						"type": "string"
					},
					"nextPaymentAt": {
						"type": "string",
						"format": "date-time"
					},
					"status": {
						"$ref": "#/components/schemas/SubscriptionStatus"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/WebhookInfo"
					},
					"marketplaceInfo": {
						"$ref": "#/components/schemas/Pick_MarketplaceInfo.fixedFee-or-feePercentage_"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"_id",
					"customer",
					"merchant",
					"plan",
					"reference",
					"status",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MarketplaceInfo": {
				"properties": {
					"marketplaceFee": {
						"$ref": "#/components/schemas/Cents"
					},
					"marketplaceSettlement": {
						"$ref": "#/components/schemas/Cents"
					},
					"sellerSettlement": {
						"$ref": "#/components/schemas/Cents"
					},
					"feePercentage": {
						"type": "number",
						"format": "double"
					},
					"fixedFee": {
						"$ref": "#/components/schemas/Cents"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"IPayment": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"paymentId": {
						"type": "string"
					},
					"totals": {
						"$ref": "#/components/schemas/TotalsResponse"
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/ICustomer_string_"
							}
						]
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"chargebackProtectionDecision": {
						"$ref": "#/components/schemas/ChargebackProtectionDecision"
					},
					"error": {
						"type": "string"
					},
					"signature": {
						"type": "string"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/WebhookInfo"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"usdcTransfer": {
						"type": "boolean"
					},
					"cardInfo": {
						"properties": {
							"enhancedTxInfo": {
								"$ref": "#/components/schemas/EnhancedTxInfo"
							},
							"transaction": {
								"type": "string"
							},
							"secureTransactionId": {
								"type": "string"
							},
							"processed3DS": {
								"$ref": "#/components/schemas/Verification3DS"
							},
							"cardType": {
								"$ref": "#/components/schemas/CardType"
							},
							"last4": {
								"type": "string"
							},
							"token": {
								"type": "string"
							},
							"mobileWallet": {
								"$ref": "#/components/schemas/MobileWallet"
							},
							"processor": {
								"$ref": "#/components/schemas/PaymentProcessor"
							},
							"authCode": {
								"type": "string"
							},
							"status": {
								"$ref": "#/components/schemas/CardPaymentStatus"
							}
						},
						"required": [
							"processor",
							"authCode",
							"status"
						],
						"type": "object"
					},
					"bankTransferInfo": {
						"properties": {
							"token": {
								"type": "string"
							},
							"batchedAt": {
								"type": "string",
								"format": "date-time"
							},
							"refundTransferId": {
								"type": "string"
							},
							"refundReview": {
								"type": "boolean"
							},
							"transaction": {
								"type": "string"
							},
							"processor": {
								"$ref": "#/components/schemas/AchProcessor"
							},
							"status": {
								"$ref": "#/components/schemas/AchPaymentStatus"
							}
						},
						"required": [
							"refundReview",
							"processor",
							"status"
						],
						"type": "object"
					},
					"pixInfo": {
						"properties": {
							"processed": {
								"type": "string",
								"format": "date-time"
							},
							"transaction": {
								"type": "string"
							},
							"expiration": {
								"type": "string",
								"format": "date-time"
							},
							"rate": {
								"type": "number",
								"format": "double"
							},
							"amount": {
								"$ref": "#/components/schemas/CurrencyCents"
							},
							"processor": {
								"$ref": "#/components/schemas/PixProcessor"
							},
							"status": {
								"$ref": "#/components/schemas/PixPaymentStatus"
							}
						},
						"required": [
							"expiration",
							"rate",
							"amount",
							"processor",
							"status"
						],
						"type": "object"
					},
					"ibanInfo": {
						"properties": {
							"processed": {
								"type": "string",
								"format": "date-time"
							},
							"transaction": {
								"type": "string"
							},
							"tokenSubtotal": {
								"$ref": "#/components/schemas/TokenSubtotal"
							},
							"expiration": {
								"type": "string",
								"format": "date-time"
							},
							"token": {
								"type": "string"
							},
							"rate": {
								"type": "number",
								"format": "double"
							},
							"amount": {
								"$ref": "#/components/schemas/CurrencyCents"
							},
							"processor": {
								"$ref": "#/components/schemas/IbanProcessor"
							},
							"status": {
								"$ref": "#/components/schemas/IbanPaymentStatus"
							}
						},
						"required": [
							"expiration",
							"token",
							"rate",
							"amount",
							"processor",
							"status"
						],
						"type": "object"
					},
					"subscription": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/ISubscription_string_"
							}
						]
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"redemptionCheck": {
						"type": "boolean"
					},
					"marketplaceInfo": {
						"$ref": "#/components/schemas/MarketplaceInfo"
					}
				},
				"required": [
					"_id",
					"paymentId",
					"totals",
					"customer",
					"merchant",
					"chargebackProtectionDecision",
					"createdAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UAParser.IBrowser": {
				"properties": {
					"name": {
						"type": "string",
						"description": "Possible values :\nAmaya, Android Browser, Arora, Avant, Baidu, Blazer, Bolt, Camino, Chimera, Chrome,\nChromium, Comodo Dragon, Conkeror, Dillo, Dolphin, Doris, Edge, Epiphany, Fennec,\nFirebird, Firefox, Flock, GoBrowser, iCab, ICE Browser, IceApe, IceCat, IceDragon,\nIceweasel, IE [Mobile], Iron, Jasmine, K-Meleon, Konqueror, Kindle, Links,\nLunascape, Lynx, Maemo, Maxthon, Midori, Minimo, MIUI Browser, [Mobile] Safari,\nMosaic, Mozilla, Netfront, Netscape, NetSurf, Nokia, OmniWeb, Opera [Mini/Mobi/Tablet],\nPhoenix, Polaris, QQBrowser, RockMelt, Silk, Skyfire, SeaMonkey, SlimBrowser, Swiftfox,\nTizen, UCBrowser, Vivaldi, w3m, Yandex"
					},
					"version": {
						"type": "string",
						"description": "Determined dynamically"
					},
					"major": {
						"type": "string",
						"description": "Determined dynamically",
						"deprecated": true
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UAParser.IDevice": {
				"properties": {
					"model": {
						"type": "string",
						"description": "Determined dynamically"
					},
					"type": {
						"type": "string",
						"description": "Possible type:\nconsole, mobile, tablet, smarttv, wearable, embedded"
					},
					"vendor": {
						"type": "string",
						"description": "Possible vendor:\nAcer, Alcatel, Amazon, Apple, Archos, Asus, BenQ, BlackBerry, Dell, GeeksPhone,\nGoogle, HP, HTC, Huawei, Jolla, Lenovo, LG, Meizu, Microsoft, Motorola, Nexian,\nNintendo, Nokia, Nvidia, Ouya, Palm, Panasonic, Polytron, RIM, Samsung, Sharp,\nSiemens, Sony-Ericsson, Sprint, Xbox, ZTE"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UAParser.IEngine": {
				"properties": {
					"name": {
						"type": "string",
						"description": "Possible name:\nAmaya, EdgeHTML, Gecko, iCab, KHTML, Links, Lynx, NetFront, NetSurf, Presto,\nTasman, Trident, w3m, WebKit"
					},
					"version": {
						"type": "string",
						"description": "Determined dynamically"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UAParser.IOS": {
				"properties": {
					"name": {
						"type": "string",
						"description": "Possible 'os.name'\nAIX, Amiga OS, Android, Arch, Bada, BeOS, BlackBerry, CentOS, Chromium OS, Contiki,\nFedora, Firefox OS, FreeBSD, Debian, DragonFly, Gentoo, GNU, Haiku, Hurd, iOS,\nJoli, Linpus, Linux, Mac OS, Mageia, Mandriva, MeeGo, Minix, Mint, Morph OS, NetBSD,\nNintendo, OpenBSD, OpenVMS, OS/2, Palm, PCLinuxOS, Plan9, Playstation, QNX, RedHat,\nRIM Tablet OS, RISC OS, Sailfish, Series40, Slackware, Solaris, SUSE, Symbian, Tizen,\nUbuntu, UNIX, VectorLinux, WebOS, Windows [Phone/Mobile], Zenwalk"
					},
					"version": {
						"type": "string",
						"description": "Determined dynamically"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UAParser.ICPU": {
				"properties": {
					"architecture": {
						"type": "string",
						"description": "Possible architecture:\n 68k, amd64, arm, arm64, avr, ia32, ia64, irix, irix64, mips, mips64, pa-risc,\n ppc, sparc, sparc64"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UAParser.IResult": {
				"properties": {
					"ua": {
						"type": "string"
					},
					"browser": {
						"$ref": "#/components/schemas/UAParser.IBrowser"
					},
					"device": {
						"$ref": "#/components/schemas/UAParser.IDevice"
					},
					"engine": {
						"$ref": "#/components/schemas/UAParser.IEngine"
					},
					"os": {
						"$ref": "#/components/schemas/UAParser.IOS"
					},
					"cpu": {
						"$ref": "#/components/schemas/UAParser.ICPU"
					}
				},
				"required": [
					"ua",
					"browser",
					"device",
					"engine",
					"os",
					"cpu"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DeviceInfo": {
				"properties": {
					"deviceInfo": {
						"$ref": "#/components/schemas/UAParser.IResult"
					}
				},
				"required": [
					"deviceInfo"
				],
				"type": "object"
			},
			"EnhancedTxInfoResponse": {
				"allOf": [
					{
						"$ref": "#/components/schemas/EnhancedTxInfo"
					},
					{
						"$ref": "#/components/schemas/DeviceInfo"
					}
				]
			},
			"RefundReason": {
				"enum": [
					"userCancellation",
					"failedFulfillment",
					"buyerFraud",
					"other"
				],
				"type": "string"
			},
			"Pick_IChargeback.Exclude_keyofIChargeback.response-or-draftResponse-or-notes__": {
				"properties": {
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"payment": {
						"type": "string"
					},
					"chargebackId": {
						"type": "string"
					},
					"reasonCode": {
						"type": "string"
					},
					"reasonDescription": {
						"type": "string"
					},
					"respondByDate": {
						"type": "string",
						"format": "date-time"
					},
					"responded": {
						"type": "boolean"
					},
					"ignore": {
						"type": "boolean"
					},
					"loadedOn": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"createdAt",
					"updatedAt",
					"payment",
					"chargebackId",
					"reasonCode",
					"reasonDescription",
					"respondByDate",
					"responded"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_IChargeback.response-or-draftResponse-or-notes_": {
				"$ref": "#/components/schemas/Pick_IChargeback.Exclude_keyofIChargeback.response-or-draftResponse-or-notes__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"Pick_IMerchant.merchantId_": {
				"properties": {
					"merchantId": {
						"type": "string"
					}
				},
				"required": [
					"merchantId"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Pick_ICustomer.customerId_": {
				"properties": {
					"customerId": {
						"type": "string"
					}
				},
				"required": [
					"customerId"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"AllChargebackResponse": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Omit_IChargeback.response-or-draftResponse-or-notes_"
					},
					{
						"properties": {
							"payment": {
								"$ref": "#/components/schemas/IPayment"
							}
						},
						"required": [
							"payment"
						],
						"type": "object"
					},
					{
						"properties": {
							"responded": {
								"type": "boolean",
								"enum": [
									true
								],
								"nullable": false
							}
						},
						"required": [
							"responded"
						],
						"type": "object"
					},
					{
						"properties": {
							"merchant": {
								"$ref": "#/components/schemas/Pick_IMerchant.merchantId_"
							}
						},
						"required": [
							"merchant"
						],
						"type": "object"
					},
					{
						"properties": {
							"customer": {
								"$ref": "#/components/schemas/Pick_ICustomer.customerId_"
							}
						},
						"required": [
							"customer"
						],
						"type": "object"
					}
				]
			},
			"ChargebackStats": {
				"properties": {
					"totalChargebacks": {
						"type": "number",
						"format": "double"
					},
					"chargebacksWithNoResponse": {
						"type": "number",
						"format": "double"
					},
					"totalChargebackAmount": {
						"type": "number",
						"format": "double"
					},
					"chargebackRatio": {
						"type": "number",
						"format": "double"
					},
					"totalPayments": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"totalChargebacks",
					"chargebacksWithNoResponse",
					"totalChargebackAmount",
					"chargebackRatio",
					"totalPayments"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChargebackAnalytic": {
				"properties": {
					"name": {
						"type": "string"
					},
					"lostRate": {
						"type": "string"
					},
					"wonRate": {
						"type": "string"
					},
					"countLost": {
						"type": "number",
						"format": "double"
					},
					"countWon": {
						"type": "number",
						"format": "double"
					},
					"chargebackVolumeRate": {
						"type": "string"
					},
					"chargebackVolume": {
						"$ref": "#/components/schemas/Cents"
					},
					"paymentVolume": {
						"$ref": "#/components/schemas/Cents"
					},
					"paymentCount": {
						"type": "number",
						"format": "double"
					},
					"fraudRate": {
						"type": "string"
					},
					"chargebackRate": {
						"type": "string"
					},
					"chargebackCount": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"lostRate",
					"wonRate",
					"countLost",
					"countWon",
					"chargebackVolumeRate",
					"chargebackVolume",
					"paymentVolume",
					"paymentCount",
					"fraudRate",
					"chargebackRate",
					"chargebackCount"
				],
				"type": "object"
			},
			"ChargebackAnalytics": {
				"properties": {
					"merchants": {
						"items": {
							"$ref": "#/components/schemas/ChargebackAnalytic"
						},
						"type": "array"
					},
					"processors": {
						"items": {
							"$ref": "#/components/schemas/ChargebackAnalytic"
						},
						"type": "array"
					}
				},
				"required": [
					"merchants",
					"processors"
				],
				"type": "object"
			},
			"IChargeback": {
				"properties": {
					"payment": {
						"type": "string"
					},
					"chargebackId": {
						"type": "string"
					},
					"reasonCode": {
						"type": "string"
					},
					"reasonDescription": {
						"type": "string"
					},
					"respondByDate": {
						"type": "string",
						"format": "date-time"
					},
					"responded": {
						"type": "boolean"
					},
					"draftResponse": {
						"type": "string"
					},
					"notes": {
						"type": "string"
					},
					"ignore": {
						"type": "boolean"
					},
					"loadedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"payment",
					"chargebackId",
					"reasonCode",
					"reasonDescription",
					"respondByDate",
					"responded",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IPopulatedCard": {
				"properties": {
					"token": {
						"type": "string"
					},
					"expMonth": {
						"type": "string"
					},
					"expYear": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"address1": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"zip": {
						"type": "string"
					},
					"country": {
						"type": "string"
					}
				},
				"required": [
					"token",
					"expMonth",
					"expYear",
					"firstName",
					"lastName",
					"address1",
					"city",
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ICleanPurse": {
				"properties": {
					"pixes": {
						"items": {
							"$ref": "#/components/schemas/IPixAccount"
						},
						"type": "array"
					},
					"ibans": {
						"items": {
							"$ref": "#/components/schemas/Omit_IIbanAccount.vendorData_"
						},
						"type": "array"
					},
					"cards": {
						"items": {
							"allOf": [
								{
									"$ref": "#/components/schemas/Omit_ICardAccount.vendorData_"
								},
								{
									"properties": {
										"data": {
											"$ref": "#/components/schemas/IPopulatedCard"
										}
									},
									"required": [
										"data"
									],
									"type": "object"
								}
							]
						},
						"type": "array"
					},
					"accounts": {
						"items": {
							"allOf": [
								{
									"$ref": "#/components/schemas/Omit_IBankAccount.vendorData_"
								},
								{
									"properties": {
										"plaidLinked": {
											"type": "boolean"
										}
									},
									"required": [
										"plaidLinked"
									],
									"type": "object"
								}
							]
						},
						"type": "array"
					},
					"wallets": {
						"items": {
							"$ref": "#/components/schemas/IWallet"
						},
						"type": "array"
					},
					"_id": {
						"type": "string"
					}
				},
				"required": [
					"pixes",
					"ibans",
					"cards",
					"accounts",
					"wallets",
					"_id"
				],
				"type": "object"
			},
			"Pick_KycUserInformation.Exclude_keyofKycUserInformation.email__": {
				"properties": {
					"country": {
						"type": "string",
						"description": "ISO 3166-1 alpha-2 country codes",
						"pattern": "^[A-Z]{2}$"
					},
					"firstName": {
						"type": "string",
						"minLength": 1
					},
					"surName": {
						"type": "string",
						"minLength": 1
					},
					"physicalAddress": {
						"type": "string",
						"minLength": 1
					},
					"city": {
						"type": "string",
						"minLength": 1
					},
					"state": {
						"type": "string",
						"minLength": 2
					},
					"zip": {
						"type": "string"
					},
					"dob": {
						"type": "string",
						"description": "Date of birth in YYYYMMDD format",
						"pattern": "^\\d{4}[-/]?(\\d{2}[-/]?){2}$"
					},
					"ssn": {
						"type": "string",
						"description": "4 Digit SSN",
						"pattern": "^\\d{4}$"
					}
				},
				"required": [
					"country",
					"firstName",
					"surName",
					"physicalAddress",
					"city",
					"state",
					"zip",
					"dob",
					"ssn"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_KycUserInformation.email_": {
				"$ref": "#/components/schemas/Pick_KycUserInformation.Exclude_keyofKycUserInformation.email__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CustomerData": {
				"properties": {
					"emails": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"payments": {
						"items": {
							"$ref": "#/components/schemas/IPayment"
						},
						"type": "array"
					},
					"payouts": {
						"items": {
							"$ref": "#/components/schemas/IWithdraw"
						},
						"type": "array"
					},
					"purses": {
						"items": {
							"$ref": "#/components/schemas/ICleanPurse"
						},
						"type": "array"
					},
					"linkedPurses": {
						"items": {
							"$ref": "#/components/schemas/ICleanPurse"
						},
						"type": "array"
					},
					"verificationData": {
						"items": {
							"$ref": "#/components/schemas/Omit_KycUserInformation.email_"
						},
						"type": "array"
					},
					"verifications": {
						"items": {
							"$ref": "#/components/schemas/Verification"
						},
						"type": "array"
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo"
					}
				},
				"required": [
					"emails",
					"payments",
					"payouts",
					"purses",
					"linkedPurses",
					"verificationData",
					"verifications"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreditOperation": {
				"properties": {
					"wallet": {
						"type": "string"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"amount": {
						"$ref": "#/components/schemas/Cents"
					},
					"idempotencyKey": {
						"type": "string"
					}
				},
				"required": [
					"wallet",
					"blockchain",
					"amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"JobStatusResponse": {
				"anyOf": [
					{
						"properties": {
							"status": {
								"type": "string",
								"enum": [
									"pending"
								],
								"nullable": false
							}
						},
						"required": [
							"status"
						],
						"type": "object"
					},
					{
						"properties": {
							"value": {
								"type": "string",
								"nullable": true
							},
							"status": {
								"type": "string",
								"enum": [
									"completed"
								],
								"nullable": false
							}
						},
						"required": [
							"value",
							"status"
						],
						"type": "object"
					},
					{
						"properties": {
							"error": {
								"type": "string"
							},
							"status": {
								"type": "string",
								"enum": [
									"failed"
								],
								"nullable": false
							}
						},
						"required": [
							"error",
							"status"
						],
						"type": "object"
					}
				],
				"nullable": true
			},
			"WebhookCategory": {
				"enum": [
					"Purchase",
					"Subscription",
					"KYC",
					"Withdraw"
				],
				"type": "string"
			},
			"IPopulatedSubscription_string_": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/ICustomer_string_"
							}
						]
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"plan": {
						"$ref": "#/components/schemas/ISubscriptionPlan_string_"
					},
					"cardProcessor": {
						"$ref": "#/components/schemas/PaymentProcessor"
					},
					"achProcessor": {
						"$ref": "#/components/schemas/AchProcessor"
					},
					"reference": {
						"type": "string"
					},
					"nextPaymentAt": {
						"type": "string",
						"format": "date-time"
					},
					"status": {
						"$ref": "#/components/schemas/SubscriptionStatus"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/WebhookInfo"
					},
					"marketplaceInfo": {
						"$ref": "#/components/schemas/Pick_MarketplaceInfo.fixedFee-or-feePercentage_"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"_id",
					"customer",
					"merchant",
					"plan",
					"reference",
					"status",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaymentWebhookData": {
				"properties": {
					"id": {
						"type": "string"
					},
					"wallet": {
						"type": "string"
					},
					"webhookInfo": {
						"allOf": [
							{
								"$ref": "#/components/schemas/WebhookInfo"
							}
						],
						"nullable": true
					},
					"subtotal": {
						"$ref": "#/components/schemas/Cents"
					},
					"fees": {
						"$ref": "#/components/schemas/Cents"
					},
					"gasFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"chargebackProtectionFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"total": {
						"$ref": "#/components/schemas/Cents"
					},
					"subscription": {
						"$ref": "#/components/schemas/IPopulatedSubscription_string_"
					},
					"merchantId": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"wallet",
					"subtotal",
					"fees",
					"gasFees",
					"chargebackProtectionFees",
					"total",
					"merchantId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_PaymentWebhookData.Exclude_keyofPaymentWebhookData.wallet__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"merchantId": {
						"type": "string"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject"
					},
					"fees": {
						"$ref": "#/components/schemas/Cents"
					},
					"subtotal": {
						"$ref": "#/components/schemas/Cents"
					},
					"gasFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"chargebackProtectionFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"total": {
						"$ref": "#/components/schemas/Cents"
					},
					"subscription": {
						"$ref": "#/components/schemas/IPopulatedSubscription_string_"
					}
				},
				"required": [
					"id",
					"merchantId",
					"webhookInfo",
					"fees",
					"subtotal",
					"gasFees",
					"chargebackProtectionFees",
					"total"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_PaymentWebhookData.wallet_": {
				"$ref": "#/components/schemas/Pick_PaymentWebhookData.Exclude_keyofPaymentWebhookData.wallet__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"PaymentWebhookData3": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Omit_PaymentWebhookData.wallet_"
					},
					{
						"properties": {
							"customerId": {
								"type": "string"
							}
						},
						"required": [
							"customerId"
						],
						"type": "object"
					}
				]
			},
			"PaymentDeclinedWebhookData": {
				"properties": {
					"id": {
						"type": "string"
					},
					"wallet": {
						"type": "string"
					},
					"webhookInfo": {
						"allOf": [
							{
								"$ref": "#/components/schemas/WebhookInfo"
							}
						],
						"nullable": true
					},
					"subtotal": {
						"$ref": "#/components/schemas/Cents"
					},
					"fees": {
						"$ref": "#/components/schemas/Cents"
					},
					"gasFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"chargebackProtectionFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"total": {
						"$ref": "#/components/schemas/Cents"
					},
					"subscription": {
						"$ref": "#/components/schemas/IPopulatedSubscription_string_"
					},
					"merchantId": {
						"type": "string"
					},
					"declineCode": {
						"type": "string"
					},
					"declineDescription": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"wallet",
					"subtotal",
					"fees",
					"gasFees",
					"chargebackProtectionFees",
					"total",
					"merchantId",
					"declineCode",
					"declineDescription"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_PaymentDeclinedWebhookData.Exclude_keyofPaymentDeclinedWebhookData.wallet__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"merchantId": {
						"type": "string"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject"
					},
					"fees": {
						"$ref": "#/components/schemas/Cents"
					},
					"subtotal": {
						"$ref": "#/components/schemas/Cents"
					},
					"gasFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"chargebackProtectionFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"total": {
						"$ref": "#/components/schemas/Cents"
					},
					"subscription": {
						"$ref": "#/components/schemas/IPopulatedSubscription_string_"
					},
					"declineCode": {
						"type": "string"
					},
					"declineDescription": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"merchantId",
					"webhookInfo",
					"fees",
					"subtotal",
					"gasFees",
					"chargebackProtectionFees",
					"total",
					"declineCode",
					"declineDescription"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_PaymentDeclinedWebhookData.wallet_": {
				"$ref": "#/components/schemas/Pick_PaymentDeclinedWebhookData.Exclude_keyofPaymentDeclinedWebhookData.wallet__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"PaymentDeclinedWebhookData3": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Omit_PaymentDeclinedWebhookData.wallet_"
					},
					{
						"properties": {
							"customerId": {
								"type": "string"
							}
						},
						"required": [
							"customerId"
						],
						"type": "object"
					}
				]
			},
			"SettledWebhookData": {
				"properties": {
					"id": {
						"type": "string"
					},
					"wallet": {
						"type": "string"
					},
					"webhookInfo": {
						"allOf": [
							{
								"$ref": "#/components/schemas/WebhookInfo"
							}
						],
						"nullable": true
					},
					"subtotal": {
						"$ref": "#/components/schemas/Cents"
					},
					"fees": {
						"$ref": "#/components/schemas/Cents"
					},
					"gasFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"chargebackProtectionFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"total": {
						"$ref": "#/components/schemas/Cents"
					},
					"subscription": {
						"$ref": "#/components/schemas/IPopulatedSubscription_string_"
					},
					"merchantId": {
						"type": "string"
					},
					"signature": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"wallet",
					"subtotal",
					"fees",
					"gasFees",
					"chargebackProtectionFees",
					"total",
					"merchantId",
					"signature"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_SettledWebhookData.Exclude_keyofSettledWebhookData.wallet__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"merchantId": {
						"type": "string"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject"
					},
					"fees": {
						"$ref": "#/components/schemas/Cents"
					},
					"subtotal": {
						"$ref": "#/components/schemas/Cents"
					},
					"gasFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"chargebackProtectionFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"total": {
						"$ref": "#/components/schemas/Cents"
					},
					"subscription": {
						"$ref": "#/components/schemas/IPopulatedSubscription_string_"
					},
					"signature": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"merchantId",
					"webhookInfo",
					"fees",
					"subtotal",
					"gasFees",
					"chargebackProtectionFees",
					"total",
					"signature"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_SettledWebhookData.wallet_": {
				"$ref": "#/components/schemas/Pick_SettledWebhookData.Exclude_keyofSettledWebhookData.wallet__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"SettledWebhookData3": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Omit_SettledWebhookData.wallet_"
					},
					{
						"properties": {
							"customerId": {
								"type": "string"
							}
						},
						"required": [
							"customerId"
						],
						"type": "object"
					}
				]
			},
			"SubscriptionWebhookData": {
				"properties": {
					"planCode": {
						"type": "string"
					},
					"planName": {
						"type": "string"
					},
					"subscriptionId": {
						"type": "string"
					},
					"wallet": {
						"type": "string"
					},
					"amount": {
						"$ref": "#/components/schemas/Cents"
					},
					"interval": {
						"type": "string"
					},
					"fundingMethod": {
						"type": "string"
					},
					"webhookInfo": {
						"allOf": [
							{
								"$ref": "#/components/schemas/WebhookInfo"
							}
						],
						"nullable": true
					},
					"reason": {
						"type": "string"
					}
				},
				"required": [
					"planCode",
					"planName",
					"subscriptionId",
					"wallet",
					"amount",
					"interval",
					"fundingMethod"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_SubscriptionWebhookData.Exclude_keyofSubscriptionWebhookData.wallet__": {
				"properties": {
					"amount": {
						"$ref": "#/components/schemas/Cents"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject"
					},
					"planCode": {
						"type": "string"
					},
					"planName": {
						"type": "string"
					},
					"subscriptionId": {
						"type": "string"
					},
					"interval": {
						"type": "string"
					},
					"fundingMethod": {
						"type": "string"
					},
					"reason": {
						"type": "string"
					}
				},
				"required": [
					"amount",
					"webhookInfo",
					"planCode",
					"planName",
					"subscriptionId",
					"interval",
					"fundingMethod"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_SubscriptionWebhookData.wallet_": {
				"$ref": "#/components/schemas/Pick_SubscriptionWebhookData.Exclude_keyofSubscriptionWebhookData.wallet__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"SubscriptionWebhookData3": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Omit_SubscriptionWebhookData.wallet_"
					},
					{
						"properties": {
							"customerId": {
								"type": "string"
							}
						},
						"required": [
							"customerId"
						],
						"type": "object"
					}
				]
			},
			"PaymentChargebackWebhookData": {
				"properties": {
					"id": {
						"type": "string"
					},
					"wallet": {
						"type": "string"
					},
					"webhookInfo": {
						"allOf": [
							{
								"$ref": "#/components/schemas/WebhookInfo"
							}
						],
						"nullable": true
					},
					"subtotal": {
						"$ref": "#/components/schemas/Cents"
					},
					"fees": {
						"$ref": "#/components/schemas/Cents"
					},
					"gasFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"chargebackProtectionFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"total": {
						"$ref": "#/components/schemas/Cents"
					},
					"subscription": {
						"$ref": "#/components/schemas/IPopulatedSubscription_string_"
					},
					"merchantId": {
						"type": "string"
					},
					"chargebackId": {
						"type": "string"
					},
					"reasonCode": {
						"type": "string"
					},
					"reasonDescription": {
						"type": "string"
					},
					"respondByDate": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id",
					"wallet",
					"subtotal",
					"fees",
					"gasFees",
					"chargebackProtectionFees",
					"total",
					"merchantId",
					"chargebackId",
					"reasonCode",
					"reasonDescription",
					"respondByDate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_PaymentChargebackWebhookData.Exclude_keyofPaymentChargebackWebhookData.wallet__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"merchantId": {
						"type": "string"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject"
					},
					"fees": {
						"$ref": "#/components/schemas/Cents"
					},
					"chargebackId": {
						"type": "string"
					},
					"reasonCode": {
						"type": "string"
					},
					"reasonDescription": {
						"type": "string"
					},
					"respondByDate": {
						"type": "string",
						"format": "date-time"
					},
					"subtotal": {
						"$ref": "#/components/schemas/Cents"
					},
					"gasFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"chargebackProtectionFees": {
						"$ref": "#/components/schemas/Cents"
					},
					"total": {
						"$ref": "#/components/schemas/Cents"
					},
					"subscription": {
						"$ref": "#/components/schemas/IPopulatedSubscription_string_"
					}
				},
				"required": [
					"id",
					"merchantId",
					"webhookInfo",
					"fees",
					"chargebackId",
					"reasonCode",
					"reasonDescription",
					"respondByDate",
					"subtotal",
					"gasFees",
					"chargebackProtectionFees",
					"total"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_PaymentChargebackWebhookData.wallet_": {
				"$ref": "#/components/schemas/Pick_PaymentChargebackWebhookData.Exclude_keyofPaymentChargebackWebhookData.wallet__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"PaymentChargebackWebhookData3": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Omit_PaymentChargebackWebhookData.wallet_"
					},
					{
						"properties": {
							"customerId": {
								"type": "string"
							}
						},
						"required": [
							"customerId"
						],
						"type": "object"
					}
				]
			},
			"KycWebhookData": {
				"properties": {
					"wallet": {
						"type": "string"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"email": {
						"type": "string"
					}
				},
				"required": [
					"wallet",
					"blockchain",
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SubMerchantKybWebhookData": {
				"properties": {
					"merchantId": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"required": [
					"merchantId",
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WithdrawWebhookData": {
				"properties": {
					"wallet": {
						"type": "string"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"signature": {
						"type": "string"
					},
					"userFees": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"userGasFees": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"merchantFees": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"merchantGasFees": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"total": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"currency": {
						"$ref": "#/components/schemas/Currency"
					},
					"merchantId": {
						"type": "string"
					}
				},
				"required": [
					"wallet",
					"blockchain",
					"signature",
					"userFees",
					"userGasFees",
					"merchantFees",
					"merchantGasFees",
					"total",
					"currency",
					"merchantId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WebhookData": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/PaymentWebhookData"
					},
					{
						"$ref": "#/components/schemas/PaymentWebhookData3"
					},
					{
						"$ref": "#/components/schemas/PaymentDeclinedWebhookData"
					},
					{
						"$ref": "#/components/schemas/PaymentDeclinedWebhookData3"
					},
					{
						"$ref": "#/components/schemas/SettledWebhookData"
					},
					{
						"$ref": "#/components/schemas/SettledWebhookData3"
					},
					{
						"$ref": "#/components/schemas/SubscriptionWebhookData"
					},
					{
						"$ref": "#/components/schemas/SubscriptionWebhookData3"
					},
					{
						"$ref": "#/components/schemas/PaymentChargebackWebhookData"
					},
					{
						"$ref": "#/components/schemas/PaymentChargebackWebhookData3"
					},
					{
						"$ref": "#/components/schemas/KycWebhookData"
					},
					{
						"$ref": "#/components/schemas/SubMerchantKybWebhookData"
					},
					{
						"$ref": "#/components/schemas/WithdrawWebhookData"
					}
				]
			},
			"WebhookPacket": {
				"properties": {
					"eventType": {
						"$ref": "#/components/schemas/WebhookEventType"
					},
					"category": {
						"$ref": "#/components/schemas/WebhookCategory"
					},
					"created": {
						"type": "string"
					},
					"data": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/WebhookData"
							},
							{
								"properties": {},
								"additionalProperties": {},
								"type": "object"
							}
						]
					}
				},
				"required": [
					"eventType",
					"category",
					"created",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"WebhookResponse": {
				"properties": {},
				"additionalProperties": {},
				"type": "object"
			},
			"WebhookDisplay": {
				"properties": {
					"id": {
						"type": "string"
					},
					"merchantId": {
						"type": "string"
					},
					"eventType": {
						"$ref": "#/components/schemas/WebhookEventType"
					},
					"category": {
						"$ref": "#/components/schemas/WebhookCategory"
					},
					"providerId": {
						"type": "string"
					},
					"version": {
						"$ref": "#/components/schemas/WebhookVersion"
					},
					"data": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/WebhookData"
							},
							{
								"$ref": "#/components/schemas/WebhookPacket"
							}
						]
					},
					"sentAt": {
						"type": "string",
						"format": "date-time"
					},
					"url": {
						"type": "string"
					},
					"responseCode": {
						"type": "number",
						"format": "double"
					},
					"responseData": {
						"$ref": "#/components/schemas/WebhookResponse"
					}
				},
				"required": [
					"id",
					"merchantId",
					"eventType",
					"category",
					"version",
					"data",
					"sentAt",
					"url",
					"responseCode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MerchantUsRegisterBody": {
				"properties": {
					"merchantId": {
						"type": "string",
						"description": "User defined merchant ID, is used to make all other API calls"
					},
					"email": {
						"type": "string",
						"description": "The email for this merchants admin account"
					},
					"baseUrl": {
						"type": "string",
						"description": "The baseUrl for this merchants portal brand. Example https://rapid.approvely.com"
					},
					"info": {
						"$ref": "#/components/schemas/KybInformation",
						"description": "Business Information will be checked with a KYB (Know Your Business) provider before access is granted"
					},
					"ubos": {
						"items": {
							"$ref": "#/components/schemas/UboInfo"
						},
						"type": "array",
						"description": "Ultimate Beneficiary owners, these are Officers, Directors, Investors and Beneficiaries who own more than 20% of the company."
					}
				},
				"required": [
					"merchantId",
					"email",
					"info",
					"ubos"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MerchantInternationalRegisterBody": {
				"properties": {
					"merchantId": {
						"type": "string",
						"description": "User defined merchant ID, is used to make all other API calls"
					},
					"email": {
						"type": "string",
						"description": "The email for this merchants admin account"
					},
					"baseUrl": {
						"type": "string",
						"description": "The baseUrl for this merchants portal brand. Example https://rapid.approvely.com"
					},
					"country": {
						"type": "string",
						"description": "The country for this merchants admin account (ISO 3166-2)"
					}
				},
				"required": [
					"merchantId",
					"email",
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MerchantRegisterBody": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/MerchantUsRegisterBody"
					},
					{
						"$ref": "#/components/schemas/MerchantInternationalRegisterBody"
					}
				]
			},
			"AuthenticateBody": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"code": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"password",
					"code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PendingVerification": {
				"properties": {
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"merchantLink": {
						"type": "string"
					},
					"uboLinks": {
						"items": {
							"$ref": "#/components/schemas/AdditionalVerification"
						},
						"type": "array"
					}
				},
				"required": [
					"verification"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateMerchantUser": {
				"properties": {
					"email": {
						"type": "string"
					},
					"scope": {
						"$ref": "#/components/schemas/MerchantScope"
					}
				},
				"required": [
					"email",
					"scope"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EditMerchantUser": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"scope": {
						"$ref": "#/components/schemas/MerchantScope"
					}
				},
				"required": [
					"email",
					"scope"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BankAccountData": {
				"properties": {
					"routingNumber": {
						"type": "string"
					},
					"account_number": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"checking",
							"savings"
						]
					}
				},
				"required": [
					"routingNumber",
					"account_number",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_ICustomer.Exclude_keyofICustomer.customerId__": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"email": {
						"type": "string"
					},
					"isBlocked": {
						"$ref": "#/components/schemas/CustomerBlockedStatus"
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo"
					},
					"chargebackProtectionEnabled": {
						"type": "boolean"
					},
					"failedAttemptSetting": {
						"$ref": "#/components/schemas/FailedAttemptSetting"
					},
					"verificationSetting": {
						"$ref": "#/components/schemas/CustomerVerificationSetting"
					},
					"exempt3DS": {
						"type": "boolean"
					}
				},
				"required": [
					"_id",
					"createdAt",
					"email",
					"isBlocked",
					"blockchain",
					"chargebackProtectionEnabled",
					"failedAttemptSetting",
					"verificationSetting"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_ICustomer.customerId_": {
				"$ref": "#/components/schemas/Pick_ICustomer.Exclude_keyofICustomer.customerId__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"ICustomerWallet": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Omit_ICustomer.customerId_"
					},
					{
						"properties": {
							"wallet": {
								"type": "string"
							}
						},
						"required": [
							"wallet"
						],
						"type": "object"
					}
				]
			},
			"PlaidAddressItem": {
				"properties": {
					"data": {
						"properties": {
							"street": {
								"type": "string"
							},
							"region": {
								"type": "string",
								"nullable": true
							},
							"postalCode": {
								"type": "string",
								"nullable": true
							},
							"country": {
								"type": "string",
								"nullable": true
							},
							"city": {
								"type": "string",
								"nullable": true
							}
						},
						"required": [
							"street",
							"region",
							"postalCode",
							"country",
							"city"
						],
						"type": "object"
					},
					"primary": {
						"type": "boolean"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PlaidEmailPhoneItem": {
				"properties": {
					"data": {
						"type": "string"
					},
					"primary": {
						"type": "boolean"
					},
					"type": {
						"type": "string"
					}
				},
				"required": [
					"data",
					"primary",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PlaidAccountOwner": {
				"properties": {
					"addresses": {
						"items": {
							"$ref": "#/components/schemas/PlaidAddressItem"
						},
						"type": "array"
					},
					"emails": {
						"items": {
							"$ref": "#/components/schemas/PlaidEmailPhoneItem"
						},
						"type": "array"
					},
					"phoneNumbers": {
						"items": {
							"$ref": "#/components/schemas/PlaidEmailPhoneItem"
						},
						"type": "array"
					},
					"names": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"addresses",
					"emails",
					"phoneNumbers",
					"names"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PlaidEntityAccount": {
				"properties": {
					"id": {
						"type": "string"
					},
					"balances": {
						"properties": {
							"limit": {
								"type": "number",
								"format": "double",
								"nullable": true
							},
							"currencyCode": {
								"type": "string",
								"nullable": true
							},
							"current": {
								"type": "number",
								"format": "double",
								"nullable": true
							},
							"available": {
								"type": "number",
								"format": "double",
								"nullable": true
							}
						},
						"required": [
							"limit",
							"currencyCode",
							"current",
							"available"
						],
						"type": "object"
					},
					"mask": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string"
					},
					"officialName": {
						"type": "string",
						"nullable": true
					},
					"owners": {
						"items": {
							"$ref": "#/components/schemas/PlaidAccountOwner"
						},
						"type": "array"
					},
					"subtype": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"balances",
					"mask",
					"name",
					"officialName",
					"owners",
					"subtype",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PlaidEntity": {
				"properties": {
					"accounts": {
						"items": {
							"$ref": "#/components/schemas/PlaidEntityAccount"
						},
						"type": "array"
					}
				},
				"required": [
					"accounts"
				],
				"type": "object",
				"additionalProperties": false
			},
			"mongoose.Types.ObjectId": {
				"type": "string"
			},
			"IMerchant_mongoose.Types.ObjectId_": {
				"properties": {
					"_id": {
						"$ref": "#/components/schemas/mongoose.Types.ObjectId"
					},
					"merchantId": {
						"type": "string"
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"brand": {
						"$ref": "#/components/schemas/MerchantBrandSettings"
					},
					"colors": {
						"$ref": "#/components/schemas/MerchantTheme"
					},
					"url": {
						"type": "string"
					},
					"withdrawFees": {
						"properties": {
							"business": {
								"$ref": "#/components/schemas/Record_WithdrawSpeed.WithdrawFeeConfig_"
							},
							"user": {
								"$ref": "#/components/schemas/Record_WithdrawSpeed.WithdrawFeeConfig_"
							},
							"swapBps": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"business",
							"user",
							"swapBps"
						],
						"type": "object"
					},
					"wallets": {
						"properties": {
							"evm": {
								"properties": {
									"usdcPayer": {
										"type": "string"
									},
									"feePayer": {
										"type": "string"
									}
								},
								"required": [
									"usdcPayer",
									"feePayer"
								],
								"type": "object"
							},
							"near": {
								"properties": {
									"feePayer": {
										"type": "string"
									}
								},
								"required": [
									"feePayer"
								],
								"type": "object"
							},
							"solana": {
								"properties": {
									"usdcPayer": {
										"type": "string"
									},
									"feePayer": {
										"type": "string"
									}
								},
								"required": [
									"usdcPayer",
									"feePayer"
								],
								"type": "object"
							}
						},
						"required": [
							"evm",
							"near",
							"solana"
						],
						"type": "object"
					},
					"depositBonus": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/OneToOneMatchDepositBonus"
							},
							{
								"$ref": "#/components/schemas/DepositYGetXDepositBonus"
							}
						]
					},
					"apiKey": {
						"type": "string"
					},
					"apiKeys": {
						"items": {
							"properties": {
								"privateUuid": {
									"type": "string"
								},
								"publicUuid": {
									"type": "string"
								}
							},
							"required": [
								"privateUuid",
								"publicUuid"
							],
							"type": "object"
						},
						"type": "array"
					},
					"kycType": {
						"$ref": "#/components/schemas/KycType"
					},
					"liquidityNotifications": {
						"items": {
							"$ref": "#/components/schemas/LiquidityNotification"
						},
						"type": "array"
					},
					"settlementAddresses": {
						"allOf": [
							{
								"properties": {
									"solana": {
										"type": "string"
									},
									"near": {
										"type": "string"
									},
									"eth": {
										"type": "string"
									},
									"polygon": {
										"type": "string"
									},
									"base": {
										"type": "string"
									},
									"user": {
										"type": "string"
									},
									"xion": {
										"type": "string"
									},
									"arbitrum": {
										"type": "string"
									}
								},
								"type": "object"
							},
							{
								"properties": {
									"mpcWalletProvider": {
										"type": "string",
										"enum": [
											"metakeep"
										],
										"nullable": false
									},
									"recipientAddresses": {
										"items": {
											"properties": {
												"createdAt": {
													"type": "string",
													"format": "date-time"
												},
												"recipient": {
													"type": "string"
												}
											},
											"required": [
												"createdAt",
												"recipient"
											],
											"type": "object"
										},
										"type": "array"
									},
									"verification": {
										"$ref": "#/components/schemas/Verification"
									}
								},
								"type": "object"
							}
						]
					},
					"settlementBankToken": {
						"type": "string"
					},
					"settlementAptPayId": {
						"type": "string"
					},
					"users": {
						"items": {
							"$ref": "#/components/schemas/IMerchantUser"
						},
						"type": "array"
					},
					"ubos": {
						"items": {
							"$ref": "#/components/schemas/UboEntry"
						},
						"type": "array"
					},
					"goLiveChecklist": {
						"$ref": "#/components/schemas/MerchantGoLiveChecklist"
					},
					"webhookSettings": {
						"$ref": "#/components/schemas/WebhookSettings"
					},
					"cardSettings": {
						"$ref": "#/components/schemas/CardSettings"
					},
					"achSettings": {
						"$ref": "#/components/schemas/ACHSettings"
					},
					"pixSettings": {
						"$ref": "#/components/schemas/PixSettings"
					},
					"ibanSettings": {
						"$ref": "#/components/schemas/IbanSettings"
					},
					"nSureSettings": {
						"$ref": "#/components/schemas/NSureSettings"
					},
					"blockConfig": {
						"properties": {
							"failedPaymentAttemptLimit": {
								"type": "number",
								"format": "double"
							}
						},
						"type": "object"
					},
					"hideBranding": {
						"type": "boolean"
					},
					"withdrawFeePayment": {
						"properties": {
							"paysGasFees": {
								"properties": {
									"xion": {
										"type": "boolean"
									},
									"user": {
										"type": "boolean"
									},
									"flow": {
										"type": "boolean"
									},
									"arbitrum": {
										"type": "boolean"
									},
									"base": {
										"type": "boolean"
									},
									"eth": {
										"type": "boolean"
									},
									"polygon": {
										"type": "boolean"
									},
									"near": {
										"type": "boolean"
									},
									"solana": {
										"type": "boolean"
									}
								},
								"type": "object"
							},
							"paysWithdrawFees": {
								"type": "boolean"
							}
						},
						"type": "object"
					},
					"pushToCardEnabled": {
						"type": "boolean"
					},
					"bankPayoutProvider": {
						"$ref": "#/components/schemas/PayoutProviderOption"
					},
					"ibanPayoutProvider": {
						"$ref": "#/components/schemas/IbanPayoutProvider"
					},
					"rtpPayoutProvider": {
						"$ref": "#/components/schemas/RtpPayoutProvider"
					},
					"pixPayoutProvider": {
						"$ref": "#/components/schemas/PixPayoutProvider"
					},
					"maxTransactionAmount": {
						"$ref": "#/components/schemas/Cents"
					},
					"refundBalanceLimit": {
						"$ref": "#/components/schemas/Cents"
					},
					"parent": {
						"$ref": "#/components/schemas/mongoose.Types.ObjectId"
					},
					"creditSeed": {
						"type": "string"
					},
					"tokenSettings": {
						"$ref": "#/components/schemas/Record_Currency.StableCoin_"
					},
					"withdrawSettlementLocation": {
						"$ref": "#/components/schemas/SettlementLocations"
					},
					"enforceJwt": {
						"type": "boolean"
					},
					"enforceCheckoutJwt": {
						"type": "boolean"
					},
					"metakeepAppId": {
						"type": "string"
					},
					"submerchantsSeeCustomers": {
						"type": "boolean"
					},
					"externalVerificationLinks": {
						"type": "boolean"
					},
					"experimentalSwap": {
						"type": "boolean"
					},
					"whitelistedAncestorUrls": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"_id",
					"merchantId",
					"verification",
					"withdrawFees",
					"wallets",
					"apiKey",
					"apiKeys",
					"kycType",
					"liquidityNotifications",
					"users",
					"ubos",
					"goLiveChecklist",
					"cardSettings",
					"achSettings",
					"pixSettings",
					"ibanSettings",
					"nSureSettings",
					"hideBranding",
					"pushToCardEnabled",
					"refundBalanceLimit",
					"creditSeed",
					"tokenSettings",
					"withdrawSettlementLocation",
					"enforceJwt",
					"submerchantsSeeCustomers"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IBankSettlement_mongoose.Types.ObjectId_": {
				"properties": {
					"_id": {
						"$ref": "#/components/schemas/mongoose.Types.ObjectId"
					},
					"merchant": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/mongoose.Types.ObjectId"
							},
							{
								"$ref": "#/components/schemas/IMerchant_mongoose.Types.ObjectId_"
							}
						]
					},
					"amount": {
						"$ref": "#/components/schemas/Cents"
					},
					"subtotal": {
						"$ref": "#/components/schemas/Cents"
					},
					"fees": {
						"$ref": "#/components/schemas/Cents"
					},
					"status": {
						"$ref": "#/components/schemas/WithdrawStatus"
					},
					"transferId": {
						"type": "string"
					},
					"payments": {
						"items": {
							"$ref": "#/components/schemas/mongoose.Types.ObjectId"
						},
						"type": "array"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"_id",
					"merchant",
					"amount",
					"subtotal",
					"fees",
					"status",
					"transferId",
					"payments",
					"createdAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ICustomer_mongoose.Types.ObjectId_": {
				"properties": {
					"_id": {
						"$ref": "#/components/schemas/mongoose.Types.ObjectId"
					},
					"customerId": {
						"type": "string"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"email": {
						"type": "string"
					},
					"isBlocked": {
						"$ref": "#/components/schemas/CustomerBlockedStatus"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo"
					},
					"chargebackProtectionEnabled": {
						"type": "boolean"
					},
					"merchant": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/mongoose.Types.ObjectId"
							},
							{
								"$ref": "#/components/schemas/IMerchant_mongoose.Types.ObjectId_"
							}
						]
					},
					"failedAttemptSetting": {
						"$ref": "#/components/schemas/FailedAttemptSetting"
					},
					"verificationSetting": {
						"$ref": "#/components/schemas/CustomerVerificationSetting"
					},
					"exempt3DS": {
						"type": "boolean"
					}
				},
				"required": [
					"_id",
					"customerId",
					"blockchain",
					"email",
					"isBlocked",
					"createdAt",
					"chargebackProtectionEnabled",
					"failedAttemptSetting",
					"verificationSetting"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ISubscriptionPlan_mongoose.Types.ObjectId_": {
				"properties": {
					"_id": {
						"$ref": "#/components/schemas/mongoose.Types.ObjectId"
					},
					"merchant": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/mongoose.Types.ObjectId"
							},
							{
								"$ref": "#/components/schemas/IMerchant_mongoose.Types.ObjectId_"
							}
						]
					},
					"name": {
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"interval": {
						"$ref": "#/components/schemas/SubscriptionInterval"
					},
					"duration": {
						"type": "number",
						"format": "double"
					},
					"amount": {
						"$ref": "#/components/schemas/CurrencyCents"
					},
					"description": {
						"type": "string"
					},
					"transaction": {
						"type": "string"
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType"
					},
					"active": {
						"type": "boolean"
					}
				},
				"required": [
					"_id",
					"merchant",
					"name",
					"code",
					"interval",
					"amount",
					"active"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ISubscription_mongoose.Types.ObjectId_": {
				"properties": {
					"_id": {
						"$ref": "#/components/schemas/mongoose.Types.ObjectId"
					},
					"customer": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/mongoose.Types.ObjectId"
							},
							{
								"$ref": "#/components/schemas/ICustomer_mongoose.Types.ObjectId_"
							}
						]
					},
					"merchant": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/mongoose.Types.ObjectId"
							},
							{
								"$ref": "#/components/schemas/IMerchant_mongoose.Types.ObjectId_"
							}
						]
					},
					"plan": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/mongoose.Types.ObjectId"
							},
							{
								"$ref": "#/components/schemas/ISubscriptionPlan_mongoose.Types.ObjectId_"
							}
						]
					},
					"cardProcessor": {
						"$ref": "#/components/schemas/PaymentProcessor"
					},
					"achProcessor": {
						"$ref": "#/components/schemas/AchProcessor"
					},
					"reference": {
						"type": "string"
					},
					"nextPaymentAt": {
						"type": "string",
						"format": "date-time"
					},
					"status": {
						"$ref": "#/components/schemas/SubscriptionStatus"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/WebhookInfo"
					},
					"marketplaceInfo": {
						"$ref": "#/components/schemas/Pick_MarketplaceInfo.fixedFee-or-feePercentage_"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"_id",
					"customer",
					"merchant",
					"plan",
					"reference",
					"status",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IPayment_mongoose.Types.ObjectId_": {
				"properties": {
					"_id": {
						"$ref": "#/components/schemas/mongoose.Types.ObjectId"
					},
					"paymentId": {
						"type": "string"
					},
					"totals": {
						"$ref": "#/components/schemas/TotalsResponse"
					},
					"customer": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/mongoose.Types.ObjectId"
							},
							{
								"$ref": "#/components/schemas/ICustomer_mongoose.Types.ObjectId_"
							}
						]
					},
					"merchant": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/mongoose.Types.ObjectId"
							},
							{
								"$ref": "#/components/schemas/IMerchant_mongoose.Types.ObjectId_"
							}
						]
					},
					"chargebackProtectionDecision": {
						"$ref": "#/components/schemas/ChargebackProtectionDecision"
					},
					"error": {
						"type": "string"
					},
					"signature": {
						"type": "string"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/WebhookInfo"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"usdcTransfer": {
						"type": "boolean"
					},
					"cardInfo": {
						"properties": {
							"enhancedTxInfo": {
								"$ref": "#/components/schemas/EnhancedTxInfo"
							},
							"transaction": {
								"type": "string"
							},
							"secureTransactionId": {
								"type": "string"
							},
							"processed3DS": {
								"$ref": "#/components/schemas/Verification3DS"
							},
							"cardType": {
								"$ref": "#/components/schemas/CardType"
							},
							"last4": {
								"type": "string"
							},
							"token": {
								"type": "string"
							},
							"mobileWallet": {
								"$ref": "#/components/schemas/MobileWallet"
							},
							"processor": {
								"$ref": "#/components/schemas/PaymentProcessor"
							},
							"authCode": {
								"type": "string"
							},
							"status": {
								"$ref": "#/components/schemas/CardPaymentStatus"
							}
						},
						"required": [
							"processor",
							"authCode",
							"status"
						],
						"type": "object"
					},
					"bankTransferInfo": {
						"properties": {
							"token": {
								"type": "string"
							},
							"batchedAt": {
								"type": "string",
								"format": "date-time"
							},
							"refundTransferId": {
								"type": "string"
							},
							"refundReview": {
								"type": "boolean"
							},
							"transaction": {
								"type": "string"
							},
							"processor": {
								"$ref": "#/components/schemas/AchProcessor"
							},
							"status": {
								"$ref": "#/components/schemas/AchPaymentStatus"
							}
						},
						"required": [
							"refundReview",
							"processor",
							"status"
						],
						"type": "object"
					},
					"pixInfo": {
						"properties": {
							"processed": {
								"type": "string",
								"format": "date-time"
							},
							"transaction": {
								"type": "string"
							},
							"expiration": {
								"type": "string",
								"format": "date-time"
							},
							"rate": {
								"type": "number",
								"format": "double"
							},
							"amount": {
								"$ref": "#/components/schemas/CurrencyCents"
							},
							"processor": {
								"$ref": "#/components/schemas/PixProcessor"
							},
							"status": {
								"$ref": "#/components/schemas/PixPaymentStatus"
							}
						},
						"required": [
							"expiration",
							"rate",
							"amount",
							"processor",
							"status"
						],
						"type": "object"
					},
					"ibanInfo": {
						"properties": {
							"processed": {
								"type": "string",
								"format": "date-time"
							},
							"transaction": {
								"type": "string"
							},
							"tokenSubtotal": {
								"$ref": "#/components/schemas/TokenSubtotal"
							},
							"expiration": {
								"type": "string",
								"format": "date-time"
							},
							"token": {
								"type": "string"
							},
							"rate": {
								"type": "number",
								"format": "double"
							},
							"amount": {
								"$ref": "#/components/schemas/CurrencyCents"
							},
							"processor": {
								"$ref": "#/components/schemas/IbanProcessor"
							},
							"status": {
								"$ref": "#/components/schemas/IbanPaymentStatus"
							}
						},
						"required": [
							"expiration",
							"token",
							"rate",
							"amount",
							"processor",
							"status"
						],
						"type": "object"
					},
					"subscription": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/mongoose.Types.ObjectId"
							},
							{
								"$ref": "#/components/schemas/ISubscription_mongoose.Types.ObjectId_"
							}
						]
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"redemptionCheck": {
						"type": "boolean"
					},
					"marketplaceInfo": {
						"$ref": "#/components/schemas/MarketplaceInfo"
					}
				},
				"required": [
					"_id",
					"paymentId",
					"totals",
					"customer",
					"merchant",
					"chargebackProtectionDecision",
					"createdAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BankSettlementResponse": {
				"properties": {
					"settlements": {
						"items": {
							"$ref": "#/components/schemas/IBankSettlement_mongoose.Types.ObjectId_"
						},
						"type": "array"
					},
					"pending": {
						"items": {
							"$ref": "#/components/schemas/IPayment_mongoose.Types.ObjectId_"
						},
						"type": "array"
					},
					"pendingTotal": {
						"$ref": "#/components/schemas/Cents"
					}
				},
				"required": [
					"settlements",
					"pending",
					"pendingTotal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.number_": {
				"properties": {},
				"additionalProperties": {
					"type": "number",
					"format": "double"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"MerchantAcceptanceAggregation": {
				"properties": {
					"approvalsCount": {
						"type": "number",
						"format": "double"
					},
					"declinesThatAffectAuthRateCount": {
						"type": "number",
						"format": "double"
					},
					"chargebackInsuranceApprovalRate": {
						"type": "number",
						"format": "double"
					},
					"declinesCount": {
						"type": "number",
						"format": "double"
					},
					"chargebackProtectionDeclinesCount": {
						"type": "number",
						"format": "double"
					},
					"chargebackProtectionApprovalsCount": {
						"type": "number",
						"format": "double"
					},
					"userErrorDeclinesCount": {
						"type": "number",
						"format": "double"
					},
					"bankErrorDeclinesCount": {
						"type": "number",
						"format": "double"
					},
					"challengeDeclinesCount": {
						"type": "number",
						"format": "double"
					},
					"approvalsByDay": {
						"$ref": "#/components/schemas/Record_string.number_"
					},
					"declinesByDay": {
						"$ref": "#/components/schemas/Record_string.number_"
					},
					"declinesThatAffectAuthRateByDay": {
						"$ref": "#/components/schemas/Record_string.number_"
					},
					"bankErrorDeclinesByDay": {
						"$ref": "#/components/schemas/Record_string.number_"
					},
					"challengeDeclinesByDay": {
						"$ref": "#/components/schemas/Record_string.number_"
					},
					"chargebackProtectionApprovalsByDay": {
						"$ref": "#/components/schemas/Record_string.number_"
					},
					"userErrorDeclinesByDay": {
						"$ref": "#/components/schemas/Record_string.number_"
					},
					"chargebackProtectionDeclinesByDay": {
						"$ref": "#/components/schemas/Record_string.number_"
					},
					"declineCodes": {
						"$ref": "#/components/schemas/Record_string.number_"
					}
				},
				"required": [
					"approvalsCount",
					"declinesThatAffectAuthRateCount",
					"chargebackInsuranceApprovalRate",
					"declinesCount",
					"chargebackProtectionDeclinesCount",
					"chargebackProtectionApprovalsCount",
					"userErrorDeclinesCount",
					"bankErrorDeclinesCount",
					"challengeDeclinesCount",
					"approvalsByDay",
					"declinesByDay",
					"declinesThatAffectAuthRateByDay",
					"bankErrorDeclinesByDay",
					"challengeDeclinesByDay",
					"chargebackProtectionApprovalsByDay",
					"userErrorDeclinesByDay",
					"chargebackProtectionDeclinesByDay",
					"declineCodes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EditorType": {
				"enum": [
					"Coinflow",
					"Merchant"
				],
				"type": "string"
			},
			"Record_any.any_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"Pick_IMerchantAuditLog.Exclude_keyofIMerchantAuditLog._id-or-merchant__": {
				"properties": {
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"editor": {
						"type": "string"
					},
					"editorType": {
						"$ref": "#/components/schemas/EditorType"
					},
					"ipAddress": {
						"type": "string"
					},
					"modifications": {
						"$ref": "#/components/schemas/Record_any.any_"
					}
				},
				"required": [
					"createdAt",
					"editor",
					"editorType",
					"ipAddress",
					"modifications"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_IMerchantAuditLog._id-or-merchant_": {
				"$ref": "#/components/schemas/Pick_IMerchantAuditLog.Exclude_keyofIMerchantAuditLog._id-or-merchant__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"AuditLogDisplay": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Omit_IMerchantAuditLog._id-or-merchant_"
					},
					{
						"properties": {
							"merchantId": {
								"type": "string"
							}
						},
						"required": [
							"merchantId"
						],
						"type": "object"
					}
				]
			},
			"SellerTableRow": {
				"properties": {
					"merchantId": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"sales": {
						"type": "number",
						"format": "double"
					},
					"volume": {
						"$ref": "#/components/schemas/Cents"
					},
					"disputes": {
						"type": "number",
						"format": "double"
					},
					"currency": {
						"$ref": "#/components/schemas/Currency"
					},
					"isBlocked": {
						"type": "boolean"
					},
					"revenue": {
						"$ref": "#/components/schemas/Cents"
					},
					"status": {
						"$ref": "#/components/schemas/VerificationStatus"
					}
				},
				"required": [
					"merchantId",
					"email",
					"sales",
					"volume",
					"disputes",
					"currency",
					"isBlocked",
					"revenue",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SecureDSStatistics": {
				"properties": {
					"authentications": {
						"type": "number",
						"format": "double"
					},
					"frictionlessRate": {
						"type": "number",
						"format": "double"
					},
					"challengeRate": {
						"type": "number",
						"format": "double"
					},
					"rejectedRate": {
						"type": "number",
						"format": "double"
					},
					"errorRate": {
						"type": "number",
						"format": "double"
					},
					"challengeResults": {
						"properties": {
							"errorRate": {
								"type": "number",
								"format": "double"
							},
							"abandonedRate": {
								"type": "number",
								"format": "double"
							},
							"failureRate": {
								"type": "number",
								"format": "double"
							},
							"successRate": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"errorRate",
							"abandonedRate",
							"failureRate",
							"successRate"
						],
						"type": "object"
					}
				},
				"required": [
					"authentications",
					"frictionlessRate",
					"challengeRate",
					"rejectedRate",
					"errorRate",
					"challengeResults"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AuthenticationStatus": {
				"enum": [
					"Frictionless",
					"Challenge",
					"Rejected",
					"Error"
				],
				"type": "string"
			},
			"ChallengeState": {
				"enum": [
					"NotApplicable",
					"Abandoned",
					"Success",
					"Failure",
					"Error"
				],
				"type": "string"
			},
			"Record_string.any_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"ISecureDS": {
				"properties": {
					"transactionId": {
						"type": "string"
					},
					"customer": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/ICustomer_string_"
							}
						]
					},
					"merchantId": {
						"type": "string"
					},
					"cardType": {
						"$ref": "#/components/schemas/CardType"
					},
					"authenticationStatus": {
						"$ref": "#/components/schemas/AuthenticationStatus"
					},
					"challengeState": {
						"$ref": "#/components/schemas/ChallengeState"
					},
					"errorResponse": {
						"$ref": "#/components/schemas/Record_string.any_"
					},
					"cavv": {
						"type": "string"
					},
					"eci": {
						"type": "string"
					},
					"dsTransactionId": {
						"type": "string"
					},
					"acsTransactionId": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"transactionId",
					"customer",
					"merchantId",
					"cardType",
					"authenticationStatus",
					"challengeState",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_AchData.businessName-or-routingNumber-or-account_number_": {
				"properties": {
					"routingNumber": {
						"type": "string"
					},
					"businessName": {
						"type": "string"
					},
					"account_number": {
						"type": "string"
					}
				},
				"required": [
					"routingNumber",
					"account_number"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Record_string.unknown_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"GetMarketplaceLinkResponse": {
				"properties": {
					"link": {
						"type": "string",
						"description": "URL to redirect or present via IFrame"
					}
				},
				"required": [
					"link"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetMarketplacePurchaseLinkRequest": {
				"properties": {
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"threeDsChallengePreference": {
						"$ref": "#/components/schemas/ThreeDsChallengePreference",
						"description": "3DS Challenge Preference\n\nNoPreference - Take whatever the issuer decides (Default)\nFrictionless - Request the frictionless authentication flow.\nChallenge - Request the challenge authentication flow.\n\nCoinflow can’t guarantee your preference because the issuer (customer's bank)\nultimately determines the authentication flow"
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"chargebackProtectionData": {
						"$ref": "#/components/schemas/CartItemClassOmitted",
						"description": "If your company is using Coinflow Chargeback Protection, you will be required to pass a list of information regarding the\nitems being purchased so that the transaction can be guaranteed. Please see the documentation for more information."
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"sellerId": {
						"type": "string",
						"description": "ID of the Seller"
					},
					"email": {
						"type": "string",
						"description": "The email of the end user who is making the purchase.",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"theme": {
						"$ref": "#/components/schemas/MerchantTheme",
						"description": "(Optional) Override the theme"
					},
					"redirectUri": {
						"type": "string",
						"description": "(Optional) URL to redirect on successful purchase"
					},
					"deviceId": {
						"type": "string",
						"description": "If using Chargeback Protection pass the users DeviceID here"
					},
					"supportEmail": {
						"type": "string",
						"description": "The support email for your marketplace, will be displayed to users so they can contact your team to request support."
					},
					"subtotal": {
						"$ref": "#/components/schemas/Cents",
						"description": "Subtotal (in cents) of the purchase."
					}
				},
				"required": [
					"sellerId",
					"email",
					"subtotal"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetMarketplaceSubscribeLinkRequest": {
				"properties": {
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"threeDsChallengePreference": {
						"$ref": "#/components/schemas/ThreeDsChallengePreference",
						"description": "3DS Challenge Preference\n\nNoPreference - Take whatever the issuer decides (Default)\nFrictionless - Request the frictionless authentication flow.\nChallenge - Request the challenge authentication flow.\n\nCoinflow can’t guarantee your preference because the issuer (customer's bank)\nultimately determines the authentication flow"
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"chargebackProtectionData": {
						"$ref": "#/components/schemas/CartItemClassOmitted",
						"description": "If your company is using Coinflow Chargeback Protection, you will be required to pass a list of information regarding the\nitems being purchased so that the transaction can be guaranteed. Please see the documentation for more information."
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"sellerId": {
						"type": "string",
						"description": "ID of the Seller"
					},
					"email": {
						"type": "string",
						"description": "The email of the end user who is making the purchase.",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"theme": {
						"$ref": "#/components/schemas/MerchantTheme",
						"description": "(Optional) Override the theme"
					},
					"redirectUri": {
						"type": "string",
						"description": "(Optional) URL to redirect on successful purchase"
					},
					"deviceId": {
						"type": "string",
						"description": "If using Chargeback Protection pass the users DeviceID here"
					},
					"supportEmail": {
						"type": "string",
						"description": "The support email for your marketplace, will be displayed to users so they can contact your team to request support."
					},
					"planCode": {
						"type": "string",
						"description": "The id of plan to use for the subscription"
					}
				},
				"required": [
					"sellerId",
					"email",
					"planCode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetMarketplaceSellerRegistrationLinkRequest": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"sellerId": {
						"type": "string",
						"description": "ID of the seller"
					},
					"country": {
						"type": "string",
						"description": "Country in which the seller is located"
					},
					"redirectUrl": {
						"type": "string",
						"description": "Optional url for post registration navigation"
					}
				},
				"required": [
					"email",
					"sellerId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetMarketplaceSellerEmailLoginLinkRequest": {
				"properties": {
					"email": {
						"type": "string",
						"description": "Email which the seller will use the login to their seller dashboard."
					}
				},
				"required": [
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetMarketplaceSellerIdLoginLinkRequest": {
				"properties": {
					"sellerId": {
						"type": "string"
					}
				},
				"required": [
					"sellerId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SellerUsKybBody": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"parentId": {
						"type": "string",
						"description": "MerchantId of the parent marketplace"
					},
					"sellerId": {
						"type": "string",
						"description": "MerchantId of the individual seller"
					},
					"redirectUrl": {
						"type": "string",
						"description": "Optional url for post registration navigation"
					},
					"business": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"info": {
						"$ref": "#/components/schemas/KybInformation",
						"description": "Business Information will be checked with a KYB (Know Your Business) provider before access is granted"
					},
					"ubos": {
						"items": {
							"$ref": "#/components/schemas/UboInfo"
						},
						"type": "array",
						"description": "Ultimate Beneficiary owners, these are Officers, Directors, Investors and Beneficiaries who own more than 20% of the company."
					}
				},
				"required": [
					"email",
					"parentId",
					"sellerId",
					"business",
					"info",
					"ubos"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SellerUsKycBody": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"parentId": {
						"type": "string",
						"description": "MerchantId of the parent marketplace"
					},
					"sellerId": {
						"type": "string",
						"description": "MerchantId of the individual seller"
					},
					"redirectUrl": {
						"type": "string",
						"description": "Optional url for post registration navigation"
					},
					"individual": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"info": {
						"$ref": "#/components/schemas/KycUserInformation"
					}
				},
				"required": [
					"email",
					"parentId",
					"sellerId",
					"individual",
					"info"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SellerDocVKybBody": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"parentId": {
						"type": "string",
						"description": "MerchantId of the parent marketplace"
					},
					"sellerId": {
						"type": "string",
						"description": "MerchantId of the individual seller"
					},
					"redirectUrl": {
						"type": "string",
						"description": "Optional url for post registration navigation"
					},
					"business": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"country": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"parentId",
					"sellerId",
					"business",
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SellerDocVKycBody": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"parentId": {
						"type": "string",
						"description": "MerchantId of the parent marketplace"
					},
					"sellerId": {
						"type": "string",
						"description": "MerchantId of the individual seller"
					},
					"redirectUrl": {
						"type": "string",
						"description": "Optional url for post registration navigation"
					},
					"individual": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"country": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"parentId",
					"sellerId",
					"individual",
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateSellerRequest": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/SellerUsKybBody"
					},
					{
						"$ref": "#/components/schemas/SellerUsKycBody"
					},
					{
						"$ref": "#/components/schemas/SellerDocVKybBody"
					},
					{
						"$ref": "#/components/schemas/SellerDocVKycBody"
					}
				]
			},
			"SellerLoginResponse": {
				"properties": {
					"jwt": {
						"type": "string"
					},
					"seller": {
						"$ref": "#/components/schemas/SanitizedMerchant"
					}
				},
				"required": [
					"jwt",
					"seller"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SellerLoginRequest": {
				"properties": {
					"wallet": {
						"type": "string"
					},
					"signedMessage": {
						"type": "string"
					}
				},
				"required": [
					"wallet",
					"signedMessage"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SellerTimeframeAnalytics": {
				"properties": {
					"today": {
						"properties": {
							"count": {
								"type": "number",
								"format": "double"
							},
							"amount": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"count",
							"amount"
						],
						"type": "object"
					},
					"yesterday": {
						"properties": {
							"count": {
								"type": "number",
								"format": "double"
							},
							"amount": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"count",
							"amount"
						],
						"type": "object"
					},
					"week": {
						"properties": {
							"count": {
								"type": "number",
								"format": "double"
							},
							"amount": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"count",
							"amount"
						],
						"type": "object"
					},
					"month": {
						"properties": {
							"count": {
								"type": "number",
								"format": "double"
							},
							"amount": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"count",
							"amount"
						],
						"type": "object"
					}
				},
				"required": [
					"today",
					"yesterday",
					"week",
					"month"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SalesSettlementFields": {
				"enum": [
					"$marketplaceInfo.marketplaceSettlement.cents",
					"$marketplaceInfo.sellerSettlement.cents",
					"$totals.total.cents",
					"$totals.subtotal.cents"
				],
				"type": "string"
			},
			"SellerUsdcWithdrawResponse": {
				"properties": {
					"transaction": {
						"type": "string"
					}
				},
				"required": [
					"transaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SellerUsdcWithdrawRequest": {
				"properties": {
					"destination": {
						"type": "string"
					},
					"amount": {
						"$ref": "#/components/schemas/Cents"
					}
				},
				"required": [
					"destination",
					"amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ICustomerWithAccounts": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"customerId": {
						"type": "string"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"email": {
						"type": "string"
					},
					"isBlocked": {
						"$ref": "#/components/schemas/CustomerBlockedStatus"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo"
					},
					"chargebackProtectionEnabled": {
						"type": "boolean"
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"failedAttemptSetting": {
						"$ref": "#/components/schemas/FailedAttemptSetting"
					},
					"verificationSetting": {
						"$ref": "#/components/schemas/CustomerVerificationSetting"
					},
					"exempt3DS": {
						"type": "boolean"
					},
					"bankAccounts": {
						"items": {
							"$ref": "#/components/schemas/Omit_IBankAccount.vendorData_"
						},
						"type": "array"
					},
					"cards": {
						"items": {
							"$ref": "#/components/schemas/Omit_ICardAccount.vendorData_"
						},
						"type": "array"
					},
					"sepas": {
						"items": {
							"$ref": "#/components/schemas/Omit_IIbanAccount.vendorData_"
						},
						"type": "array"
					},
					"fasterPayments": {
						"items": {
							"$ref": "#/components/schemas/Omit_IIbanAccount.vendorData_"
						},
						"type": "array"
					}
				},
				"required": [
					"_id",
					"customerId",
					"blockchain",
					"email",
					"isBlocked",
					"createdAt",
					"chargebackProtectionEnabled",
					"failedAttemptSetting",
					"verificationSetting",
					"bankAccounts",
					"cards",
					"sepas",
					"fasterPayments"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetCustomerResponse": {
				"properties": {
					"customer": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ICustomerWithAccounts"
							}
						],
						"nullable": true,
						"description": "The object representing the customer, will be null on the first purchase."
					}
				},
				"required": [
					"customer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_ICustomerWithAccounts.Exclude_keyofICustomerWithAccounts.customerId__": {
				"properties": {
					"_id": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"email": {
						"type": "string"
					},
					"isBlocked": {
						"$ref": "#/components/schemas/CustomerBlockedStatus"
					},
					"merchant": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/IMerchant_string_"
							}
						]
					},
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"blockchain": {
						"$ref": "#/components/schemas/Blockchain"
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo"
					},
					"chargebackProtectionEnabled": {
						"type": "boolean"
					},
					"failedAttemptSetting": {
						"$ref": "#/components/schemas/FailedAttemptSetting"
					},
					"verificationSetting": {
						"$ref": "#/components/schemas/CustomerVerificationSetting"
					},
					"exempt3DS": {
						"type": "boolean"
					},
					"bankAccounts": {
						"items": {
							"$ref": "#/components/schemas/Omit_IBankAccount.vendorData_"
						},
						"type": "array"
					},
					"cards": {
						"items": {
							"$ref": "#/components/schemas/Omit_ICardAccount.vendorData_"
						},
						"type": "array"
					},
					"sepas": {
						"items": {
							"$ref": "#/components/schemas/Omit_IIbanAccount.vendorData_"
						},
						"type": "array"
					},
					"fasterPayments": {
						"items": {
							"$ref": "#/components/schemas/Omit_IIbanAccount.vendorData_"
						},
						"type": "array"
					}
				},
				"required": [
					"_id",
					"createdAt",
					"email",
					"isBlocked",
					"blockchain",
					"chargebackProtectionEnabled",
					"failedAttemptSetting",
					"verificationSetting",
					"bankAccounts",
					"cards",
					"sepas",
					"fasterPayments"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_ICustomerWithAccounts.customerId_": {
				"$ref": "#/components/schemas/Pick_ICustomerWithAccounts.Exclude_keyofICustomerWithAccounts.customerId__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"ICustomerWithAccountsLegacy": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Omit_ICustomerWithAccounts.customerId_"
					},
					{
						"properties": {
							"wallet": {
								"type": "string"
							}
						},
						"required": [
							"wallet"
						],
						"type": "object"
					}
				]
			},
			"GetCustomerResponseLegacy": {
				"properties": {
					"customer": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ICustomerWithAccountsLegacy"
							}
						],
						"nullable": true,
						"description": "The object representing the customer, will be null on the first purchase."
					}
				},
				"required": [
					"customer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaymentHistory": {
				"properties": {
					"paymentId": {
						"type": "string"
					},
					"merchant": {
						"type": "string"
					},
					"totals": {
						"$ref": "#/components/schemas/TotalsResponse"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"status": {
						"type": "string"
					},
					"signature": {
						"type": "string"
					},
					"subscription": {
						"$ref": "#/components/schemas/SubscriptionDisplay"
					}
				},
				"required": [
					"paymentId",
					"merchant",
					"totals",
					"createdAt",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CustomerBalances": {
				"properties": {
					"credits": {
						"$ref": "#/components/schemas/Cents"
					},
					"usdc": {
						"$ref": "#/components/schemas/Cents"
					},
					"token": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"credits",
					"usdc"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_UserAccountData.Exclude_keyofUserAccountData.country__": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"firstName": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"zip": {
						"type": "string"
					},
					"businessName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"address1": {
						"type": "string"
					},
					"address2": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"firstName",
					"city",
					"state",
					"zip",
					"lastName",
					"address1"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_UserAccountData.country_": {
				"$ref": "#/components/schemas/Pick_UserAccountData.Exclude_keyofUserAccountData.country__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"AddAccountData": {
				"properties": {
					"routingNumber": {
						"type": "string"
					},
					"account_number": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"checking",
							"savings"
						]
					},
					"email": {
						"type": "string",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					},
					"businessName": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"address1": {
						"type": "string"
					},
					"address2": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"zip": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"alias": {
						"type": "string"
					},
					"plaidAccountId": {
						"type": "string"
					},
					"rtpEligible": {
						"type": "boolean"
					},
					"plaidAccessToken": {
						"type": "string"
					}
				},
				"required": [
					"routingNumber",
					"account_number",
					"type",
					"email",
					"firstName",
					"lastName",
					"address1",
					"city",
					"state",
					"zip",
					"alias"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IbanData": {
				"properties": {
					"number": {
						"type": "string",
						"description": "The IBAN number or in the case of the UK the 8-digit account number"
					},
					"sortCode": {
						"type": "string",
						"description": "Only used for the UK, the 6-digit sort code"
					},
					"alias": {
						"type": "string"
					},
					"businessName": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"required": [
					"number",
					"firstName",
					"lastName",
					"country"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TotalsResponseSettlement": {
				"allOf": [
					{
						"$ref": "#/components/schemas/TotalsResponse"
					},
					{
						"properties": {
							"settlement": {
								"$ref": "#/components/schemas/TotalsResponse"
							},
							"exchangeRate": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"settlement",
							"exchangeRate"
						],
						"type": "object"
					}
				]
			},
			"Record_PaymentMethods.TotalsResponseSettlement-or-undefined_": {
				"properties": {
					"card": {
						"$ref": "#/components/schemas/TotalsResponseSettlement"
					},
					"ach": {
						"$ref": "#/components/schemas/TotalsResponseSettlement"
					},
					"fasterPayments": {
						"$ref": "#/components/schemas/TotalsResponseSettlement"
					},
					"sepa": {
						"$ref": "#/components/schemas/TotalsResponseSettlement"
					},
					"pix": {
						"$ref": "#/components/schemas/TotalsResponseSettlement"
					}
				},
				"required": [
					"card",
					"ach",
					"fasterPayments",
					"sepa",
					"pix"
				],
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"GetTotalsResponse": {
				"$ref": "#/components/schemas/Record_PaymentMethods.TotalsResponseSettlement-or-undefined_"
			},
			"NearDeposit": {
				"properties": {
					"yocto": {
						"type": "string"
					}
				},
				"required": [
					"yocto"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SafeMintRedeem": {
				"properties": {
					"waitForHash": {
						"type": "boolean"
					},
					"transaction": {
						"properties": {
							"data": {
								"type": "string"
							},
							"to": {
								"type": "string"
							}
						},
						"required": [
							"data",
							"to"
						],
						"type": "object"
					},
					"type": {
						"type": "string",
						"enum": [
							"safeMint"
						],
						"nullable": false
					},
					"nftContract": {
						"type": "string"
					}
				},
				"required": [
					"transaction",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReturnedTokenIdRedeem": {
				"properties": {
					"waitForHash": {
						"type": "boolean"
					},
					"transaction": {
						"properties": {
							"data": {
								"type": "string"
							},
							"to": {
								"type": "string"
							}
						},
						"required": [
							"data",
							"to"
						],
						"type": "object"
					},
					"type": {
						"type": "string",
						"enum": [
							"returned"
						],
						"nullable": false
					},
					"nftContract": {
						"type": "string"
					}
				},
				"required": [
					"transaction",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_KnownTokenIdRedeem.Exclude_keyofKnownTokenIdRedeem.keyofNormalRedeem__": {
				"properties": {
					"nftContract": {
						"type": "string",
						"minLength": 42,
						"maxLength": 42
					},
					"nftId": {
						"type": "string",
						"minLength": 1
					}
				},
				"required": [
					"nftContract",
					"nftId"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_KnownTokenIdRedeem.keyofNormalRedeem_": {
				"$ref": "#/components/schemas/Pick_KnownTokenIdRedeem.Exclude_keyofKnownTokenIdRedeem.keyofNormalRedeem__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"ReservoirNftIdItem": {
				"$ref": "#/components/schemas/Omit_KnownTokenIdRedeem.keyofNormalRedeem_"
			},
			"ReservoirOrderIdItem": {
				"properties": {
					"orderId": {
						"type": "string"
					}
				},
				"required": [
					"orderId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReservoirItem": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ReservoirNftIdItem"
					},
					{
						"$ref": "#/components/schemas/ReservoirOrderIdItem"
					}
				]
			},
			"ReservoirItems": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ReservoirItem"
					},
					{
						"items": {
							"$ref": "#/components/schemas/ReservoirItem"
						},
						"type": "array"
					}
				]
			},
			"ReservoirRedeem": {
				"properties": {
					"waitForHash": {
						"type": "boolean"
					},
					"type": {
						"type": "string",
						"enum": [
							"reservoir"
						],
						"nullable": false
					},
					"items": {
						"$ref": "#/components/schemas/ReservoirItems"
					},
					"taker": {
						"type": "string"
					}
				},
				"required": [
					"type",
					"items"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KnownTokenIdRedeem": {
				"properties": {
					"waitForHash": {
						"type": "boolean"
					},
					"transaction": {
						"properties": {
							"data": {
								"type": "string"
							},
							"to": {
								"type": "string"
							}
						},
						"required": [
							"data",
							"to"
						],
						"type": "object"
					},
					"nftContract": {
						"type": "string",
						"minLength": 42,
						"maxLength": 42
					},
					"nftId": {
						"type": "string",
						"minLength": 1
					}
				},
				"required": [
					"transaction",
					"nftContract",
					"nftId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"NormalRedeem": {
				"properties": {
					"waitForHash": {
						"type": "boolean"
					},
					"transaction": {
						"properties": {
							"data": {
								"type": "string"
							},
							"to": {
								"type": "string"
							}
						},
						"required": [
							"data",
							"to"
						],
						"type": "object"
					}
				},
				"required": [
					"transaction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenRedeem": {
				"properties": {
					"waitForHash": {
						"type": "boolean"
					},
					"type": {
						"type": "string",
						"enum": [
							"token"
						],
						"nullable": false
					},
					"destination": {
						"type": "string"
					}
				},
				"required": [
					"type",
					"destination"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EvmTransactionData": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/SafeMintRedeem"
					},
					{
						"$ref": "#/components/schemas/ReturnedTokenIdRedeem"
					},
					{
						"$ref": "#/components/schemas/ReservoirRedeem"
					},
					{
						"$ref": "#/components/schemas/KnownTokenIdRedeem"
					},
					{
						"$ref": "#/components/schemas/NormalRedeem"
					},
					{
						"$ref": "#/components/schemas/TokenRedeem"
					}
				]
			},
			"Pick_CommonCheckoutArgs.subtotal-or-nearDeposit-or-transactionData-or-rent-or-settlementType_": {
				"properties": {
					"subtotal": {
						"$ref": "#/components/schemas/Subtotal",
						"description": "Subtotal for the purchase."
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType",
						"description": "Specify the payment end settlement type"
					},
					"nearDeposit": {
						"$ref": "#/components/schemas/NearDeposit",
						"description": "(Near Only) If you are using near, use this to fund the account to pay for gas fees and storage costs"
					},
					"transactionData": {
						"$ref": "#/components/schemas/EvmTransactionData",
						"description": "(EVM only) if you want to execute a transaction on a successful purchase, you can pass a transaction request here.\n\nGas fees for the transaction will be automatically calculated and added to the total charged to the customer."
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					}
				},
				"required": [
					"subtotal"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"GetTotalsBody": {
				"$ref": "#/components/schemas/Pick_CommonCheckoutArgs.subtotal-or-nearDeposit-or-transactionData-or-rent-or-settlementType_"
			},
			"TokenExIFrameConfiguration": {
				"properties": {
					"origin": {
						"type": "string"
					},
					"timestamp": {
						"type": "string"
					},
					"tokenExID": {
						"type": "string"
					},
					"tokenScheme": {
						"type": "string"
					},
					"authenticationKey": {
						"type": "string"
					},
					"pci": {
						"type": "boolean",
						"enum": [
							true
						],
						"nullable": false
					},
					"token": {
						"type": "string"
					},
					"use3DS": {
						"type": "boolean"
					},
					"threeDSMethodNotificationUrl": {
						"type": "string"
					}
				},
				"required": [
					"origin",
					"timestamp",
					"tokenExID",
					"tokenScheme",
					"authenticationKey",
					"pci"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetTokenExAuthenticationKeyArgs": {
				"properties": {
					"origins": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"minItems": 1
					},
					"token": {
						"type": "string"
					}
				},
				"required": [
					"origins"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MerchantIdOrCheckoutJwt": {
				"anyOf": [
					{
						"properties": {
							"merchantId": {
								"type": "string"
							}
						},
						"required": [
							"merchantId"
						],
						"type": "object"
					},
					{
						"properties": {
							"checkoutJwt": {
								"type": "string"
							}
						},
						"required": [
							"checkoutJwt"
						],
						"type": "object"
					}
				]
			},
			"CheckoutResponse": {
				"properties": {
					"paymentId": {
						"type": "string",
						"description": "The ID of the payment that was created."
					}
				},
				"required": [
					"paymentId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_VerificationRequiredResponse.verification-or-verificationLink_": {
				"properties": {
					"verification": {
						"$ref": "#/components/schemas/Verification"
					},
					"verificationLink": {
						"type": "string",
						"description": "Link which can be hosted in an iframe or redirect the user to complete verification."
					}
				},
				"required": [
					"verification"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"ChallengeFields": {
				"properties": {
					"transactionId": {
						"type": "string"
					},
					"url": {
						"type": "string"
					},
					"creq": {
						"type": "string"
					}
				},
				"required": [
					"transactionId",
					"url",
					"creq"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CardCheckoutArgs": {
				"properties": {
					"subtotal": {
						"$ref": "#/components/schemas/Subtotal",
						"description": "Subtotal for the purchase."
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/WebhookInfo",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"chargebackProtectionData": {
						"$ref": "#/components/schemas/CartItemClassOmitted",
						"description": "If your company is using Coinflow Chargeback Protection, you will be required to pass a list of information regarding the\nitems being purchased so that the transaction can be guaranteed. Please see the documentation for more information."
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType",
						"description": "Specify the payment end settlement type"
					},
					"nearDeposit": {
						"$ref": "#/components/schemas/NearDeposit",
						"description": "(Near Only) If you are using near, use this to fund the account to pay for gas fees and storage costs"
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					},
					"redemptionCheck": {
						"type": "boolean",
						"description": "(Solana only) If a transaction involved in the purchase, should payment be checked for redemption"
					},
					"transactionData": {
						"$ref": "#/components/schemas/EvmTransactionData",
						"description": "(EVM only) if you want to execute a transaction on a successful purchase, you can pass a transaction request here.\n\nGas fees for the transaction will be automatically calculated and added to the total charged to the customer."
					},
					"authOnly": {
						"type": "boolean",
						"description": "Only authorize the purchase. This will not actually capture the payment.(default: false)"
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"jwtToken": {
						"type": "string",
						"description": "This is a token encoding the parameters for the request. Allows purchase parameters to be verified\nto prevent manipulation when the checkout page is presented to the user."
					},
					"threeDsChallengePreference": {
						"$ref": "#/components/schemas/ThreeDsChallengePreference",
						"description": "3DS Challenge Preference\n\nNoPreference - Take whatever the issuer decides (Default)\nFrictionless - Request the frictionless authentication flow.\nChallenge - Request the challenge authentication flow.\n\nCoinflow can’t guarantee your preference because the issuer (customer's bank)\nultimately determines the authentication flow"
					},
					"destinationAuthKey": {
						"type": "string",
						"description": "If utilizing USDC settlement to addresses other than your main merchant\nsettlement address. Utilize this destinationAuthKey which is a JWT encoded\nwith the information for which address to send the USDC to."
					},
					"authentication3DS": {
						"$ref": "#/components/schemas/Authentication3DS",
						"description": "3DS Card Authorization Data\n\nOn initial payment submission - Device3DSInfo needed:\n 3DS device information - required if 3DS is enabled\n\nAfter card challenge complete:\n 3DS challenge transaction id - required after prompted for challenge"
					},
					"card": {
						"$ref": "#/components/schemas/CardData",
						"description": "Credit card information."
					},
					"saveCard": {
						"type": "boolean",
						"description": "Save the new card? If not passed in, will default to true"
					}
				},
				"required": [
					"subtotal",
					"card"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenCheckoutArgs": {
				"properties": {
					"subtotal": {
						"$ref": "#/components/schemas/Subtotal",
						"description": "Subtotal for the purchase."
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/WebhookInfo",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"chargebackProtectionData": {
						"$ref": "#/components/schemas/CartItemClassOmitted",
						"description": "If your company is using Coinflow Chargeback Protection, you will be required to pass a list of information regarding the\nitems being purchased so that the transaction can be guaranteed. Please see the documentation for more information."
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType",
						"description": "Specify the payment end settlement type"
					},
					"nearDeposit": {
						"$ref": "#/components/schemas/NearDeposit",
						"description": "(Near Only) If you are using near, use this to fund the account to pay for gas fees and storage costs"
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					},
					"redemptionCheck": {
						"type": "boolean",
						"description": "(Solana only) If a transaction involved in the purchase, should payment be checked for redemption"
					},
					"transactionData": {
						"$ref": "#/components/schemas/EvmTransactionData",
						"description": "(EVM only) if you want to execute a transaction on a successful purchase, you can pass a transaction request here.\n\nGas fees for the transaction will be automatically calculated and added to the total charged to the customer."
					},
					"authOnly": {
						"type": "boolean",
						"description": "Only authorize the purchase. This will not actually capture the payment.(default: false)"
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"jwtToken": {
						"type": "string",
						"description": "This is a token encoding the parameters for the request. Allows purchase parameters to be verified\nto prevent manipulation when the checkout page is presented to the user."
					},
					"threeDsChallengePreference": {
						"$ref": "#/components/schemas/ThreeDsChallengePreference",
						"description": "3DS Challenge Preference\n\nNoPreference - Take whatever the issuer decides (Default)\nFrictionless - Request the frictionless authentication flow.\nChallenge - Request the challenge authentication flow.\n\nCoinflow can’t guarantee your preference because the issuer (customer's bank)\nultimately determines the authentication flow"
					},
					"destinationAuthKey": {
						"type": "string",
						"description": "If utilizing USDC settlement to addresses other than your main merchant\nsettlement address. Utilize this destinationAuthKey which is a JWT encoded\nwith the information for which address to send the USDC to."
					},
					"authentication3DS": {
						"$ref": "#/components/schemas/Authentication3DS",
						"description": "3DS Card Authorization Data\n\nOn initial payment submission - Device3DSInfo needed:\n 3DS device information - required if 3DS is enabled\n\nAfter card challenge complete:\n 3DS challenge transaction id - required after prompted for challenge"
					},
					"token": {
						"type": "string",
						"description": "Token for the card to be used for the checkout."
					}
				},
				"required": [
					"subtotal",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_CommonCheckoutArgs.Exclude_keyofCommonCheckoutArgs.redemptionCheck__": {
				"properties": {
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"threeDsChallengePreference": {
						"$ref": "#/components/schemas/ThreeDsChallengePreference",
						"description": "3DS Challenge Preference\n\nNoPreference - Take whatever the issuer decides (Default)\nFrictionless - Request the frictionless authentication flow.\nChallenge - Request the challenge authentication flow.\n\nCoinflow can’t guarantee your preference because the issuer (customer's bank)\nultimately determines the authentication flow"
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"chargebackProtectionData": {
						"$ref": "#/components/schemas/CartItemClassOmitted",
						"description": "If your company is using Coinflow Chargeback Protection, you will be required to pass a list of information regarding the\nitems being purchased so that the transaction can be guaranteed. Please see the documentation for more information."
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"subtotal": {
						"$ref": "#/components/schemas/Subtotal",
						"description": "Subtotal for the purchase."
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType",
						"description": "Specify the payment end settlement type"
					},
					"nearDeposit": {
						"$ref": "#/components/schemas/NearDeposit",
						"description": "(Near Only) If you are using near, use this to fund the account to pay for gas fees and storage costs"
					},
					"transactionData": {
						"$ref": "#/components/schemas/EvmTransactionData",
						"description": "(EVM only) if you want to execute a transaction on a successful purchase, you can pass a transaction request here.\n\nGas fees for the transaction will be automatically calculated and added to the total charged to the customer."
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					},
					"authOnly": {
						"type": "boolean",
						"description": "Only authorize the purchase. This will not actually capture the payment.(default: false)"
					},
					"jwtToken": {
						"type": "string",
						"description": "This is a token encoding the parameters for the request. Allows purchase parameters to be verified\nto prevent manipulation when the checkout page is presented to the user."
					},
					"destinationAuthKey": {
						"type": "string",
						"description": "If utilizing USDC settlement to addresses other than your main merchant\nsettlement address. Utilize this destinationAuthKey which is a JWT encoded\nwith the information for which address to send the USDC to."
					}
				},
				"required": [
					"subtotal"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"AchCheckoutArgs": {
				"properties": {
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"threeDsChallengePreference": {
						"$ref": "#/components/schemas/ThreeDsChallengePreference",
						"description": "3DS Challenge Preference\n\nNoPreference - Take whatever the issuer decides (Default)\nFrictionless - Request the frictionless authentication flow.\nChallenge - Request the challenge authentication flow.\n\nCoinflow can’t guarantee your preference because the issuer (customer's bank)\nultimately determines the authentication flow"
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"chargebackProtectionData": {
						"$ref": "#/components/schemas/CartItemClassOmitted",
						"description": "If your company is using Coinflow Chargeback Protection, you will be required to pass a list of information regarding the\nitems being purchased so that the transaction can be guaranteed. Please see the documentation for more information."
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"subtotal": {
						"$ref": "#/components/schemas/Cents",
						"description": "Subtotal for the purchase."
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType",
						"description": "Specify the payment end settlement type"
					},
					"nearDeposit": {
						"$ref": "#/components/schemas/NearDeposit",
						"description": "(Near Only) If you are using near, use this to fund the account to pay for gas fees and storage costs"
					},
					"transactionData": {
						"$ref": "#/components/schemas/EvmTransactionData",
						"description": "(EVM only) if you want to execute a transaction on a successful purchase, you can pass a transaction request here.\n\nGas fees for the transaction will be automatically calculated and added to the total charged to the customer."
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					},
					"authOnly": {
						"type": "boolean",
						"description": "Only authorize the purchase. This will not actually capture the payment.(default: false)"
					},
					"jwtToken": {
						"type": "string",
						"description": "This is a token encoding the parameters for the request. Allows purchase parameters to be verified\nto prevent manipulation when the checkout page is presented to the user."
					},
					"destinationAuthKey": {
						"type": "string",
						"description": "If utilizing USDC settlement to addresses other than your main merchant\nsettlement address. Utilize this destinationAuthKey which is a JWT encoded\nwith the information for which address to send the USDC to."
					},
					"token": {
						"type": "string",
						"description": "Token for the bankAccount to be used for the checkout."
					},
					"transaction": {
						"type": "string",
						"nullable": true,
						"description": "- (Solana): A Base58 encoded transaction"
					}
				},
				"required": [
					"subtotal",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApplePayJS.ApplePayPaymentContact": {
				"description": "Encapsulates contact information needed for billing and shipping.",
				"properties": {
					"emailAddress": {
						"type": "string",
						"description": "An email address for the contact."
					},
					"familyName": {
						"type": "string",
						"description": "The contact's family name."
					},
					"givenName": {
						"type": "string",
						"description": "The contact's given name."
					},
					"phoneNumber": {
						"type": "string",
						"description": "A phone number for the contact."
					},
					"phoneticFamilyName": {
						"type": "string",
						"description": "The phonetic spelling of the contact's family name."
					},
					"phoneticGivenName": {
						"type": "string",
						"description": "The phonetic spelling of the contact's given name."
					},
					"addressLines": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The street portion of the address for the contact."
					},
					"locality": {
						"type": "string",
						"description": "The city for the contact."
					},
					"subLocality": {
						"type": "string",
						"description": "Additional information associated with the location, typically defined at the city or town level (such as district or neighborhood), in a postal address."
					},
					"administrativeArea": {
						"type": "string",
						"description": "The state for the contact."
					},
					"subAdministrativeArea": {
						"type": "string",
						"description": "The subadministrative area (such as a county or other region) in a postal address."
					},
					"postalCode": {
						"type": "string",
						"description": "The zip code or postal code, where applicable, for the contact."
					},
					"country": {
						"type": "string",
						"description": "The name of the country for the contact."
					},
					"countryCode": {
						"type": "string",
						"description": "The contact’s two-letter ISO 3166 country code."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApplePayPayment": {
				"description": "Apple Pay Payment received from the Apple Pay SDK\n\nDetails can be found here: https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypayment",
				"properties": {
					"token": {
						"properties": {
							"transactionIdentifier": {
								"type": "string",
								"description": "A unique identifier for this payment."
							},
							"paymentMethod": {
								"properties": {
									"type": {
										"type": "string",
										"enum": [
											"debit",
											"credit",
											"prepaid",
											"store"
										],
										"description": "A value representing the card's type of payment."
									},
									"network": {
										"anyOf": [
											{
												"type": "string"
											},
											{
												"type": "string",
												"enum": [
													"Visa"
												]
											}
										],
										"description": "A string, suitable for display, that is the name of the payment network backing the card."
									},
									"displayName": {
										"type": "string",
										"description": "A string, suitable for display, that describes the card."
									}
								},
								"required": [
									"type",
									"network",
									"displayName"
								],
								"type": "object",
								"description": "Information about the card used in the transaction."
							},
							"paymentData": {
								"properties": {
									"version": {
										"type": "string"
									},
									"header": {
										"properties": {
											"transactionId": {
												"type": "string"
											},
											"ephemeralPublicKey": {
												"type": "string"
											},
											"publicKeyHash": {
												"type": "string"
											}
										},
										"required": [
											"transactionId",
											"ephemeralPublicKey",
											"publicKeyHash"
										],
										"type": "object"
									},
									"signature": {
										"type": "string"
									},
									"data": {
										"type": "string"
									}
								},
								"required": [
									"version",
									"header",
									"signature",
									"data"
								],
								"type": "object",
								"description": "An object containing the encrypted payment data."
							}
						},
						"required": [
							"transactionIdentifier",
							"paymentMethod",
							"paymentData"
						],
						"type": "object"
					},
					"billingContact": {
						"$ref": "#/components/schemas/ApplePayJS.ApplePayPaymentContact"
					},
					"shippingContact": {
						"$ref": "#/components/schemas/ApplePayJS.ApplePayPaymentContact"
					}
				},
				"required": [
					"token",
					"billingContact",
					"shippingContact"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApplePayCheckoutArgs": {
				"properties": {
					"subtotal": {
						"$ref": "#/components/schemas/Subtotal",
						"description": "Subtotal for the purchase."
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/WebhookInfo",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"chargebackProtectionData": {
						"$ref": "#/components/schemas/CartItemClassOmitted",
						"description": "If your company is using Coinflow Chargeback Protection, you will be required to pass a list of information regarding the\nitems being purchased so that the transaction can be guaranteed. Please see the documentation for more information."
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType",
						"description": "Specify the payment end settlement type"
					},
					"nearDeposit": {
						"$ref": "#/components/schemas/NearDeposit",
						"description": "(Near Only) If you are using near, use this to fund the account to pay for gas fees and storage costs"
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					},
					"redemptionCheck": {
						"type": "boolean",
						"description": "(Solana only) If a transaction involved in the purchase, should payment be checked for redemption"
					},
					"transactionData": {
						"$ref": "#/components/schemas/EvmTransactionData",
						"description": "(EVM only) if you want to execute a transaction on a successful purchase, you can pass a transaction request here.\n\nGas fees for the transaction will be automatically calculated and added to the total charged to the customer."
					},
					"authOnly": {
						"type": "boolean",
						"description": "Only authorize the purchase. This will not actually capture the payment.(default: false)"
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"jwtToken": {
						"type": "string",
						"description": "This is a token encoding the parameters for the request. Allows purchase parameters to be verified\nto prevent manipulation when the checkout page is presented to the user."
					},
					"threeDsChallengePreference": {
						"$ref": "#/components/schemas/ThreeDsChallengePreference",
						"description": "3DS Challenge Preference\n\nNoPreference - Take whatever the issuer decides (Default)\nFrictionless - Request the frictionless authentication flow.\nChallenge - Request the challenge authentication flow.\n\nCoinflow can’t guarantee your preference because the issuer (customer's bank)\nultimately determines the authentication flow"
					},
					"destinationAuthKey": {
						"type": "string",
						"description": "If utilizing USDC settlement to addresses other than your main merchant\nsettlement address. Utilize this destinationAuthKey which is a JWT encoded\nwith the information for which address to send the USDC to."
					},
					"applePayPayment": {
						"$ref": "#/components/schemas/ApplePayPayment",
						"description": "Apple Pay Payment received from the Apple Pay SDK\n\nDetails can be found here: https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypayment"
					}
				},
				"required": [
					"subtotal",
					"applePayPayment"
				],
				"type": "object",
				"additionalProperties": false
			},
			"google.payments.api.Address": {
				"description": "Description of a user's address.",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the recipient at this address."
					},
					"address1": {
						"type": "string",
						"description": "The first line of the address.\n\nWill be set to empty string if the address does not have a first\nline.",
						"default": ""
					},
					"address2": {
						"type": "string",
						"description": "The second line of the address.\n\nWill be set to empty string if the address does not have a second\nline.",
						"default": ""
					},
					"address3": {
						"type": "string",
						"description": "The third line of the address.\n\nWill be set to empty string if the address does not have a third\nline.",
						"default": ""
					},
					"locality": {
						"type": "string",
						"description": "The locality (e.g. city or town)."
					},
					"administrativeArea": {
						"type": "string",
						"description": "The administrative area (e.g. state or province)."
					},
					"countryCode": {
						"type": "string",
						"description": "The two-letter ISO-3166 country code."
					},
					"postalCode": {
						"type": "string",
						"description": "The postal code (also known in some places as ZIP code).\n\nNote: some regions do not have postal codes. In those cases\nthis field will be set to an empty string."
					},
					"sortingCode": {
						"type": "string",
						"description": "The sorting code.\n\nNote: some regions do not have sorting codes. In those cases\nthis field will be set to an empty string."
					},
					"phoneNumber": {
						"type": "string",
						"description": "The phone number.\n\nThis field will only be present if the caller requested that a phone\nnumber be returned."
					}
				},
				"required": [
					"locality",
					"administrativeArea",
					"countryCode",
					"postalCode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"google.payments.api.PaymentMethodType": {
				"type": "string",
				"enum": [
					"CARD",
					"PAYPAL"
				],
				"description": "Payment method type enum string.\n\nOptions:\n\n- `CARD`:\n  CARD payment method.\n\n  Note that the payment method information that may be returned to you\n  or your processor for a credit card transaction is meant to be used\n  only once. If you need to charge the user again you must call the\n  APIs to obtain new payment credentials.\n\n  Also note that when we transfer information like PAN (personal\n  account number) to either you or your gateway/processor, they may not\n  correspond to the user's physical card. For support purposes, please\n  use user's card info returned in [[CardInfo|`CardInfo`]] instead.\n\n- `PAYPAL`:\n  PAYPAL payment method."
			},
			"google.payments.api.AssuranceDetails": {
				"description": "Assurance details about what validation has been performed on the returned payment credentials so that appropriate instrument risk checks can be applied.\n\n Note: If both cardHolderAuthenticated and accountVerified are true, you don’t need to step up the returned credentials.\n If both aren’t, we recommend you to run the same risk checks and , authentication including 3D Secure flow if applicable.",
				"properties": {
					"accountVerified": {
						"type": "boolean",
						"description": "If true, indicates that Cardholder possession validation has been performed on returned payment credential."
					},
					"cardHolderAuthenticated": {
						"type": "boolean",
						"description": "If true, indicates that identification and verifications (ID&V) was performed on the returned payment credential.\n\nIf false, the same risk-based authentication can be performed as you would for card transactions.\nThis risk-based authentication can include, but not limited to, step-up with 3D Secure protocol if applicable."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"google.payments.api.CardNetwork": {
				"type": "string",
				"enum": [
					"AMEX",
					"DISCOVER",
					"ELECTRON",
					"ELO",
					"ELO_DEBIT",
					"INTERAC",
					"JCB",
					"MAESTRO",
					"MASTERCARD",
					"VISA"
				],
				"description": "Card network enum string.\n\nOptions:\n\n- `AMEX`:\n  American Express card network.\n\n- `DISCOVER`:\n  Discover card network.\n\n- `ELECTRON`:\n  Visa's Electron card network.\n\n  Note that this option can only be set when\n  [[TransactionInfo.countryCode|`TransactionInfo.countryCode`]] is set\n  to `\"BR\"`, and\n  [[CardParameters.allowedCardNetworks|`CardParameters.allowedCardNetworks`]]\n  must also contain [[CardNetwork|`VISA`]]\n\n  For processing purposes, you should use this as an indication that\n  the card must be processed through the Electron debit network.\n\n- `ELO`:\n  Elo card network.\n\n  Note that this option can only be set when\n  [[TransactionInfo.countryCode|`TransactionInfo.countryCode`]] is set\n  to `\"BR\"`.\n\n- `ELO_DEBIT`:\n  Elo's debit network rail.\n\n  Note that this option can only be set when\n  [[TransactionInfo.countryCode|`TransactionInfo.countryCode`]] is set\n  to\n  `\"BR\"`, and\n  [[CardParameters.allowedCardNetworks|`CardParameters.allowedCardNetworks`]]\n  must also contain [[CardNetwork|`ELO`]]\n\n  For processing purposes, you should use this as an indication that\n  the card must be processed through the ELO debit network.\n\n- `INTERAC`:\n  Interac card network.\n\n- `JCB`:\n  JCB card network.\n\n- `MAESTRO`:\n  Maestro card network.\n\n  Note that this option can only be set when\n  [[TransactionInfo.countryCode|`TransactionInfo.countryCode`]] is set\n  to `\"BR\"`, and\n  [[CardParameters.allowedCardNetworks|`CardParameters.allowedCardNetworks`]]\n  must also contain [[CardNetwork|`MASTERCARD`]]\n\n  For processing purposes, you should use this as an indication that\n  the card must be processed through the Maestro debit network.\n\n- `MASTERCARD`:\n  Mastercard card network.\n\n- `VISA`:\n  Visa card network."
			},
			"google.payments.api.CardInfo": {
				"description": "Data for a [[PaymentMethodType|`PaymentMethodType.CARD`]] payment\nmethod.",
				"properties": {
					"assuranceDetails": {
						"$ref": "#/components/schemas/google.payments.api.AssuranceDetails"
					},
					"cardNetwork": {
						"$ref": "#/components/schemas/google.payments.api.CardNetwork",
						"description": "The card network.\n\nThis card network value **should not** be displayed to\nthe buyer, but can be used when the details of a buyer's card are\nneeded. An example would be for customer support to help the buyer\nidentify the card used for this transaction. For a user-visible\ndescription, use\n[[PaymentMethodData.description|`PaymentMethodData.description`]]\ninstead."
					},
					"cardDetails": {
						"type": "string",
						"description": "The details about the card.\n\nThis value will be generally the last 4 digits of the card.\n\nThese details **should not** be displayed to the buyer,\nbut can be used when the details of a buyer's card are needed. An\nexample would be for customer support to help the buyer identify the\ncard used for this transaction. For a user-visible description, use\n[[PaymentMethodData.description|`PaymentMethodData.description`]]\ninstead."
					},
					"billingAddress": {
						"$ref": "#/components/schemas/google.payments.api.Address",
						"description": "The billing address associated with the card.\n\nNote this billing address will only be populated when billing address\nis set as required through\n[[CardParameters.billingAddressRequired|`CardParameters.billingAddressRequired`]]."
					}
				},
				"required": [
					"cardNetwork",
					"cardDetails"
				],
				"type": "object",
				"additionalProperties": false
			},
			"google.payments.api.PaymentMethodTokenizationType": {
				"type": "string",
				"enum": [
					"PAYMENT_GATEWAY",
					"DIRECT"
				],
				"description": "Payment method tokenization type enum string.\n\nOptions:\n\n- `PAYMENT_GATEWAY`:\n  Tokenize a payment response to be consumed or charged by a specified\n  third-party gateway service.\n\n- `DIRECT`:\n  Tokenize to be consumed/charged directly by the merchant."
			},
			"google.payments.api.PaymentMethodTokenizationData": {
				"description": "Tokenization data for the payment method.",
				"properties": {
					"type": {
						"$ref": "#/components/schemas/google.payments.api.PaymentMethodTokenizationType",
						"description": "The type of tokenization to be applied to the selected payment\nmethod.\n\nThis value will match the\n[[PaymentMethodTokenizationSpecification.type|`PaymentMethodTokenizationSpecification.type`]]\nspecified in the request."
					},
					"token": {
						"type": "string",
						"description": "The generated payment method token.\n\nThe contents of this token and how it should be used will depend on\nthe selected\n[[PaymentMethodTokenizationSpecification.type|`PaymentMethodTokenizationSpecification.type`]]."
					}
				},
				"required": [
					"type",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"google.payments.api.PaymentMethodData": {
				"description": "Data for a payment method.",
				"properties": {
					"type": {
						"$ref": "#/components/schemas/google.payments.api.PaymentMethodType",
						"description": "Type of payment method."
					},
					"info": {
						"$ref": "#/components/schemas/google.payments.api.CardInfo",
						"description": "Payment method information.\n\nThe definition of this field depends\non which payment method type was set in\n[[PaymentMethodData.type|`PaymentMethodData.type`]].\n\n- For [[PaymentMethodType|`CARD`]], this field\n  will be an object conforming to [[CardInfo|`CardInfo`]]."
					},
					"description": {
						"type": "string",
						"description": "User-facing message to describe the payment method funding this\ntransaction.\n\nYou are required to show this message to the buyer as confirmation of\ntheir funding source. Please refer to the\n[documentation](https://developers.google.com/pay/api/|documentation)\nfor more information.\n\n**IMPORTANT:** Do not attempt to parse the contents of this string as\nthe format, contents, and length may change at any time. If you need\nadditional details, see\n[[PaymentMethodData.info|`PaymentMethodData.info`]]."
					},
					"tokenizationData": {
						"$ref": "#/components/schemas/google.payments.api.PaymentMethodTokenizationData",
						"description": "Tokenization data for the payment method."
					}
				},
				"required": [
					"type",
					"tokenizationData"
				],
				"type": "object",
				"additionalProperties": false
			},
			"google.payments.api.OfferData": {
				"description": "Definition for each offer to be applied to this payment request.",
				"properties": {
					"redemptionCodes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Redemption codes of the offers applied by the user."
					}
				},
				"required": [
					"redemptionCodes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"google.payments.api.SelectionOptionData": {
				"description": "Data for a [[SelectionOption|`SelectionOption`]].",
				"properties": {
					"id": {
						"type": "string",
						"description": "Unique identifier of a [[SelectionOption|`SelectionOption`]].\nMust match with [[SelectionOption.id|`SelectionOption.id`]]\nfield."
					}
				},
				"required": [
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"google.payments.api.PaymentData": {
				"description": "Payment data.\n\nContains the payment data requested in\n[[PaymentDataRequest|`PaymentDataRequest`]]",
				"properties": {
					"apiVersion": {
						"type": "number",
						"format": "double",
						"description": "Major API version.\n\nThis value will match what was set in\n[[PaymentDataRequest.apiVersion|`PaymentDataRequest.apiVersion`]]."
					},
					"apiVersionMinor": {
						"type": "number",
						"format": "double",
						"description": "Minor API version.\n\nThis value will match what was set in\n[[PaymentDataRequest.apiVersionMinor|`PaymentDataRequest.apiVersionMinor`]]."
					},
					"email": {
						"type": "string",
						"description": "The buyer's email.\n\nThis value will only be set if\n[[PaymentDataRequest.emailRequired|`PaymentDataRequest.emailRequired`]]\nwas set to `true`."
					},
					"shippingAddress": {
						"$ref": "#/components/schemas/google.payments.api.Address",
						"description": "The shipping address.\n\nThis object will only be returned if\n[[PaymentDataRequest.shippingAddressRequired|`PaymentDataRequest.shippingAddressRequired`]]\nwas set to `true`."
					},
					"paymentMethodData": {
						"$ref": "#/components/schemas/google.payments.api.PaymentMethodData",
						"description": "Data about the selected payment method."
					},
					"offerData": {
						"$ref": "#/components/schemas/google.payments.api.OfferData",
						"description": "Contains the data for the offer applied by the user. This will be\npopulated if an offer is applied to the transaction."
					},
					"shippingOptionData": {
						"$ref": "#/components/schemas/google.payments.api.SelectionOptionData",
						"description": "Contains the data for shipping option selected by the user."
					}
				},
				"required": [
					"apiVersion",
					"apiVersionMinor",
					"paymentMethodData"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GooglePayCheckoutArgs": {
				"properties": {
					"subtotal": {
						"$ref": "#/components/schemas/Subtotal",
						"description": "Subtotal for the purchase."
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/WebhookInfo",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"chargebackProtectionData": {
						"$ref": "#/components/schemas/CartItemClassOmitted",
						"description": "If your company is using Coinflow Chargeback Protection, you will be required to pass a list of information regarding the\nitems being purchased so that the transaction can be guaranteed. Please see the documentation for more information."
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType",
						"description": "Specify the payment end settlement type"
					},
					"nearDeposit": {
						"$ref": "#/components/schemas/NearDeposit",
						"description": "(Near Only) If you are using near, use this to fund the account to pay for gas fees and storage costs"
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					},
					"redemptionCheck": {
						"type": "boolean",
						"description": "(Solana only) If a transaction involved in the purchase, should payment be checked for redemption"
					},
					"transactionData": {
						"$ref": "#/components/schemas/EvmTransactionData",
						"description": "(EVM only) if you want to execute a transaction on a successful purchase, you can pass a transaction request here.\n\nGas fees for the transaction will be automatically calculated and added to the total charged to the customer."
					},
					"authOnly": {
						"type": "boolean",
						"description": "Only authorize the purchase. This will not actually capture the payment.(default: false)"
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"jwtToken": {
						"type": "string",
						"description": "This is a token encoding the parameters for the request. Allows purchase parameters to be verified\nto prevent manipulation when the checkout page is presented to the user."
					},
					"threeDsChallengePreference": {
						"$ref": "#/components/schemas/ThreeDsChallengePreference",
						"description": "3DS Challenge Preference\n\nNoPreference - Take whatever the issuer decides (Default)\nFrictionless - Request the frictionless authentication flow.\nChallenge - Request the challenge authentication flow.\n\nCoinflow can’t guarantee your preference because the issuer (customer's bank)\nultimately determines the authentication flow"
					},
					"destinationAuthKey": {
						"type": "string",
						"description": "If utilizing USDC settlement to addresses other than your main merchant\nsettlement address. Utilize this destinationAuthKey which is a JWT encoded\nwith the information for which address to send the USDC to."
					},
					"authentication3DS": {
						"$ref": "#/components/schemas/Authentication3DS",
						"description": "3DS Card Authorization Data\n\nOn initial payment submission - Device3DSInfo needed:\n 3DS device information - required if 3DS is enabled\n\nAfter card challenge complete:\n 3DS challenge transaction id - required after prompted for challenge"
					},
					"paymentData": {
						"allOf": [
							{
								"$ref": "#/components/schemas/google.payments.api.PaymentData"
							},
							{
								"properties": {
									"bin": {
										"type": "string"
									}
								},
								"type": "object"
							}
						]
					}
				},
				"required": [
					"subtotal",
					"paymentData"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_CommonCheckoutArgs.subtotal-or-transactionData-or-rent-or-destinationAuthKey_": {
				"properties": {
					"subtotal": {
						"$ref": "#/components/schemas/Subtotal",
						"description": "Subtotal for the purchase."
					},
					"transactionData": {
						"$ref": "#/components/schemas/EvmTransactionData",
						"description": "(EVM only) if you want to execute a transaction on a successful purchase, you can pass a transaction request here.\n\nGas fees for the transaction will be automatically calculated and added to the total charged to the customer."
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					},
					"destinationAuthKey": {
						"type": "string",
						"description": "If utilizing USDC settlement to addresses other than your main merchant\nsettlement address. Utilize this destinationAuthKey which is a JWT encoded\nwith the information for which address to send the USDC to."
					}
				},
				"required": [
					"subtotal"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"CapturePaymentRequest": {
				"allOf": [
					{
						"$ref": "#/components/schemas/CheckoutResponse"
					},
					{
						"$ref": "#/components/schemas/Pick_CommonCheckoutArgs.subtotal-or-transactionData-or-rent-or-destinationAuthKey_"
					}
				]
			},
			"Pick_CheckoutResponse.paymentId_": {
				"properties": {
					"paymentId": {
						"type": "string",
						"description": "The ID of the payment that was created."
					}
				},
				"required": [
					"paymentId"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"VoidPaymentRequest": {
				"$ref": "#/components/schemas/Pick_CheckoutResponse.paymentId_"
			},
			"ReviewPaymentRequest": {
				"properties": {
					"paymentId": {
						"type": "string",
						"description": "The ID of the payment that was created."
					},
					"accept": {
						"type": "boolean"
					}
				},
				"required": [
					"paymentId",
					"accept"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PixCheckoutResponse": {
				"properties": {
					"paymentId": {
						"type": "string",
						"description": "The ID of the payment that was created."
					},
					"brCode": {
						"type": "string",
						"description": "QR code to display to complete payment."
					},
					"quote": {
						"$ref": "#/components/schemas/CurrencyCents",
						"description": "Updated quote for the purchase."
					},
					"expires": {
						"type": "string",
						"description": "BR Code expiration"
					}
				},
				"required": [
					"paymentId",
					"brCode",
					"quote",
					"expires"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_CommonCheckoutArgs.Exclude_keyofCommonCheckoutArgs.chargebackProtectionData-or-threeDsChallengePreference-or-authOnly__": {
				"properties": {
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"subtotal": {
						"$ref": "#/components/schemas/Subtotal",
						"description": "Subtotal for the purchase."
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType",
						"description": "Specify the payment end settlement type"
					},
					"redemptionCheck": {
						"type": "boolean",
						"description": "(Solana only) If a transaction involved in the purchase, should payment be checked for redemption"
					},
					"nearDeposit": {
						"$ref": "#/components/schemas/NearDeposit",
						"description": "(Near Only) If you are using near, use this to fund the account to pay for gas fees and storage costs"
					},
					"transactionData": {
						"$ref": "#/components/schemas/EvmTransactionData",
						"description": "(EVM only) if you want to execute a transaction on a successful purchase, you can pass a transaction request here.\n\nGas fees for the transaction will be automatically calculated and added to the total charged to the customer."
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					},
					"jwtToken": {
						"type": "string",
						"description": "This is a token encoding the parameters for the request. Allows purchase parameters to be verified\nto prevent manipulation when the checkout page is presented to the user."
					},
					"destinationAuthKey": {
						"type": "string",
						"description": "If utilizing USDC settlement to addresses other than your main merchant\nsettlement address. Utilize this destinationAuthKey which is a JWT encoded\nwith the information for which address to send the USDC to."
					}
				},
				"required": [
					"subtotal"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"PixCheckoutArgs": {
				"properties": {
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"subtotal": {
						"$ref": "#/components/schemas/Subtotal",
						"description": "Subtotal for the purchase."
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType",
						"description": "Specify the payment end settlement type"
					},
					"redemptionCheck": {
						"type": "boolean",
						"description": "(Solana only) If a transaction involved in the purchase, should payment be checked for redemption"
					},
					"nearDeposit": {
						"$ref": "#/components/schemas/NearDeposit",
						"description": "(Near Only) If you are using near, use this to fund the account to pay for gas fees and storage costs"
					},
					"transactionData": {
						"$ref": "#/components/schemas/EvmTransactionData",
						"description": "(EVM only) if you want to execute a transaction on a successful purchase, you can pass a transaction request here.\n\nGas fees for the transaction will be automatically calculated and added to the total charged to the customer."
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					},
					"jwtToken": {
						"type": "string",
						"description": "This is a token encoding the parameters for the request. Allows purchase parameters to be verified\nto prevent manipulation when the checkout page is presented to the user."
					},
					"destinationAuthKey": {
						"type": "string",
						"description": "If utilizing USDC settlement to addresses other than your main merchant\nsettlement address. Utilize this destinationAuthKey which is a JWT encoded\nwith the information for which address to send the USDC to."
					},
					"email": {
						"type": "string",
						"pattern": "(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))"
					}
				},
				"required": [
					"subtotal",
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CoinflowBlockchain": {
				"type": "string",
				"enum": [
					"solana",
					"near",
					"eth",
					"polygon",
					"base",
					"arbitrum",
					"user"
				],
				"description": "Coinflow Types *"
			},
			"RawProductData": {},
			"ChargebackProtectionItem": {
				"properties": {
					"productName": {
						"type": "string",
						"description": "The name of the product"
					},
					"productType": {
						"type": "string",
						"enum": [
							"inGameProduct",
							"gameOfSkill",
							"dataStorage",
							"computingResources",
							"sportsTicket",
							"eSportsTicket",
							"musicTicket",
							"conferenceTicket",
							"virtualSportsTicket",
							"virtualESportsTicket",
							"virtualMusicTicket",
							"virtualConferenceTicket",
							"alcohol",
							"DLC",
							"subscription",
							"fundACause",
							"realEstate",
							"computingContract",
							"digitalArt",
							"topUp",
							"ownershipContract"
						],
						"description": "The product type. Possible values include: inGameProduct, gameOfSkill, dataStorage, computingResources, sportsTicket, eSportsTicket, musicTicket, conferenceTicket, virtualSportsTicket, virtualESportsTicket, virtualMusicTicket, virtualConferenceTicket, alcohol, DLC, subscription, fundACause, realEstate, computingContract, digitalArt, topUp"
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"description": "The number of units sold"
					},
					"rawProductData": {
						"$ref": "#/components/schemas/RawProductData",
						"description": "Any additional data that the store can provide on the product, e.g. description, link to image, etc."
					}
				},
				"required": [
					"productName",
					"productType",
					"quantity"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChargebackProtectionData": {
				"items": {
					"$ref": "#/components/schemas/ChargebackProtectionItem"
				},
				"type": "array",
				"description": "Purchase *"
			},
			"Pick_CoinflowCommonPurchaseProps.Exclude_keyofCoinflowCommonPurchaseProps.onSuccess-or-handleHeightChange-or-merchantId-or-amount-or-env-or-loaderBackground-or-jwtToken-or-destinationAuthKey__": {
				"properties": {
					"email": {
						"type": "string"
					},
					"blockchain": {
						"$ref": "#/components/schemas/CoinflowBlockchain"
					},
					"threeDsChallengePreference": {
						"$ref": "#/components/schemas/ThreeDsChallengePreference"
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo"
					},
					"webhookInfo": {
						"properties": {},
						"additionalProperties": {},
						"type": "object"
					},
					"chargebackProtectionData": {
						"$ref": "#/components/schemas/ChargebackProtectionData"
					},
					"subtotal": {
						"$ref": "#/components/schemas/Subtotal"
					},
					"planCode": {
						"type": "string"
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType"
					},
					"authOnly": {
						"type": "boolean"
					},
					"disableApplePay": {
						"type": "boolean"
					},
					"disableGooglePay": {
						"type": "boolean"
					},
					"deviceId": {
						"type": "string",
						"description": "The DeviceID gotten from the Coinflow SDK:\n https://docs.coinflow.cash/docs/implement-chargeback-protection#how-to-add-chargeback-protection\n\nwindow?.nSureSDK?.getDeviceId()"
					},
					"supportEmail": {
						"type": "string",
						"description": "Your company email address that the customer can contact."
					},
					"origins": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "If rendering the Coinflow component within multiple nested iframes, all ancestors in the chain must be provided as a comma-separated list.\n\nExample:\nPrimary origin that will be interacting with the Coinflow iFrame: foo.com\nSubsequent origins that will render foo.com: bar.com\nThe origin array would then be: [https://foo.com,https://bar.com]"
					},
					"theme": {
						"$ref": "#/components/schemas/MerchantTheme"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_CoinflowCommonPurchaseProps.onSuccess-or-handleHeightChange-or-merchantId-or-amount-or-env-or-loaderBackground-or-jwtToken-or-destinationAuthKey_": {
				"$ref": "#/components/schemas/Pick_CoinflowCommonPurchaseProps.Exclude_keyofCoinflowCommonPurchaseProps.onSuccess-or-handleHeightChange-or-merchantId-or-amount-or-env-or-loaderBackground-or-jwtToken-or-destinationAuthKey__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"Pick_CommonCheckoutArgs.Exclude_keyofCommonCheckoutArgs.nearDeposit-or-authentication3DS-or-jwtToken__": {
				"properties": {
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"threeDsChallengePreference": {
						"$ref": "#/components/schemas/ThreeDsChallengePreference",
						"description": "3DS Challenge Preference\n\nNoPreference - Take whatever the issuer decides (Default)\nFrictionless - Request the frictionless authentication flow.\nChallenge - Request the challenge authentication flow.\n\nCoinflow can’t guarantee your preference because the issuer (customer's bank)\nultimately determines the authentication flow"
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"chargebackProtectionData": {
						"$ref": "#/components/schemas/CartItemClassOmitted",
						"description": "If your company is using Coinflow Chargeback Protection, you will be required to pass a list of information regarding the\nitems being purchased so that the transaction can be guaranteed. Please see the documentation for more information."
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"subtotal": {
						"$ref": "#/components/schemas/Subtotal",
						"description": "Subtotal for the purchase."
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType",
						"description": "Specify the payment end settlement type"
					},
					"redemptionCheck": {
						"type": "boolean",
						"description": "(Solana only) If a transaction involved in the purchase, should payment be checked for redemption"
					},
					"transactionData": {
						"$ref": "#/components/schemas/EvmTransactionData",
						"description": "(EVM only) if you want to execute a transaction on a successful purchase, you can pass a transaction request here.\n\nGas fees for the transaction will be automatically calculated and added to the total charged to the customer."
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					},
					"authOnly": {
						"type": "boolean",
						"description": "Only authorize the purchase. This will not actually capture the payment.(default: false)"
					},
					"destinationAuthKey": {
						"type": "string",
						"description": "If utilizing USDC settlement to addresses other than your main merchant\nsettlement address. Utilize this destinationAuthKey which is a JWT encoded\nwith the information for which address to send the USDC to."
					}
				},
				"required": [
					"subtotal"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_CommonCheckoutArgs.nearDeposit-or-authentication3DS-or-jwtToken_": {
				"$ref": "#/components/schemas/Pick_CommonCheckoutArgs.Exclude_keyofCommonCheckoutArgs.nearDeposit-or-authentication3DS-or-jwtToken__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"GetCheckoutLinkArgs": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Omit_CoinflowCommonPurchaseProps.onSuccess-or-handleHeightChange-or-merchantId-or-amount-or-env-or-loaderBackground-or-jwtToken-or-destinationAuthKey_"
					},
					{
						"properties": {
							"destination": {
								"type": "string",
								"description": "If utilizing USDC settlement to addresses other than your main merchant\nsettlement address. Utilize this destination which is the address to send\nthe USDC to."
							}
						},
						"type": "object"
					},
					{
						"$ref": "#/components/schemas/Omit_CommonCheckoutArgs.nearDeposit-or-authentication3DS-or-jwtToken_"
					}
				]
			},
			"IbanPaymentDetails": {
				"properties": {
					"paymentId": {
						"type": "string"
					},
					"account": {
						"type": "string"
					},
					"sortCode": {
						"type": "string"
					},
					"expires": {
						"type": "string"
					},
					"amount": {
						"$ref": "#/components/schemas/CurrencyCents"
					}
				},
				"required": [
					"paymentId",
					"account",
					"expires",
					"amount"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_CommonCheckoutArgs.Exclude_keyofCommonCheckoutArgs.chargebackProtectionData-or-threeDsChallengePreference-or-authOnly-or-redemptionCheck__": {
				"properties": {
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"subtotal": {
						"$ref": "#/components/schemas/Subtotal",
						"description": "Subtotal for the purchase."
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType",
						"description": "Specify the payment end settlement type"
					},
					"nearDeposit": {
						"$ref": "#/components/schemas/NearDeposit",
						"description": "(Near Only) If you are using near, use this to fund the account to pay for gas fees and storage costs"
					},
					"transactionData": {
						"$ref": "#/components/schemas/EvmTransactionData",
						"description": "(EVM only) if you want to execute a transaction on a successful purchase, you can pass a transaction request here.\n\nGas fees for the transaction will be automatically calculated and added to the total charged to the customer."
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					},
					"jwtToken": {
						"type": "string",
						"description": "This is a token encoding the parameters for the request. Allows purchase parameters to be verified\nto prevent manipulation when the checkout page is presented to the user."
					},
					"destinationAuthKey": {
						"type": "string",
						"description": "If utilizing USDC settlement to addresses other than your main merchant\nsettlement address. Utilize this destinationAuthKey which is a JWT encoded\nwith the information for which address to send the USDC to."
					}
				},
				"required": [
					"subtotal"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"NewIbanCheckoutArgs": {
				"properties": {
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"subtotal": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/CurrencyCents"
							},
							{
								"$ref": "#/components/schemas/TokenSubtotal"
							}
						],
						"description": "Subtotal for the purchase and currency."
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType",
						"description": "Specify the payment end settlement type"
					},
					"nearDeposit": {
						"$ref": "#/components/schemas/NearDeposit",
						"description": "(Near Only) If you are using near, use this to fund the account to pay for gas fees and storage costs"
					},
					"transactionData": {
						"$ref": "#/components/schemas/EvmTransactionData",
						"description": "(EVM only) if you want to execute a transaction on a successful purchase, you can pass a transaction request here.\n\nGas fees for the transaction will be automatically calculated and added to the total charged to the customer."
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					},
					"jwtToken": {
						"type": "string",
						"description": "This is a token encoding the parameters for the request. Allows purchase parameters to be verified\nto prevent manipulation when the checkout page is presented to the user."
					},
					"destinationAuthKey": {
						"type": "string",
						"description": "If utilizing USDC settlement to addresses other than your main merchant\nsettlement address. Utilize this destinationAuthKey which is a JWT encoded\nwith the information for which address to send the USDC to."
					},
					"merchantId": {
						"type": "string",
						"description": "Merchant Identifier"
					},
					"data": {
						"$ref": "#/components/schemas/IbanData",
						"description": "New Sepa/Faster Payments data to be used for checkout"
					}
				},
				"required": [
					"subtotal",
					"merchantId",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IbanCheckoutArgs": {
				"properties": {
					"fixedFee": {
						"$ref": "#/components/schemas/Cents",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction."
					},
					"customerInfo": {
						"$ref": "#/components/schemas/CustomerInfo",
						"description": "Info saved to the customer record on a purchase"
					},
					"webhookInfo": {
						"$ref": "#/components/schemas/AnyObject",
						"description": "Webhook info to be sent to the merchant's webhook endpoint if configured."
					},
					"feePercentage": {
						"type": "number",
						"format": "double",
						"description": "If this purchase is for a seller/submerchant where the marketplace takes a fee, this is the % fee which is\ntaken from the transaction.",
						"minimum": 0,
						"maximum": 100
					},
					"subtotal": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/CurrencyCents"
							},
							{
								"$ref": "#/components/schemas/TokenSubtotal"
							}
						],
						"description": "Subtotal for the purchase and currency."
					},
					"settlementType": {
						"$ref": "#/components/schemas/SettlementType",
						"description": "Specify the payment end settlement type"
					},
					"nearDeposit": {
						"$ref": "#/components/schemas/NearDeposit",
						"description": "(Near Only) If you are using near, use this to fund the account to pay for gas fees and storage costs"
					},
					"transactionData": {
						"$ref": "#/components/schemas/EvmTransactionData",
						"description": "(EVM only) if you want to execute a transaction on a successful purchase, you can pass a transaction request here.\n\nGas fees for the transaction will be automatically calculated and added to the total charged to the customer."
					},
					"rent": {
						"properties": {
							"lamports": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "number",
										"format": "double"
									}
								]
							}
						},
						"required": [
							"lamports"
						],
						"type": "object",
						"description": "(Solana only) if your transaction requires a known amount of Rent to be paid, you can pass it here."
					},
					"jwtToken": {
						"type": "string",
						"description": "This is a token encoding the parameters for the request. Allows purchase parameters to be verified\nto prevent manipulation when the checkout page is presented to the user."
					},
					"destinationAuthKey": {
						"type": "string",
						"description": "If utilizing USDC settlement to addresses other than your main merchant\nsettlement address. Utilize this destinationAuthKey which is a JWT encoded\nwith the information for which address to send the USDC to."
					},
					"merchantId": {
						"type": "string",
						"description": "Merchant Identifier"
					},
					"token": {
						"type": "string",
						"description": "Token for the Sepa/Faster account to be used for checkout"
					}
				},
				"required": [
					"subtotal",
					"merchantId",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BankSettlementData": {
				"properties": {
					"total": {
						"$ref": "#/components/schemas/Cents"
					},
					"bankDescription": {
						"type": "string"
					},
					"date": {
						"type": "string"
					}
				},
				"required": [
					"total",
					"bankDescription",
					"date"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string._total-Cents--transactions-BankSettlementData-Array__": {
				"properties": {},
				"additionalProperties": {
					"properties": {
						"transactions": {
							"items": {
								"$ref": "#/components/schemas/BankSettlementData"
							},
							"type": "array"
						},
						"total": {
							"$ref": "#/components/schemas/Cents"
						}
					},
					"required": [
						"transactions",
						"total"
					],
					"type": "object"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"UiBankSettlement": {
				"$ref": "#/components/schemas/Record_string._total-Cents--transactions-BankSettlementData-Array__"
			},
			"AdminAcceptanceRateAnalytics": {
				"properties": {},
				"type": "object",
				"additionalProperties": {
					"properties": {
						"authRate": {
							"type": "number",
							"format": "double"
						},
						"totalNotEnabledChargebackProtection": {
							"type": "number",
							"format": "double"
						},
						"totalApprovedByChargebackProtection": {
							"type": "number",
							"format": "double"
						},
						"threeDSDeclines": {
							"type": "number",
							"format": "double"
						},
						"chargebackProtectionDeclines": {
							"type": "number",
							"format": "double"
						},
						"userDeclines": {
							"type": "number",
							"format": "double"
						},
						"bankDeclines": {
							"type": "number",
							"format": "double"
						},
						"totalSuccesses": {
							"type": "number",
							"format": "double"
						},
						"totalFailures": {
							"type": "number",
							"format": "double"
						}
					},
					"required": [
						"authRate",
						"totalNotEnabledChargebackProtection",
						"totalApprovedByChargebackProtection",
						"threeDSDeclines",
						"chargebackProtectionDeclines",
						"userDeclines",
						"bankDeclines",
						"totalSuccesses",
						"totalFailures"
					],
					"type": "object"
				}
			},
			"AcceptanceRateSortKey": {
				"type": "string",
				"enum": [
					"authRate",
					"totalFailures",
					"totalSuccesses"
				]
			},
			"Record_string.SecureDSStatistics_": {
				"properties": {},
				"additionalProperties": {
					"$ref": "#/components/schemas/SecureDSStatistics"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			}
		},
		"securitySchemes": {
			"wallet": {
				"type": "apiKey",
				"name": "x-coinflow-auth-wallet",
				"in": "header",
				"description": "The web3 wallet of the end user - see https://docs.coinflow.cash/reference/authentication"
			},
			"blockchain": {
				"type": "apiKey",
				"name": "x-coinflow-auth-blockchain",
				"in": "header",
				"description": "The blockchain associated with the end user - see https://docs.coinflow.cash/reference/authentication"
			},
			"userId": {
				"type": "apiKey",
				"name": "x-coinflow-auth-user-id",
				"in": "header",
				"description": "The external identifier of the end user - see https://docs.coinflow.cash/reference/authentication"
			},
			"merchant": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header",
				"description": "The API key of the merchant - see https://docs.coinflow.cash/reference/authentication"
			},
			"admin": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header"
			},
			"sessionKey": {
				"type": "apiKey",
				"name": "x-coinflow-auth-session-key",
				"in": "header",
				"description": "The session key generated for the end user - see https://docs.coinflow.cash/reference/authentication"
			},
			"signedMessage": {
				"type": "apiKey",
				"name": "x-coinflow-auth-signed-message",
				"in": "header",
				"description": "The message signed by the users wallet"
			},
			"merchantId": {
				"type": "apiKey",
				"name": "x-coinflow-auth-merchant-id",
				"in": "header",
				"description": "The merchant ID the session should be generated for"
			}
		}
	},
	"info": {
		"title": "api",
		"version": "0.0.0",
		"contact": {}
	},
	"paths": {
		"/withdraw/kyc": {
			"post": {
				"operationId": "CreateKyc",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"withdrawer": {
											"$ref": "#/components/schemas/IUser"
										}
									},
									"required": [
										"withdrawer"
									],
									"type": "object"
								}
							}
						}
					},
					"451": {
						"description": "Must Complete Additional Verification",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WithdrawerVerificationRequiredResponse"
								}
							}
						}
					}
				},
				"description": "Performs a Know-Your-Customer check for a particular user. Will create  a withdrawer record for the user if one does not exist.\nIf the user has previously used coinflow to withdraw, the wallet will be added to the withdrawer record.\nNote: If `x-coinflow-auth-wallet` in request headers is not associated with a user, the wallet will get added to the newly created /existing user withdrawer record.",
				"summary": "Register User",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"userId": [],
						"merchant": [
							"admin"
						]
					},
					{
						"wallet": [],
						"blockchain": []
					},
					{
						"sessionKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/KycRequestBody"
							}
						}
					}
				}
			}
		},
		"/withdraw/kyc-doc": {
			"post": {
				"operationId": "CreateKycDocument",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"withdrawer": {
											"allOf": [
												{
													"$ref": "#/components/schemas/IUser_string_"
												},
												{
													"$ref": "#/components/schemas/Required___id-string__"
												}
											]
										}
									},
									"required": [
										"withdrawer"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"summary": "Register User Via Document",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"userId": [],
						"merchant": [
							"admin"
						]
					},
					{
						"wallet": [],
						"blockchain": []
					},
					{
						"sessionKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string"
									},
									"country": {
										"type": "string"
									},
									"idType": {
										"type": "string",
										"description": "Must be one of:\n- ID_CARD\n- PASSPORT\n- DRIVERS\n- RESIDENCE_PERMIT"
									},
									"idFront": {
										"type": "string",
										"format": "binary"
									},
									"idBack": {
										"type": "string",
										"format": "binary"
									},
									"merchantId": {
										"type": "string"
									}
								},
								"required": [
									"email",
									"country",
									"idType",
									"idFront"
								]
							}
						}
					}
				}
			}
		},
		"/withdraw/kyc/share-token": {
			"post": {
				"operationId": "CreateKycShareToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"withdrawer": {
											"allOf": [
												{
													"$ref": "#/components/schemas/IUser_string_"
												},
												{
													"$ref": "#/components/schemas/Required___id-string__"
												}
											]
										}
									},
									"required": [
										"withdrawer"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"summary": "Register User Via Share Token",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"userId": [],
						"merchant": [
							"admin"
						]
					},
					{
						"wallet": [],
						"blockchain": []
					},
					{
						"sessionKey": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/KycShareTokenBody"
							}
						}
					}
				}
			}
		},
		"/withdraw/kyb": {
			"post": {
				"operationId": "CreateKyb",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"withdrawer": {
											"$ref": "#/components/schemas/IBusiness"
										}
									},
									"required": [
										"withdrawer"
									],
									"type": "object"
								}
							}
						}
					},
					"451": {
						"description": "Must Complete Additional Verification",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WithdrawerVerificationRequiredResponse"
								}
							}
						}
					}
				},
				"description": "Performs a Know-Your-Business check for a particular user. Will create  a withdrawer record for the user if one does not exist.\nIf the user has previously used coinflow to withdraw, the wallet will be added to the withdrawer record.",
				"summary": "Register Business",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"wallet": [],
						"blockchain": []
					},
					{
						"userId": [],
						"merchant": [
							"admin"
						]
					},
					{
						"sessionKey": [
							"wallet"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/KybRequestBody"
							}
						}
					}
				}
			}
		},
		"/withdraw": {
			"get": {
				"operationId": "GetWithdrawer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetWithdrawerResponse"
								}
							}
						}
					},
					"451": {
						"description": "Must Complete Additional Verification",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WithdrawerVerificationRequiredResponse"
								}
							}
						}
					}
				},
				"description": "Gets the withdrawer record for a particular user or business.",
				"summary": "Get Withdrawer",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"wallet": [
							"withdrawer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"userId": [],
						"merchant": [
							"admin"
						]
					},
					{
						"jwt": [
							"withdrawer"
						]
					},
					{
						"sessionKey": [
							"withdrawer"
						]
					}
				],
				"parameters": []
			}
		},
		"/withdraw/disabled-payout-methods": {
			"get": {
				"operationId": "GetWithdrawDisabledMethods",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WithdrawDisabledTypes"
								}
							}
						}
					}
				},
				"description": "Gets disabled withdraw methods due to feature maintenance",
				"summary": "Get Disabled Payout Methods",
				"tags": [
					"Withdraw"
				],
				"security": [],
				"parameters": []
			}
		},
		"/withdraw/history": {
			"get": {
				"operationId": "GetWithdrawerHistory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"withdraws": {
											"items": {
												"$ref": "#/components/schemas/IWithdraw"
											},
											"type": "array"
										}
									},
									"required": [
										"withdraws"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Gets the withdrawal history for a particular user or business.",
				"summary": "Get Withdrawer History",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"userId": [
							"withdrawer"
						],
						"merchant": [
							"admin"
						]
					},
					{
						"wallet": [
							"withdrawer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"withdrawer"
						]
					},
					{
						"sessionKey": [
							"wallet",
							"withdrawer"
						]
					}
				],
				"parameters": []
			}
		},
		"/withdraw/account": {
			"post": {
				"operationId": "CreateBankAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddWithdrawMethodResponse"
								}
							}
						}
					}
				},
				"description": "Creates a bank account for a particular user or business.",
				"summary": "Create Bank Account",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"userId": [
							"approvedWithdrawer"
						],
						"merchant": [
							"admin"
						]
					},
					{
						"wallet": [
							"approvedWithdrawer"
						],
						"blockchain": [],
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddBankAccountArgs"
							}
						}
					}
				}
			}
		},
		"/withdraw/iban": {
			"post": {
				"operationId": "CreateIbanAccount",
				"responses": {
					"200": {
						"description": "Token representing the new Iban account",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Creates an Iban account for a particular user",
				"summary": "Create Iban Account",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"userId": [
							"approvedWithdrawer"
						],
						"merchant": [
							"admin"
						]
					},
					{
						"wallet": [
							"approvedWithdrawer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"approvedWithdrawer"
						]
					},
					{
						"sessionKey": [
							"approvedWithdrawer"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IbanAccountData"
							}
						}
					}
				}
			}
		},
		"/withdraw/pix": {
			"post": {
				"operationId": "CreatePixAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Creates a Pix account for a particular user",
				"summary": "Create Pix Account",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"userId": [
							"approvedWithdrawer"
						],
						"merchant": [
							"admin"
						]
					},
					{
						"wallet": [
							"approvedWithdrawer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"approvedWithdrawer"
						]
					},
					{
						"sessionKey": [
							"approvedWithdrawer"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"pixKey": {
										"type": "string"
									}
								},
								"required": [
									"pixKey"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/withdraw/debit-card": {
			"post": {
				"operationId": "AddDebitCard",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Adds a debit card to the withdrawer's account which they can withdraw funds to.\n\nWill check the card to see if its eligible to receive funds.",
				"summary": "Create Debit Card",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"userId": [
							"approvedWithdrawer"
						],
						"merchant": [
							"admin"
						]
					},
					{
						"wallet": [
							"approvedWithdrawer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"approvedWithdrawer"
						]
					},
					{
						"sessionKey": [
							"approvedWithdrawer"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddDebitCardArgs"
							}
						}
					}
				}
			}
		},
		"/withdraw/account/{token}": {
			"delete": {
				"operationId": "DeleteWithdrawerAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"withdrawer": {
											"$ref": "#/components/schemas/IWithdrawerWithAccounts"
										}
									},
									"required": [
										"withdrawer"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a bank account for a particular user or business.",
				"summary": "Delete Withdrawer Bank Account",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"userId": [
							"approvedWithdrawer"
						],
						"merchant": [
							"admin"
						]
					},
					{
						"wallet": [
							"approvedWithdrawer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"approvedWithdrawer"
						]
					},
					{
						"sessionKey": [
							"approvedWithdrawer"
						]
					}
				],
				"parameters": [
					{
						"description": "The token of the bank account to delete.",
						"in": "path",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/withdraw/card/{token}": {
			"delete": {
				"operationId": "DeleteWithdrawerCard",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"withdrawer": {
											"$ref": "#/components/schemas/IWithdrawerWithAccounts"
										}
									},
									"required": [
										"withdrawer"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a card for a particular user or business.",
				"summary": "Delete Withdrawer Card",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"userId": [
							"approvedWithdrawer"
						],
						"merchant": [
							"admin"
						]
					},
					{
						"wallet": [
							"approvedWithdrawer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"approvedWithdrawer"
						]
					},
					{
						"sessionKey": [
							"approvedWithdrawer"
						]
					}
				],
				"parameters": [
					{
						"description": "The token of the card to delete.",
						"in": "path",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/withdraw/iban/{token}": {
			"delete": {
				"operationId": "DeleteIbanAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"withdrawer": {
											"$ref": "#/components/schemas/IWithdrawerWithAccounts"
										}
									},
									"required": [
										"withdrawer"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes an Iban account for a particular user",
				"summary": "Delete Withdrawer Iban Account",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"userId": [
							"approvedWithdrawer"
						],
						"merchant": [
							"admin"
						]
					},
					{
						"wallet": [
							"approvedWithdrawer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"approvedWithdrawer"
						]
					},
					{
						"sessionKey": [
							"approvedWithdrawer"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/withdraw/pix/{token}": {
			"delete": {
				"operationId": "DeletePixAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"withdrawer": {
											"$ref": "#/components/schemas/IWithdrawerWithAccounts"
										}
									},
									"required": [
										"withdrawer"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a Pix account for a particular user",
				"summary": "Delete Withdrawer Pix Account",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"userId": [
							"approvedWithdrawer"
						],
						"merchant": [
							"admin"
						]
					},
					{
						"wallet": [
							"approvedWithdrawer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"approvedWithdrawer"
						]
					},
					{
						"sessionKey": [
							"approvedWithdrawer"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/withdraw/quote": {
			"get": {
				"operationId": "GetQuote",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WithdrawQuote"
								}
							}
						}
					}
				},
				"description": "Gets a quote in USD cents for a particular token and amount.",
				"summary": "Get Quote",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"wallet": [
							"approvedWithdrawer"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"approvedWithdrawer"
						]
					},
					{
						"userId": [
							"approvedWithdrawer",
							"operationalBlockchain"
						],
						"blockchain": [],
						"merchant": [
							"admin"
						]
					},
					{
						"sessionKey": [
							"wallet",
							"approvedWithdrawer"
						]
					}
				],
				"parameters": [
					{
						"description": "- The token address or contract of the token which the user is withdrawing.",
						"in": "query",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The amount of that token which the user is withdrawing.",
						"in": "query",
						"name": "amount",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- The merchant that this quote is for.",
						"in": "query",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- [EVM only] whether the user's wallet supports signing permit messages.",
						"in": "query",
						"name": "usePermit",
						"required": false,
						"schema": {
							"default": true,
							"type": "boolean"
						}
					}
				]
			}
		},
		"/withdraw/quote/out": {
			"get": {
				"operationId": "GetExactAmountOut",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"BRL": {
											"$ref": "#/components/schemas/CurrencyCents"
										},
										"GBP": {
											"$ref": "#/components/schemas/CurrencyCents"
										},
										"EUR": {
											"$ref": "#/components/schemas/CurrencyCents"
										}
									},
									"required": [
										"BRL",
										"GBP",
										"EUR"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "For a given amount of USD cents, get how much EUR, GBP, BRL\na withdrawer would get before fees are taken out.",
				"summary": "Get Quote Exact Out",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"description": "USD Cents",
						"in": "query",
						"name": "cents",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/withdraw/balances": {
			"get": {
				"operationId": "GetWithdrawBalances",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"balances": {
											"items": {
												"$ref": "#/components/schemas/WithdrawToken"
											},
											"type": "array"
										}
									},
									"required": [
										"balances"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Gets all the token balances for a particular wallet",
				"summary": "Get Balances",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"wallet": [
							"approvedWithdrawer"
						],
						"blockchain": [
							"approvedWithdrawer"
						]
					},
					{
						"jwt": [
							"approvedWithdrawer"
						]
					},
					{
						"sessionKey": [
							"wallet",
							"approvedWithdrawer"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "merchantId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/withdraw/evm/message": {
			"post": {
				"operationId": "GetEvmMessage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetMessageResponse"
								}
							}
						}
					}
				},
				"description": "Gets any messages to be signed by the user, the signed message is then passed\nas the `evmPermitMessage` body property into the\n`/api/withdraw/evm/transaction` endpoint.\n\nThis is only necessary for EVM chains.",
				"summary": "Get Message (EVM USDC/SBC/EuroE only)",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"wallet": [],
						"blockchain": []
					},
					{
						"jwt": []
					},
					{
						"sessionKey": [
							"wallet"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GetWithdrawMessageBody"
							}
						}
					}
				}
			}
		},
		"/withdraw/evm/transaction": {
			"post": {
				"operationId": "SendEvmGaslessTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"hash": {
											"type": "string"
										}
									},
									"required": [
										"hash"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Send a gasless USDC withdraw transaction to the blockchain.\nThe gas for the transaction can either be paid by the user or by the merchant,\ndepending on your merchant settings.\n\nThis is only allowed for withdrawing USDC/SBC/EuroE on EVM chains.",
				"summary": "Send Gasless Withdraw Transaction (EVM USDC/SBC/EuroE only)",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"wallet": [
							"approvedWithdrawer"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"approvedWithdrawer"
						]
					},
					{
						"sessionKey": [
							"wallet",
							"approvedWithdrawer"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SendEvmWithdrawTransactionBody"
							}
						}
					}
				}
			}
		},
		"/withdraw/transaction": {
			"post": {
				"operationId": "GetTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetWithdrawTransactionResponse"
								}
							}
						}
					},
					"451": {
						"description": "User Must Complete Additional Verification",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DwollaVerificationRequest"
								}
							}
						}
					}
				},
				"description": "Creates the transaction to be signed by the user and sent to the blockchain.",
				"summary": "Create Transactions",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"wallet": [
							"approvedWithdrawer"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"approvedWithdrawer"
						]
					},
					{
						"sessionKey": [
							"wallet",
							"approvedWithdrawer"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GetWithdrawTransactionBody"
							}
						}
					}
				}
			}
		},
		"/withdraw/transaction/hash": {
			"post": {
				"operationId": "ProcessTransactionHash",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "ONLY USE THIS IF INSTRUCTED TO.\n\nThis endpoint allows you to submit a sent and confirmed withdrawal transaction to Coinflow for processing.",
				"summary": "Process Transaction Hash",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"merchant": [
							"admin"
						],
						"blockchain": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"expectedAmount": {
										"$ref": "#/components/schemas/Cents",
										"description": "This is the expected amount of USDC which was withdrawn, acts as an extra check for security."
									},
									"hash": {
										"type": "string",
										"description": "Hash/signature/identifier of the transaction on the network."
									}
								},
								"required": [
									"hash"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/withdraw/currency": {
			"patch": {
				"operationId": "ChangeWithdrawerCurrency",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetWithdrawerResponse"
								}
							}
						}
					}
				},
				"description": "Changes the currency for a withdrawer",
				"summary": "Change Withdrawer Currency",
				"tags": [
					"Withdraw"
				],
				"security": [
					{
						"userId": [
							"approvedWithdrawer"
						],
						"merchant": [
							"admin"
						]
					},
					{
						"wallet": [
							"approvedWithdrawer"
						],
						"blockchain": [],
						"merchant": [
							"admin"
						]
					},
					{
						"jwt": [
							"approvedWithdrawer"
						]
					},
					{
						"sessionKey": [
							"wallet",
							"approvedWithdrawer"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"currency": {
										"$ref": "#/components/schemas/Currency"
									}
								},
								"required": [
									"currency"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/utils/contract-address": {
			"get": {
				"operationId": "GetContractAddresses",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"address": {
											"type": "string"
										}
									},
									"required": [
										"address"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Get the Coinflow Contract address by blockchain",
				"summary": "Get the Coinflow Contract Address",
				"tags": [
					"Utilities"
				],
				"security": [],
				"parameters": [
					{
						"description": "- Blockchain to get the contract address of",
						"in": "query",
						"name": "blockchain",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Blockchain"
						}
					}
				]
			}
		},
		"/utils/send-solana-tx": {
			"post": {
				"operationId": "SendSolanaTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SendSolanaTransactionResponse"
								}
							}
						}
					},
					"412": {
						"description": "Simulation Failed",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"logs": {
											"type": "string"
										}
									},
									"required": [
										"logs"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Use Coinflow's battle tested ⚔️ Transaction Sending (The same system we use to send our own transactions).\n\nThis endpoint sends a fully signed Solana transaction with retries and stable RPC servers.\nThis is helpful during periods of network instability where the solution is to use better private RPC servers,\nretry transactions multiple times.",
				"summary": "Send Solana Transaction",
				"tags": [
					"Utilities"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SendSolanaTransactionRequest"
							}
						}
					}
				}
			}
		},
		"/utils/send-coinflow-tx": {
			"post": {
				"operationId": "SendCoinflowTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"signature": {
											"type": "string"
										}
									},
									"required": [
										"signature"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Send a Coinflow generated and signed transaction\n\nUse Coinflow's battle tested ⚔️ Transaction Sending (The same system we use to send our own transactions)\nThis endpoint sends a fully signed Solana transaction with retries thru stable RPC servers.",
				"summary": "Send Coinflow Signed Solana Transaction",
				"tags": [
					"Utilities"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- merchantId: A valid merchant id\n  signedTransaction: The signed transaction",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SendTransactionBody",
								"description": "- merchantId: A valid merchant id\n  signedTransaction: The signed transaction"
							}
						}
					}
				}
			}
		},
		"/merchant/subscription/plans": {
			"post": {
				"operationId": "CreatePlan",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SubscriptionPlan"
								}
							}
						}
					}
				},
				"description": "Create a new subscription plan",
				"summary": "Create Plans",
				"tags": [
					"Merchant Subscription"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SubscriptionPlan"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetPlans",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SubscriptionPlan"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get subscription plans",
				"summary": "Get Plans",
				"tags": [
					"Merchant Subscription"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					}
				],
				"parameters": []
			}
		},
		"/merchant/subscription/plans/{planId}": {
			"put": {
				"operationId": "UpdatePlan",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SubscriptionPlan"
								}
							}
						}
					}
				},
				"description": "Update a subscription plan",
				"summary": "Update Plan",
				"tags": [
					"Merchant Subscription"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "planId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SubscriptionPlan"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeactivatePlan",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Deactivate a subscription plan\nIf no subscribers, will be deleted.\nNew subscriptions will not be allowed.",
				"summary": "Deactivate Plan",
				"tags": [
					"Merchant Subscription"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "planId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/subscription/plans/{planId}/subscribers": {
			"get": {
				"operationId": "GetSubscriptions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SubscriptionDisplay"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get the subscriptions for a subscription plan",
				"summary": "Get Subscribers",
				"tags": [
					"Merchant Subscription"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "planId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/subscription/subscribers/{subscriptionId}": {
			"get": {
				"operationId": "GetSubscriptionPayments",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SubscriptionPayment"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get the payments applied to a subscription",
				"summary": "Get Subscription Payments",
				"tags": [
					"Merchant Subscription"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "subscriptionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"patch": {
				"operationId": "CancelSubscription",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Cancel a subscription",
				"summary": "Cancel Subscription (by merchant)",
				"tags": [
					"Merchant Subscription"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "subscriptionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/auth/verify": {
			"get": {
				"operationId": "VerifyToken",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Verify a token is valid and is not expired",
				"summary": "Verify Token",
				"tags": [
					"Authentication"
				],
				"security": [
					{
						"jwt": []
					},
					{
						"sessionKey": []
					}
				],
				"parameters": []
			}
		},
		"/auth": {
			"get": {
				"operationId": "GetMessage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetMessageToSignResponse"
								}
							}
						}
					}
				},
				"description": "Get the message for the user's wallet to sign.",
				"summary": "Get Message",
				"tags": [
					"Authentication"
				],
				"security": [
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "GetJwt",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetJwtResponse"
								}
							}
						}
					}
				},
				"description": "Get an authentication token given the signed message.",
				"summary": "Get Authentication Token",
				"tags": [
					"Authentication"
				],
				"security": [
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GetJwtBody"
							}
						}
					}
				}
			}
		},
		"/auth/session-key": {
			"get": {
				"operationId": "GetSessionKey",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetSessionKeyResponse"
								}
							}
						}
					}
				},
				"description": "Get an authentication session key",
				"summary": "Get Session Key",
				"tags": [
					"Authentication"
				],
				"security": [
					{
						"userId": [],
						"merchant": [
							"admin"
						]
					},
					{
						"merchant": [
							"admin",
							"wallet"
						],
						"wallet": [],
						"blockchain": []
					},
					{
						"signedMessage": [],
						"wallet": [],
						"blockchain": [],
						"merchantId": []
					}
				],
				"parameters": []
			}
		},
		"/subscription/{merchantId}/plans": {
			"get": {
				"operationId": "GetAvailablePlans",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SubscriptionPlan"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get the available subscription plans for a merchant",
				"summary": "Get Available Plans",
				"tags": [
					"Subscription"
				],
				"security": [
					{
						"sessionKey": []
					},
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/subscription/{merchantId}/plans/{code}": {
			"get": {
				"operationId": "GetPlan",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SubscriptionPlan"
								}
							}
						}
					}
				},
				"description": "Get a specific subscription plan",
				"summary": "Get Plan",
				"tags": [
					"Subscription"
				],
				"security": [
					{
						"sessionKey": []
					},
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "code",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/subscription/{merchantId}/subscribers/card": {
			"post": {
				"operationId": "CreateSubscriptionCard",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Purchase a subscription with a new credit card",
				"summary": "Purchase Subscription w New Card",
				"tags": [
					"Subscription"
				],
				"security": [
					{
						"sessionKey": []
					},
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- (Optional) If you are using Coinflow Chargeback Protection, you must pass the device id of the customer's device.",
						"in": "header",
						"name": "x-device-id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SubscriptionCardSetup"
							}
						}
					}
				}
			}
		},
		"/subscription/{merchantId}/subscribers/token": {
			"post": {
				"operationId": "CreateSubscriptionToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Purchase a subscription with an existing credit card",
				"summary": "Purchase Subscription w Existing Card",
				"tags": [
					"Subscription"
				],
				"security": [
					{
						"sessionKey": [
							"customer"
						]
					},
					{
						"wallet": [
							"customer"
						],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- (Optional) If you are using Coinflow Chargeback Protection, you must pass the device id of the customer's device.",
						"in": "header",
						"name": "x-device-id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SubscriptionTokenSetup"
							}
						}
					}
				}
			}
		},
		"/subscription/{merchantId}/subscribers/ach": {
			"post": {
				"operationId": "CreateSubscriptionAch",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"428": {
						"description": "User must re-verify account"
					}
				},
				"description": "Purchase a subscription using ACH",
				"summary": "Purchase Subscription by ACH",
				"tags": [
					"Subscription"
				],
				"security": [
					{
						"sessionKey": [
							"customer"
						]
					},
					{
						"wallet": [
							"customer"
						],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "x-device-id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SubscriptionAchSetup"
							}
						}
					}
				}
			}
		},
		"/subscription/{merchantId}/subscribers": {
			"get": {
				"operationId": "GetCustomerSubscriptions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SubscriptionDisplay"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get the subscriptions a customer has with a merchant",
				"summary": "Get Customer Subscriptions",
				"tags": [
					"Subscription"
				],
				"security": [
					{
						"sessionKey": []
					},
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/subscription/{merchantId}/subscribers/{subscriptionId}": {
			"patch": {
				"operationId": "CancelCustomerSubscription",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Cancel a subscription (by customer)",
				"summary": "Customer Cancel Subscription",
				"tags": [
					"Subscription"
				],
				"security": [
					{
						"sessionKey": []
					},
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "subscriptionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/refunds": {
			"get": {
				"operationId": "GetRefunds",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/RefundInfo"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Refund"
				],
				"security": [
					{
						"admin": []
					},
					{
						"merchant": [
							"viewer"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "since",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "until",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "source",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "method",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "merchantId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/redeem": {
			"post": {
				"operationId": "GetRedeemTransaction",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RedeemResponse"
								}
							}
						}
					},
					"412": {
						"description": "Wallet does not have enough credits to complete redeem request, this can happen when the network is slow. Please retry the request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Given the transaction, merchant, and amount, this endpoint will return a transaction for the user to sign and send\nto complete their purchase with a merchants contract",
				"summary": "Create Transaction",
				"tags": [
					"Redeem"
				],
				"security": [
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "x-device-id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RedeemBody"
							}
						}
					}
				}
			}
		},
		"/payment/ach/debit": {
			"post": {
				"operationId": "AchDebit",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SanitizedOffChainPayment_IAchDebit_"
								}
							}
						}
					}
				},
				"description": "Given bank account information, debit the account via ACH\n\nACH Debits are sent as Same Day ACH meaning that they will get batched\non the next ACH batch. ACH Debits will settle T+5 business days after batching.",
				"summary": "ACH Debit",
				"tags": [
					"Off Chain Payments"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AchArgs"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetAchDebit",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"debits": {
											"items": {
												"$ref": "#/components/schemas/SanitizedOffChainPayment_IAchDebit_"
											},
											"type": "array"
										}
									},
									"required": [
										"debits"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "ACH Credit not found"
					}
				},
				"description": "Gets the ACH Debit information and status\n\nIf no ID is provided returns all records within limit and page.\nIf ID is provided returns a single record.",
				"summary": "Get ACH Debits",
				"tags": [
					"Off Chain Payments"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"description": "- (Optional) The ID of the ACH Debit",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- (Default: 1000) The number of records to return",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"default": 1000,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- (Default: 0) The page of records to return",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 0,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- (Optional) Filter by the status of the ACH Debit",
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/AchDebitStatus"
						}
					},
					{
						"description": "- (Optional) Filter by the date the ACH Debit was created",
						"in": "query",
						"name": "since",
						"required": false,
						"schema": {
							"format": "date-time",
							"type": "string"
						}
					}
				]
			}
		},
		"/payment/ach/credit": {
			"post": {
				"operationId": "AchCredit",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SanitizedOffChainPayment_IAchCredit_"
								}
							}
						}
					}
				},
				"description": "Given bank account information, credit the account via ACH\n\nACH Credits are sent as a Same Day ACH meaning that they will get batched\non the next ACH batch, and should appear on the customer's statement the same day.\nDepending on when the ACH Credit is initiated, it may appear the next business day.",
				"summary": "ACH Credit",
				"tags": [
					"Off Chain Payments"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AchArgs"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetAchCredits",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"credits": {
											"items": {
												"$ref": "#/components/schemas/SanitizedOffChainPayment_IAchCredit_"
											},
											"type": "array"
										}
									},
									"required": [
										"credits"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "ACH Credit not found"
					}
				},
				"description": "Gets the ACH Credit information and status\n\nIf no ID is provided returns all records within limit and page.\nIf ID is provided returns a single record.",
				"summary": "Get ACH Credits",
				"tags": [
					"Off Chain Payments"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"description": "- (Optional) The ID of the ACH Debit",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- (Default: 1000) The number of records to return",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"default": 1000,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- (Default: 0) The page of records to return",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"default": 0,
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- (Optional) Filter by the status of the ACH Debit",
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/AchCreditStatus"
						}
					},
					{
						"description": "- (Optional) Filter by the date the ACH Debit was created",
						"in": "query",
						"name": "since",
						"required": false,
						"schema": {
							"format": "date-time",
							"type": "string"
						}
					}
				]
			}
		},
		"/payment/balance": {
			"get": {
				"operationId": "GetBalance",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"balance": {
											"$ref": "#/components/schemas/Cents"
										}
									},
									"required": [
										"balance"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Get account balance.",
				"summary": "Get Account Balance",
				"tags": [
					"Off Chain Payments"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": []
			}
		},
		"/merchant/withdraws": {
			"get": {
				"operationId": "GetAllWithdraws",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/IWithdraw"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get All Withdraws associated with the merchant",
				"summary": "Get Withdraws",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "since",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "until",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"createdAt",
								"amount"
							]
						}
					},
					{
						"in": "query",
						"name": "sortDirection",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "speed",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "merchantId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/merchant/withdraws/{withdrawalId}": {
			"get": {
				"operationId": "GetWithdrawal",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"withdrawal": {
											"$ref": "#/components/schemas/IWithdraw"
										}
									},
									"required": [
										"withdrawal"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "Withdrawal not found"
					}
				},
				"description": "Get a specific withdrawal associated with the merchant\n  The withdrawal can be specified by transfer id or transaction",
				"summary": "Get Withdrawal",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "withdrawalId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/withdraws/payout": {
			"post": {
				"operationId": "DoPayout",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetWithdrawTransactionResponse"
								}
							}
						}
					}
				},
				"description": "Get a transaction which will payout a user's account upon successful sending\nof the transaction.",
				"summary": "Payout to a user",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserWithdrawTransactionParams"
							}
						}
					}
				}
			}
		},
		"/merchant/withdraws/payout/delegated": {
			"post": {
				"operationId": "PayoutFromDelegatedSettlementWallet",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"signature": {
											"type": "string"
										}
									},
									"required": [
										"signature"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Payout a user from the coinflow wallet balance.",
				"summary": "Payout to a user",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PayoutDelegatedArgs"
							}
						}
					}
				}
			}
		},
		"/merchant/withdraws/payout/balance": {
			"get": {
				"operationId": "GetPayoutBalance",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"balance": {
											"$ref": "#/components/schemas/Cents"
										}
									},
									"required": [
										"balance"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"summary": "Get Coinflow Wallet Balance",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": []
			}
		},
		"/submerchant/{parentId}": {
			"post": {
				"operationId": "CreateSubmerchant",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"submerchant": {
											"$ref": "#/components/schemas/SanitizedMerchant"
										}
									},
									"required": [
										"submerchant"
									],
									"type": "object"
								}
							}
						}
					},
					"451": {
						"description": "Must Complete Additional Verification",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerificationRequiredResponse"
								}
							}
						}
					}
				},
				"description": "Creates a submerchant using the current merchant's account as a template",
				"summary": "Create Submerchant",
				"tags": [
					"SubMerchant"
				],
				"security": [],
				"parameters": [
					{
						"description": "- merchantId of the parent merchant",
						"in": "path",
						"name": "parentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SubMerchantRegisterBody"
							}
						}
					}
				}
			}
		},
		"/submerchant": {
			"get": {
				"operationId": "GetSubmerchants",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/SanitizedMerchant"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"summary": "Get All Submerchants",
				"tags": [
					"SubMerchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					}
				],
				"parameters": []
			}
		},
		"/submerchant/{submerchantId}": {
			"get": {
				"operationId": "GetSubmerchant",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/SanitizedMerchant"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"404": {
						"description": "Submerchant Not Found"
					}
				},
				"summary": "Get Submerchant by ID",
				"tags": [
					"SubMerchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "submerchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/payments/enhanced/{paymentId}": {
			"get": {
				"operationId": "GetEnhancedTxInformation",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"info": {
											"allOf": [
												{
													"$ref": "#/components/schemas/EnhancedTxInfoResponse"
												}
											],
											"nullable": true
										}
									},
									"required": [
										"info"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"summary": "Get Enhanced Transaction Information",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"chargeback"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "paymentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/payments/ach-returns": {
			"get": {
				"operationId": "GetAchReturns",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/IPayment"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"summary": "Get Returned ACH Payments",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "- UTC ISO String of the earliest date to include in the results",
						"in": "query",
						"name": "since",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- UTC ISO String of the latest date to include in the results",
						"in": "query",
						"name": "until",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- Number of results to return per page (MAX 1000)",
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "- Page number to return",
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"createdAt",
								"amount"
							]
						}
					},
					{
						"in": "query",
						"name": "sortDirection",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "protection",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "merchantId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/payments/{paymentId}": {
			"get": {
				"operationId": "GetPaymentById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/IPayment"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"summary": "Get Payment By ID",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "- ID of the payment to retrieve",
						"in": "path",
						"name": "paymentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/payments/{paymentId}/refund": {
			"put": {
				"operationId": "RefundPayment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"type": "number",
											"format": "double"
										},
										{
											"type": "string"
										}
									]
								}
							}
						}
					}
				},
				"description": "Refunds a payment. First will check if the users wallet has credits to refund the payment. If so, will take the\ncredits from the users wallet and refund the payment. Otherwise, will transfer USDC from the merchants wallet to\nCoinflow's wallet and refund the payment.The amount of USDC transferred will the total amount of the payment +\ncredit card fees + gas fees.",
				"summary": "Refund Payment",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					}
				],
				"parameters": [
					{
						"description": "- ID of the payment to refund",
						"in": "path",
						"name": "paymentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"refundReason": {
										"$ref": "#/components/schemas/RefundReason"
									}
								},
								"required": [
									"refundReason"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/payments/{paymentId}/override": {
			"put": {
				"operationId": "nSureOverrideOther",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Override the nSure chargeback protection setting to false",
				"summary": "Override Chargeback Protection",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "paymentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"protectionEnabled": {
										"type": "boolean"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/payments/{paymentId}/settle": {
			"put": {
				"operationId": "SettlePayment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"type": "number",
											"format": "double"
										},
										{
											"type": "string"
										},
										{}
									]
								}
							}
						}
					}
				},
				"description": "-- This method is for test environment only --\nForce an ACH or PIX payment to settlement",
				"summary": "Settle Payment",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "paymentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/chargebacks": {
			"get": {
				"operationId": "GetAllChargebacks",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/AllChargebackResponse"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"summary": "Get all chargebacks",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"chargeback"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sortDirection",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "responded",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "processor",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "protection",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "merchantId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "since",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "until",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/chargebacks/rate": {
			"get": {
				"operationId": "GetChargebackStats",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChargebackStats"
								}
							}
						}
					}
				},
				"summary": "Get chargeback stats for time frame",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "-- YYYY-MM-DD",
						"in": "query",
						"name": "since",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "-- YYYY-MM-DD",
						"in": "query",
						"name": "until",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/chargebacks/{paymentId}/ignore": {
			"put": {
				"operationId": "UpdateChargebackIgnoreStatus",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"summary": "Update merchant ignore chargeback",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"chargeback"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "paymentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"ignore": {
										"type": "boolean"
									}
								},
								"required": [
									"ignore"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/chargebacks/{paymentId}": {
			"get": {
				"operationId": "GetChargeback",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"customer": {
											"$ref": "#/components/schemas/CustomerData"
										},
										"payment": {
											"$ref": "#/components/schemas/IPayment"
										},
										"chargeback": {
											"$ref": "#/components/schemas/IChargeback"
										}
									},
									"required": [
										"customer",
										"payment",
										"chargeback"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Get information about a Chargeback for a payment",
				"summary": "Get chargeback data",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"chargeback"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "paymentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/chargebacks/{paymentId}/draft": {
			"put": {
				"operationId": "SaveDraftAndNotes",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"summary": "Save Chargeback Response Draft",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"chargeback"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "paymentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"notes": {
										"type": "string"
									},
									"draft": {
										"type": "string"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/chargebacks/{paymentId}/respond": {
			"post": {
				"operationId": "Respond",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Respond to a chargeback. This will send the response to the card network.",
				"summary": "Create Chargeback Response",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"chargeback"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "paymentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"response": {
										"type": "string"
									}
								},
								"required": [
									"response"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/credits/mint": {
			"post": {
				"operationId": "MintCredits",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"jobId": {
											"anyOf": [
												{
													"type": "number",
													"format": "double"
												},
												{
													"type": "string"
												}
											]
										}
									},
									"required": [
										"jobId"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Mint Credits from your Merchant's Coinflow USDC wallet to a users wallet",
				"summary": "Mint Credits",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreditOperation"
							}
						}
					}
				}
			}
		},
		"/merchant/credits/burn": {
			"post": {
				"operationId": "BurnCredits",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"jobId": {
											"anyOf": [
												{
													"type": "number",
													"format": "double"
												},
												{
													"type": "string"
												}
											]
										}
									},
									"required": [
										"jobId"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Burn Coinflow Credits from a wallet, will only work for credits which you previously minted via the mint endpoint",
				"summary": "Burn Credits",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreditOperation"
							}
						}
					}
				}
			}
		},
		"/merchant/credits/status/{jobId}": {
			"get": {
				"operationId": "GetJobStatus",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JobStatusResponse"
								}
							}
						}
					}
				},
				"description": "Get the status of a mint or burn job",
				"summary": "Get Job Status",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "jobId",
						"required": true,
						"schema": {}
					}
				]
			}
		},
		"/merchant/webhooks": {
			"get": {
				"operationId": "GetAllWebhooks",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/WebhookDisplay"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"summary": "Get Payment Webhook Activity",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "responseCode",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "eventType",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "merchantId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/webhooks/{webhookLogId}": {
			"post": {
				"operationId": "ResendWebhook",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"jobId": {
											"anyOf": [
												{
													"type": "number",
													"format": "double"
												},
												{
													"type": "string"
												}
											]
										}
									},
									"required": [
										"jobId"
									],
									"type": "object"
								}
							}
						}
					},
					"403": {
						"description": "Not authorized to resend webhook"
					},
					"404": {
						"description": "Webhook not found"
					}
				},
				"summary": "Resend Payment Webhook",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "webhookLogId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant": {
			"get": {
				"operationId": "GetMerchant",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SanitizedMerchant"
								}
							}
						}
					}
				},
				"description": "Get the merchant",
				"summary": "Get Merchant",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					}
				],
				"parameters": []
			},
			"put": {
				"operationId": "EditMerchant",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SanitizedMerchant"
								}
							}
						}
					}
				},
				"description": "Edit the merchant details",
				"summary": "Edit Merchant",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/EditableMerchant"
									},
									{
										"properties": {
											"password": {
												"type": "string"
											}
										},
										"type": "object"
									}
								]
							}
						}
					}
				}
			}
		},
		"/merchant/v2": {
			"get": {
				"operationId": "GetMerchantV2",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"verificationLinks": {
											"$ref": "#/components/schemas/PendingVerification"
										},
										"merchant": {
											"$ref": "#/components/schemas/SanitizedMerchant"
										}
									},
									"required": [
										"merchant"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Get the merchant",
				"summary": "Get Merchant",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					}
				],
				"parameters": []
			}
		},
		"/merchant/webhook": {
			"post": {
				"operationId": "AddWebhookUrl",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SanitizedMerchant"
								}
							}
						}
					}
				},
				"summary": "Add Webhook Url",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"url": {
										"type": "string"
									}
								},
								"required": [
									"url"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "RemoveWebhookUrl",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SanitizedMerchant"
								}
							}
						}
					}
				},
				"summary": "Remove Webhook Url",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"url": {
										"type": "string"
									}
								},
								"required": [
									"url"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/regenerate": {
			"put": {
				"operationId": "RegenerateApiKey",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"apiKey": {
											"type": "string"
										}
									},
									"required": [
										"apiKey"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Regenerates the API key for use in API calls",
				"summary": "Regenerate API Key",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": []
			}
		},
		"/merchant/api-key": {
			"get": {
				"operationId": "GetApiKeys",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"properties": {
											"publicUuid": {
												"type": "string"
											}
										},
										"required": [
											"publicUuid"
										],
										"type": "object"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get list of Api Keys",
				"summary": "Get API Keys",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateApiKey",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"apiKey": {
											"type": "string"
										}
									},
									"required": [
										"apiKey"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Creates an API key for use in API calls",
				"summary": "Create API Key",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": []
			},
			"delete": {
				"operationId": "RevokeApiKey",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Revokes an API key for use in API calls",
				"summary": "Create API Key",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"publicUuid": {
										"type": "string"
									}
								},
								"required": [
									"publicUuid"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/submerchants": {
			"get": {
				"operationId": "GetSubmerchantsForMerchant",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get submerchant Ids for a merchant",
				"summary": "Get Submerchants under Merchant",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": []
			}
		},
		"/merchant/url-whitelist": {
			"post": {
				"operationId": "WhitelistUrl",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Whitelist a URL for embedding the checkout form",
				"summary": "Whitelist URL",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"url": {
										"type": "string"
									}
								},
								"required": [
									"url"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "RevokeUrlWhitelist",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Revokes a URLs whitelist for use in the checkout iframe",
				"summary": "Revoke URL Whitelist",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"url": {
										"type": "string"
									}
								},
								"required": [
									"url"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/settlement-bank": {
			"post": {
				"operationId": "SetSettlementBank",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {},
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Set the bank account information which will be used for settlement. Only call this if you want the money processed\nfrom credit card transactions to be sent to a company bank account.",
				"summary": "Set Settlement Bank",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BankAccountData"
							}
						}
					}
				}
			}
		},
		"/merchant/settlement-address": {
			"post": {
				"operationId": "SetSettlementAddress",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SanitizedMerchant"
								}
							}
						}
					}
				},
				"description": "Set the blockchain account information which will be used for settlement. Only call this if you want the money processed\nfrom credit card transactions to be sent to directly as USDC to a company owned blockchain address.",
				"summary": "Set Settlement Address",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"address": {
										"type": "string"
									},
									"blockchain": {
										"$ref": "#/components/schemas/Blockchain"
									}
								},
								"required": [
									"address",
									"blockchain"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/customers": {
			"get": {
				"operationId": "GetCustomerAccounts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/ICustomerWallet"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "List customers for a merchant",
				"summary": "Get customer list",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "blocked",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"createdAt"
							]
						}
					},
					{
						"in": "query",
						"name": "sortDirection",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "protection",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/customer/profile": {
			"post": {
				"operationId": "GetCustomerProfile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CustomerData"
								}
							}
						}
					}
				},
				"description": "Get data about a customer, user or business, including cards, banks, payments, payouts and verification data",
				"summary": "Get all customer data",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"wallets": {
										"items": {
											"properties": {
												"wallet": {
													"type": "string"
												},
												"blockchain": {
													"$ref": "#/components/schemas/Blockchain"
												}
											},
											"required": [
												"wallet",
												"blockchain"
											],
											"type": "object"
										},
										"type": "array"
									}
								},
								"required": [
									"wallets"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/{customerId}/protection": {
			"put": {
				"operationId": "nSureOverrideMerchant",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Override the nSure chargeback protection setting to false",
				"summary": "Override Chargeback Protection",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"chargeback"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "customerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"protectionEnabled": {
										"type": "boolean"
									}
								},
								"required": [
									"protectionEnabled"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/blocked/{customerId}": {
			"put": {
				"operationId": "UnblockAccount",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"summary": "Block or Unblock Customer",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "customerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"blockedStatus": {
										"$ref": "#/components/schemas/CustomerBlockedStatus"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/block-withdrawer/{withdrawerId}": {
			"put": {
				"operationId": "BlockOrUnblockWithdrawer",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"summary": "Block or Unblock Withdrawer",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "withdrawerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"blockedStatus": {
										"type": "boolean"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/{customerId}/attemptLimit": {
			"put": {
				"operationId": "UpdateAttemptLimitSetting",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Change customer attempt limit setting",
				"summary": "Configure attempt limit setting",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "customerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"setting": {
										"$ref": "#/components/schemas/FailedAttemptSetting"
									}
								},
								"required": [
									"setting"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/{customerId}/exempt3DS": {
			"put": {
				"operationId": "Update3DSExemption",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Change customer 3DS exemption status",
				"summary": "Configure 3DS exemption",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "customerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"exempt": {
										"type": "boolean"
									}
								},
								"required": [
									"exempt"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/{customerId}/verificationSetting": {
			"put": {
				"operationId": "UpdateCustomerVerificationSetting",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Change customer verification setting",
				"summary": "Configure if KYC verification is required for large purchases",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "customerId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"setting": {
										"$ref": "#/components/schemas/CustomerVerificationSetting"
									}
								},
								"required": [
									"setting"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/bank-settlements": {
			"get": {
				"operationId": "GetBankSettlements",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BankSettlementResponse"
								}
							}
						}
					}
				},
				"summary": "Get Bank Settlements",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					}
				],
				"parameters": []
			}
		},
		"/merchant/acceptance-rates": {
			"get": {
				"operationId": "GetAcceptanceRates",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MerchantAcceptanceAggregation"
								}
							}
						}
					}
				},
				"description": "Fetch your merchant acceptance rate & the Coinflow avg acceptance rate",
				"summary": "Get Acceptance Rates",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "- YYYY-MM-DD",
						"in": "query",
						"name": "since",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- YYYY-MM-DD",
						"in": "query",
						"name": "until",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/withdrawers": {
			"get": {
				"operationId": "GetWithdrawers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/IWithdrawer"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"summary": "Gets merchant withdrawers",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"description": "Filter on blocked status (boolean string - 'true' or 'false')",
						"in": "query",
						"name": "blocked",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Search term to filter results",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/program": {
			"post": {
				"operationId": "RequestProgramApproval",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"summary": "Request Program Approval",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"editor"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"blockchain": {
										"$ref": "#/components/schemas/Blockchain"
									},
									"programId": {
										"type": "string"
									}
								},
								"required": [
									"blockchain",
									"programId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/merchant/audit": {
			"get": {
				"operationId": "GetAuditLogs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/AuditLogDisplay"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"summary": "Gets merchant audit logs",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": []
			}
		},
		"/merchant/secureDS": {
			"get": {
				"operationId": "GetSecureDSStatistics",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SecureDSStatistics"
								}
							}
						}
					}
				},
				"summary": "Get 3DS Statistics",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "since",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "until",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/merchant/abandoned-secureDS": {
			"get": {
				"operationId": "GetSecureDSAbandoned",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/ISecureDS"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"summary": "Get Abandoned 3DS Challenges",
				"tags": [
					"Merchant"
				],
				"security": [
					{
						"merchant": [
							"viewer"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "since",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "until",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/marketplace/link/purchase": {
			"post": {
				"operationId": "GetPurchaseLink",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetMarketplaceLinkResponse"
								}
							}
						}
					}
				},
				"description": "Get a link which the marketplace can redirect or present via iframe to the\ncustomer for them to complete a purchase with a seller.",
				"summary": "Get Purchase Link",
				"tags": [
					"Marketplace"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GetMarketplacePurchaseLinkRequest"
							}
						}
					}
				}
			}
		},
		"/marketplace/link/subscription": {
			"post": {
				"operationId": "GetSubscribeLink",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetMarketplaceLinkResponse"
								}
							}
						}
					}
				},
				"description": "Get a link which the marketplace can redirect or present via iframe to the\ncustomer for them to subscribe to a particular seller's subscription.",
				"summary": "Get Subscription Link",
				"tags": [
					"Marketplace"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GetMarketplaceSubscribeLinkRequest"
							}
						}
					}
				}
			}
		},
		"/marketplace/link/seller/registration": {
			"post": {
				"operationId": "GetSellerRegisterLink",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetMarketplaceLinkResponse"
								}
							}
						}
					}
				},
				"description": "Get a link which the marketplace can redirect new sellers to register\ntheir accounts.",
				"summary": "Get Seller Registration Link",
				"tags": [
					"Marketplace"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GetMarketplaceSellerRegistrationLinkRequest"
							}
						}
					}
				}
			}
		},
		"/marketplace/link/seller/login": {
			"post": {
				"operationId": "GetSellerLoginLink",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetMarketplaceLinkResponse"
								}
							}
						}
					}
				},
				"description": "Get a link which the marketplace can redirect sellers to login to\ntheir dashboards and view purchases and withdraw their money.",
				"summary": "Get Seller Login Link",
				"tags": [
					"Marketplace"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/GetMarketplaceSellerEmailLoginLinkRequest"
									},
									{
										"$ref": "#/components/schemas/GetMarketplaceSellerIdLoginLinkRequest"
									}
								]
							}
						}
					}
				}
			}
		},
		"/seller": {
			"post": {
				"operationId": "CreateSeller",
				"responses": {
					"204": {
						"description": "No content"
					},
					"451": {
						"description": "Must Complete Additional Verification",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerificationRequiredResponse"
								}
							}
						}
					}
				},
				"description": "Given the verification information, register a seller to a marketplace",
				"summary": "Create Seller",
				"tags": [
					"Marketplace"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateSellerRequest"
							}
						}
					}
				}
			}
		},
		"/faucet": {
			"post": {
				"operationId": "Faucet",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"signature": {
											"type": "string"
										}
									},
									"required": [
										"signature"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"summary": "Gets USDC/SBC/EuroE on testnets",
				"tags": [
					"Faucet"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"currency": {
										"$ref": "#/components/schemas/StableCoin"
									},
									"amount": {
										"$ref": "#/components/schemas/Cents"
									},
									"publicKey": {
										"type": "string"
									},
									"blockchain": {
										"$ref": "#/components/schemas/Blockchain"
									}
								},
								"required": [
									"currency",
									"amount",
									"publicKey",
									"blockchain"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/customer/v2": {
			"get": {
				"operationId": "GetCustomer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetCustomerResponse"
								}
							}
						}
					},
					"412": {
						"description": "No customer associated with customerId, will also return this code if the customer exists, but they have no payment methods are available.",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"enum": [
										null
									],
									"nullable": true
								}
							}
						}
					},
					"451": {
						"description": "Must Complete Additional Verification",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerificationRequiredResponse"
								}
							}
						}
					}
				},
				"description": "Gets the Customer record for a particular user.",
				"summary": "Get Customer",
				"tags": [
					"Customers"
				],
				"security": [
					{
						"sessionKey": [
							"customer",
							"CustomerPurse",
							"requireJwtCheck"
						]
					},
					{
						"wallet": [
							"customer",
							"CustomerPurse",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"customer",
							"CustomerPurse"
						]
					}
				],
				"parameters": []
			}
		},
		"/customer/history/{paymentId}": {
			"get": {
				"operationId": "GetCustomerPaymentById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"payment": {
											"$ref": "#/components/schemas/PaymentHistory"
										}
									},
									"required": [
										"payment"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Gets the Purchase for a Customer by ID",
				"summary": "Get Purchase History By ID",
				"tags": [
					"Customers"
				],
				"security": [
					{
						"sessionKey": [],
						"blockchain": []
					},
					{
						"wallet": [
							"customer"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"customer"
						]
					}
				],
				"parameters": [
					{
						"description": "- p\\Payment id to filter the request by",
						"in": "path",
						"name": "paymentId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/customer/history": {
			"get": {
				"operationId": "GetHistory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"history": {
											"items": {
												"$ref": "#/components/schemas/PaymentHistory"
											},
											"type": "array"
										}
									},
									"required": [
										"history"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Gets the Purchase History for a particular Customer",
				"summary": "Get Purchase History",
				"tags": [
					"Customers"
				],
				"security": [
					{
						"sessionKey": [
							"customer",
							"requireJwtCheck"
						]
					},
					{
						"wallet": [
							"customer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"customer"
						]
					}
				],
				"parameters": [
					{
						"description": "- Optional payment id to filter the request by",
						"in": "query",
						"name": "paymentId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/customer/card/{cardToken}": {
			"delete": {
				"operationId": "DeleteCard",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Deletes the card for a particular customer",
				"summary": "Delete Card",
				"tags": [
					"Customers"
				],
				"security": [
					{
						"sessionKey": [
							"customer",
							"requireJwtCheck"
						]
					},
					{
						"wallet": [
							"customer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"customer"
						]
					}
				],
				"parameters": [
					{
						"description": "- Token of the card to delete",
						"in": "path",
						"name": "cardToken",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/customer/balances/{merchantId}": {
			"get": {
				"operationId": "GetCheckoutBalances",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CustomerBalances"
								}
							}
						}
					}
				},
				"description": "Gets the balances of credits, usdc, and an optional token for a particular wallet",
				"summary": "Get Balances",
				"tags": [
					"Customers"
				],
				"security": [
					{
						"sessionKey": []
					},
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/customer/bankAccount": {
			"post": {
				"operationId": "AddBankAccount",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Adds a bank account for a given customer",
				"summary": "Add Bank Account",
				"tags": [
					"Customers"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/AddAccountData"
									},
									{
										"properties": {
											"blockchain": {
												"$ref": "#/components/schemas/Blockchain"
											},
											"wallet": {
												"type": "string"
											}
										},
										"required": [
											"blockchain",
											"wallet"
										],
										"type": "object"
									}
								]
							}
						}
					}
				}
			}
		},
		"/customer/bankAccount/{token}": {
			"delete": {
				"operationId": "DeleteBankAccount",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Deletes a bank account for a given customer",
				"summary": "Delete Bank Account",
				"tags": [
					"Customers"
				],
				"security": [
					{
						"sessionKey": [
							"customer",
							"requireJwtCheck"
						]
					},
					{
						"wallet": [
							"customer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"customer"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/customer/iban": {
			"post": {
				"operationId": "AddIban",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Create an Iban account for a given customer",
				"tags": [
					"Customers"
				],
				"security": [
					{
						"sessionKey": []
					},
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"merchantId": {
										"type": "string"
									},
									"data": {
										"$ref": "#/components/schemas/IbanData"
									}
								},
								"required": [
									"merchantId",
									"data"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/customer/iban/{token}": {
			"delete": {
				"operationId": "DeleteIban",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Deletes an Iban account for a given customer",
				"summary": "Delete Iban Account",
				"tags": [
					"Customers"
				],
				"security": [
					{
						"sessionKey": [
							"customer",
							"requireJwtCheck"
						]
					},
					{
						"wallet": [
							"customer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"customer"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "token",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/checkout/totals/{merchantId}": {
			"post": {
				"operationId": "GetTotals",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetTotalsResponse"
								}
							}
						}
					}
				},
				"description": "Gets the fees, quotes, and totals for a particular checkout.",
				"summary": "Get Totals",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"sessionKey": []
					},
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GetTotalsBody"
							}
						}
					}
				}
			}
		},
		"/checkout/card/{merchantId}": {
			"post": {
				"operationId": "CardCheckout",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CheckoutResponse"
								}
							}
						}
					},
					"304": {
						"description": "Credit balance available - Please utilize the redemption endpoint to complete the purchase https://docs.coinflow.cash/reference/getredeemtransaction"
					},
					"412": {
						"description": "Challenge required",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChallengeFields"
								}
							}
						}
					},
					"423": {
						"description": "Customer is Blocked"
					},
					"451": {
						"description": "Must Complete Additional Verification",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pick_VerificationRequiredResponse.verification-or-verificationLink_"
								}
							}
						}
					}
				},
				"description": "Processes a checkout via credit card information, will tokenize and save the card for reuse by the customer in the future.",
				"summary": "Card Checkout",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"sessionKey": []
					},
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- (Optional) If you are using Coinflow Chargeback Protection, you must pass the device id of the customer's device.",
						"in": "header",
						"name": "x-device-id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CardCheckoutArgs"
							}
						}
					}
				}
			}
		},
		"/checkout/token/{merchantId}": {
			"post": {
				"operationId": "TokenCheckout",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CheckoutResponse"
								}
							}
						}
					},
					"304": {
						"description": "Credit balance available - Please utilize the redemption endpoint to complete the purchase https://docs.coinflow.cash/reference/getredeemtransaction"
					},
					"412": {
						"description": "Challenge required",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChallengeFields"
								}
							}
						}
					},
					"423": {
						"description": "Customer is Blocked"
					},
					"451": {
						"description": "Must Complete Additional Verification",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerificationRequiredResponse"
								}
							}
						}
					}
				},
				"description": "Processes a checkout via tokenized card information.",
				"summary": "Saved Card Checkout",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"sessionKey": [
							"customer"
						]
					},
					{
						"wallet": [
							"customer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"customer"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- (Optional) If you are using Coinflow Chargeback Protection, you must pass the device id of the customer's device.",
						"in": "header",
						"name": "x-device-id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TokenCheckoutArgs"
							}
						}
					}
				}
			}
		},
		"/checkout/ach/{merchantId}": {
			"post": {
				"operationId": "AchCheckout",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CheckoutResponse"
								}
							}
						}
					},
					"423": {
						"description": "Customer is Blocked"
					},
					"428": {
						"description": "User must re-verify account"
					},
					"451": {
						"description": "Must Complete Additional Verification",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerificationRequiredResponse"
								}
							}
						}
					}
				},
				"description": "Processes a checkout via ACH.",
				"summary": "ACH Checkout",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"sessionKey": [
							"customer"
						]
					},
					{
						"wallet": [
							"customer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"customer"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- (Optional) If you are using Coinflow Chargeback Protection, you must pass the device id of the customer's device.",
						"in": "header",
						"name": "x-device-id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AchCheckoutArgs"
							}
						}
					}
				}
			}
		},
		"/checkout/v2/apple-pay/{merchantId}": {
			"post": {
				"operationId": "ApplePay",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CheckoutResponse"
								}
							}
						}
					},
					"304": {
						"description": "Credit balance available - Please utilize the redemption endpoint to complete the purchase https://docs.coinflow.cash/reference/getredeemtransaction"
					},
					"423": {
						"description": "Customer is Blocked"
					},
					"451": {
						"description": "Must Complete Additional Verification",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerificationRequiredResponse"
								}
							}
						}
					}
				},
				"summary": "Apple Pay Checkout",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"sessionKey": []
					},
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "x-device-id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ApplePayCheckoutArgs"
							}
						}
					}
				}
			}
		},
		"/checkout/apple-pay/validatemerchant": {
			"get": {
				"operationId": "ValidateMerchant",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"summary": "Apple Pay Validate Merchant",
				"tags": [
					"Checkout"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "domainName",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/checkout/google-pay/{merchantId}": {
			"post": {
				"operationId": "GooglePay",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CheckoutResponse"
								}
							}
						}
					},
					"304": {
						"description": "Credit balance available - Please utilize the redemption endpoint to complete the purchase https://docs.coinflow.cash/reference/getredeemtransaction"
					},
					"412": {
						"description": "Challenge required",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ChallengeFields"
								}
							}
						}
					},
					"423": {
						"description": "Customer is Blocked"
					},
					"451": {
						"description": "Must Complete Additional Verification",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerificationRequiredResponse"
								}
							}
						}
					}
				},
				"summary": "Google Pay Checkout",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"sessionKey": []
					},
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "x-device-id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GooglePayCheckoutArgs"
							}
						}
					}
				}
			}
		},
		"/checkout/usdc/{merchantId}": {
			"post": {
				"operationId": "UsdcCheckout",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"transaction": {
											"type": "string"
										}
									},
									"required": [
										"transaction"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Gets the transaction to send a merchant who is using USDC settlement,\nUSDC directly from a customer's wallet. Webhook Info will be included in\nthe transaction memo, and once complete the purchase will be included\nin the dashboard, webhooks, and merchant email notifications.",
				"summary": "USDC Checkout",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"customerInfo": {
										"$ref": "#/components/schemas/CustomerInfo"
									},
									"webhookInfo": {
										"$ref": "#/components/schemas/WebhookInfo"
									},
									"subtotal": {
										"$ref": "#/components/schemas/Cents"
									}
								},
								"required": [
									"subtotal"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/checkout/updateLinkToken": {
			"post": {
				"operationId": "UpdateLinkToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LinkTokenCreateResponse"
								}
							}
						}
					}
				},
				"description": "Get link to re-verify Plaid account",
				"summary": "Re-verify Plaid account",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"sessionKey": []
					},
					{
						"userId": []
					},
					{
						"wallet": [],
						"blockchain": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "the token associated with the account",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"token": {
										"type": "string"
									}
								},
								"required": [
									"token"
								],
								"type": "object",
								"description": "the token associated with the account"
							}
						}
					}
				}
			}
		},
		"/checkout/capture": {
			"post": {
				"operationId": "CapturePayment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"jobId": {
											"anyOf": [
												{
													"type": "number",
													"format": "double"
												},
												{
													"type": "string"
												}
											]
										}
									},
									"required": [
										"jobId"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "If a payment has been created with authOnly=true, capture it using this endpoint.",
				"summary": "Capture Payment",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CapturePaymentRequest"
							}
						}
					}
				}
			}
		},
		"/checkout/void": {
			"post": {
				"operationId": "VoidPayment",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "If a payment has been created with authOnly=true, void the authorization using this endpoint.",
				"summary": "Void Payment",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VoidPaymentRequest"
							}
						}
					}
				}
			}
		},
		"/checkout/review": {
			"put": {
				"operationId": "ReviewPayment",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "If a payment has a chargeback protection status of Pending Review, select the action to be taken on the payment",
				"summary": "Review Payment Protection",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					},
					{
						"admin": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReviewPaymentRequest"
							}
						}
					}
				}
			}
		},
		"/checkout/pix/order/{merchantId}": {
			"post": {
				"operationId": "CreatePixPayment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PixCheckoutResponse"
								}
							}
						}
					}
				},
				"description": "Initiates a Pix payment order. Returns a BR code used to pay the order. Must be paid before the returned expiration date (5 minutes).",
				"summary": "Create Pix Payment Order",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"sessionKey": []
					},
					{
						"wallet": [],
						"blockchain": []
					},
					{
						"userId": [
							"operationalBlockchain"
						],
						"blockchain": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "merchantId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PixCheckoutArgs"
							}
						}
					}
				}
			}
		},
		"/checkout/link": {
			"post": {
				"operationId": "GetCheckoutLink",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"link": {
											"type": "string"
										}
									},
									"required": [
										"link"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Gets a checkout link for the UserID that can be embedded in vanilla iframe\nor the user can be redirected to",
				"summary": "Get Checkout Link",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"userId": [],
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GetCheckoutLinkArgs"
							}
						}
					}
				}
			}
		},
		"/checkout/jwt-token": {
			"post": {
				"operationId": "GetCheckoutJwtToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"checkoutJwtToken": {}
									},
									"required": [
										"checkoutJwtToken"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Gets a Checkout Jwt Token for a purchase\n\nCheckout JWT tokens ensure:\n1. The arguments of the purchase cannot be manipulated\n2. The checkout JWT is only valid for a single purchase\n3. The arguments of the purchase are encrypted to be hidden from the user\n (webhook info, chargebackProtectionData, etc...)",
				"summary": "Get Checkout Jwt Token",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GetCheckoutLinkArgs"
							}
						}
					}
				}
			}
		},
		"/checkout/destination-auth-key": {
			"post": {
				"operationId": "GetDestinationAuthKey",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"destinationAuthKey": {
											"type": "string"
										}
									},
									"required": [
										"destinationAuthKey"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "If your merchant account is settling USDC to an account OTHER than\nthe one defined in your settlement settings, you can utilize this\nendpoint to get a destinationAuthKey which can be passed into the\ncheckout endpoints which will settle USDC to the account which\nis passed into this endpoint.",
				"summary": "Get Destination Auth Key",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"merchant": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"blockchain": {
										"$ref": "#/components/schemas/Blockchain"
									},
									"destination": {
										"type": "string"
									}
								},
								"required": [
									"blockchain",
									"destination"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/checkout/iban": {
			"post": {
				"operationId": "IbanCheckout",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IbanPaymentDetails"
								}
							}
						}
					},
					"423": {
						"description": "Customer is Blocked"
					},
					"428": {
						"description": "User must re-verify account"
					},
					"451": {
						"description": "Must Complete Additional Verification",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerificationRequiredResponse"
								}
							}
						}
					}
				},
				"description": "Initiates a Sepa/Faster Payments payment order with a new account. Returns destination account info.\nMust be paid before the returned expiration date (5 minutes).",
				"summary": "Create New Sepa/Faster Payments Payment",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"sessionKey": []
					},
					{
						"wallet": [
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NewIbanCheckoutArgs"
							}
						}
					}
				}
			}
		},
		"/checkout/iban/token": {
			"post": {
				"operationId": "IbanTokenCheckout",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IbanPaymentDetails"
								}
							}
						}
					},
					"423": {
						"description": "Customer is Blocked"
					},
					"428": {
						"description": "User must re-verify account"
					},
					"451": {
						"description": "Must Complete Additional Verification",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerificationRequiredResponse"
								}
							}
						}
					}
				},
				"description": "Initiates a Sepa/Faster Payments payment order. Returns destination account info.\nMust be paid before the returned expiration date (5 minutes).",
				"summary": "Create Sepa/Faster Payments Payment",
				"tags": [
					"Checkout"
				],
				"security": [
					{
						"sessionKey": [
							"customer"
						]
					},
					{
						"wallet": [
							"customer",
							"requireJwtCheck"
						],
						"blockchain": []
					},
					{
						"jwt": [
							"customer"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IbanCheckoutArgs"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "https://api-sandbox.coinflow.cash/api"
		}
	]
}